
kernel7l.elf:     file format elf32-littlearm


Disassembly of section .init:

00008000 <_start>:
    8000:	e10f0000 	mrs	r0, CPSR
    8004:	e220001a 	eor	r0, r0, #26
    8008:	e310001f 	tst	r0, #31
    800c:	e3c0001f 	bic	r0, r0, #31
    8010:	e38000d3 	orr	r0, r0, #211	; 0xd3
    8014:	1a000004 	bne	802c <_start+0x2c>
    8018:	e3800c01 	orr	r0, r0, #256	; 0x100
    801c:	e28fe00c 	add	lr, pc, #12
    8020:	e16ff000 	msr	SPSR_fsxc, r0
    8024:	e12ef30e 	.word	0xe12ef30e
    8028:	e160006e 	.word	0xe160006e
    802c:	e121f000 	msr	CPSR_c, r0
    8030:	e3a00000 	mov	r0, #0
    8034:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}
    8038:	f1020011 	cps	#17
    803c:	e3a0d82d 	mov	sp, #2949120	; 0x2d0000
    8040:	f1020012 	cps	#18
    8044:	e3a0d82b 	mov	sp, #2818048	; 0x2b0000
    8048:	f1020017 	cps	#23
    804c:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8050:	f102001b 	cps	#27
    8054:	e3a0d829 	mov	sp, #2686976	; 0x290000
    8058:	f102001f 	cps	#31
    805c:	e3a0d98a 	mov	sp, #2260992	; 0x228000
    8060:	ea001653 	b	d9b4 <sysinit>

00008064 <_start_secondary>:
    8064:	f57ff04f 	dsb	sy
    8068:	e320f003 	wfi
    806c:	eafffffd 	b	8068 <_start_secondary+0x4>

Disassembly of section .text:

00008070 <kernelPrint(char const*)>:
    8070:	e1a01000 	mov	r1, r0
    8074:	e308007c 	movw	r0, #32892	; 0x807c
    8078:	e3400001 	movt	r0, #1
    807c:	ea000174 	b	8654 <CKernel::write_log(char const*, ...)>

00008080 <addKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*)>:
    8080:	e1a0c001 	mov	ip, r1
    8084:	e1a03002 	mov	r3, r2
    8088:	e1a01000 	mov	r1, r0
    808c:	e1a0200c 	mov	r2, ip
    8090:	e308007c 	movw	r0, #32892	; 0x807c
    8094:	e3400001 	movt	r0, #1
    8098:	ea000164 	b	8630 <CKernel::addKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*)>

0000809c <kernelPrintV(char const*, ...)>:
    809c:	e92d000f 	push	{r0, r1, r2, r3}
    80a0:	e308007c 	movw	r0, #32892	; 0x807c
    80a4:	e3400001 	movt	r0, #1
    80a8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    80ac:	e24dd00c 	sub	sp, sp, #12
    80b0:	e59d1010 	ldr	r1, [sp, #16]
    80b4:	e28d2014 	add	r2, sp, #20
    80b8:	e58d2004 	str	r2, [sp, #4]
    80bc:	eb000175 	bl	8698 <CKernel::write_logV(char const*, std::__va_list)>
    80c0:	e28dd00c 	add	sp, sp, #12
    80c4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    80c8:	e28dd010 	add	sp, sp, #16
    80cc:	e12fff1e 	bx	lr

000080d0 <sleepTimerHandler(unsigned int, void*, void*)>:
    80d0:	e5913080 	ldr	r3, [r1, #128]	; 0x80
    80d4:	e3050400 	movw	r0, #21504	; 0x5400
    80d8:	e3400001 	movt	r0, #1
    80dc:	e5933010 	ldr	r3, [r3, #16]
    80e0:	e12fff13 	bx	r3

000080e4 <kernelTaskRun(TTask*)>:
    80e4:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    80e8:	e1a04000 	mov	r4, r0
    80ec:	e1cd60f8 	strd	r6, [sp, #8]
    80f0:	e305745c 	movw	r7, #21596	; 0x545c
    80f4:	e3407001 	movt	r7, #1
    80f8:	e58d8010 	str	r8, [sp, #16]
    80fc:	e3056488 	movw	r6, #21640	; 0x5488
    8100:	e3406001 	movt	r6, #1
    8104:	e58de014 	str	lr, [sp, #20]
    8108:	eb001fdd 	bl	10084 <getScheduler()>
    810c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8110:	e1a05000 	mov	r5, r0
    8114:	e3050420 	movw	r0, #21536	; 0x5420
    8118:	e3400001 	movt	r0, #1
    811c:	e5933010 	ldr	r3, [r3, #16]
    8120:	e12fff33 	blx	r3
    8124:	e5d53199 	ldrb	r3, [r5, #409]	; 0x199
    8128:	e3530002 	cmp	r3, #2
    812c:	1afffffc 	bne	8124 <kernelTaskRun(TTask*)+0x40>
    8130:	e3a01000 	mov	r1, #0
    8134:	e1a00004 	mov	r0, r4
    8138:	eb001fd4 	bl	10090 <startScheduler(TTask*, int)>
    813c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8140:	e1a00007 	mov	r0, r7
    8144:	e5933010 	ldr	r3, [r3, #16]
    8148:	e12fff33 	blx	r3
    814c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8150:	e1a00004 	mov	r0, r4
    8154:	e3001bb8 	movw	r1, #3000	; 0xbb8
    8158:	e5933000 	ldr	r3, [r3]
    815c:	e12fff33 	blx	r3
    8160:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8164:	e3001bb8 	movw	r1, #3000	; 0xbb8
    8168:	e1a00004 	mov	r0, r4
    816c:	e5933004 	ldr	r3, [r3, #4]
    8170:	e12fff33 	blx	r3
    8174:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8178:	e1a00006 	mov	r0, r6
    817c:	e5933010 	ldr	r3, [r3, #16]
    8180:	e12fff33 	blx	r3
    8184:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    8188:	e30504a4 	movw	r0, #21668	; 0x54a4
    818c:	e3400001 	movt	r0, #1
    8190:	e5933010 	ldr	r3, [r3, #16]
    8194:	e12fff33 	blx	r3
    8198:	eaffffe1 	b	8124 <kernelTaskRun(TTask*)+0x40>

0000819c <__static_initialization_and_destruction_0(int, int)>:
    819c:	e30f3fff 	movw	r3, #65535	; 0xffff
    81a0:	e1510003 	cmp	r1, r3
    81a4:	03500001 	cmpeq	r0, #1
    81a8:	0a000000 	beq	81b0 <__static_initialization_and_destruction_0(int, int)+0x14>
    81ac:	e12fff1e 	bx	lr
    81b0:	eaffffff 	b	81b4 <__static_initialization_and_destruction_0(int, int) [clone .part.0]>

000081b4 <__static_initialization_and_destruction_0(int, int) [clone .part.0]>:
    81b4:	e52d4008 	str	r4, [sp, #-8]!
    81b8:	e308407c 	movw	r4, #32892	; 0x807c
    81bc:	e3404001 	movt	r4, #1
    81c0:	e1a00004 	mov	r0, r4
    81c4:	e58de004 	str	lr, [sp, #4]
    81c8:	eb000072 	bl	8398 <CKernel::CKernel()>
    81cc:	e1a00004 	mov	r0, r4
    81d0:	e3092460 	movw	r2, #37984	; 0x9460
    81d4:	e3402001 	movt	r2, #1
    81d8:	e3081458 	movw	r1, #33880	; 0x8458
    81dc:	e3401000 	movt	r1, #0
    81e0:	e59d4000 	ldr	r4, [sp]
    81e4:	e59de004 	ldr	lr, [sp, #4]
    81e8:	e28dd008 	add	sp, sp, #8
    81ec:	ea0015d1 	b	d938 <__aeabi_atexit>

000081f0 <main>:
    81f0:	e308007c 	movw	r0, #32892	; 0x807c
    81f4:	e3400001 	movt	r0, #1
    81f8:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
    81fc:	e1cd60f8 	strd	r6, [sp, #8]
    8200:	e58de010 	str	lr, [sp, #16]
    8204:	e24ddf87 	sub	sp, sp, #540	; 0x21c
    8208:	eb0000b2 	bl	84d8 <CKernel::Initialize()>
    820c:	e3500000 	cmp	r0, #0
    8210:	1a000000 	bne	8218 <main+0x28>
    8214:	eb0015cf 	bl	d958 <halt>
    8218:	e30514c0 	movw	r1, #21696	; 0x54c0
    821c:	e3401001 	movt	r1, #1
    8220:	e308007c 	movw	r0, #32892	; 0x807c
    8224:	e3400001 	movt	r0, #1
    8228:	eb000109 	bl	8654 <CKernel::write_log(char const*, ...)>
    822c:	eb001f74 	bl	10004 <InitializeScheduler()>
    8230:	eb001f90 	bl	10078 <getSysCallPointer()>
    8234:	e1a04000 	mov	r4, r0
    8238:	e3083070 	movw	r3, #32880	; 0x8070
    823c:	e3403000 	movt	r3, #0
    8240:	e308209c 	movw	r2, #32924	; 0x809c
    8244:	e3402000 	movt	r2, #0
    8248:	e3081080 	movw	r1, #32896	; 0x8080
    824c:	e3401000 	movt	r1, #0
    8250:	e28d0008 	add	r0, sp, #8
    8254:	e5843010 	str	r3, [r4, #16]
    8258:	e30830e4 	movw	r3, #32996	; 0x80e4
    825c:	e3403000 	movt	r3, #0
    8260:	e5842014 	str	r2, [r4, #20]
    8264:	e30f2b30 	movw	r2, #64304	; 0xfb30
    8268:	e3402000 	movt	r2, #0
    826c:	e5841018 	str	r1, [r4, #24]
    8270:	e3a01000 	mov	r1, #0
    8274:	e58d4000 	str	r4, [sp]
    8278:	e308607c 	movw	r6, #32892	; 0x807c
    827c:	e3406001 	movt	r6, #1
    8280:	e3057518 	movw	r7, #21784	; 0x5518
    8284:	e3407001 	movt	r7, #1
    8288:	eb001e41 	bl	fb94 <initializeTask>
    828c:	e3a01001 	mov	r1, #1
    8290:	e28d008c 	add	r0, sp, #140	; 0x8c
    8294:	e58d4000 	str	r4, [sp]
    8298:	e3003194 	movw	r3, #404	; 0x194
    829c:	e3403001 	movt	r3, #1
    82a0:	e30f2b30 	movw	r2, #64304	; 0xfb30
    82a4:	e3402000 	movt	r2, #0
    82a8:	eb001e39 	bl	fb94 <initializeTask>
    82ac:	e28d0008 	add	r0, sp, #8
    82b0:	eb001fff 	bl	102b4 <AddTask(TTask*)>
    82b4:	e28d008c 	add	r0, sp, #140	; 0x8c
    82b8:	eb001ffd 	bl	102b4 <AddTask(TTask*)>
    82bc:	eb001ff6 	bl	1029c <genTaskID()>
    82c0:	e1a01000 	mov	r1, r0
    82c4:	e30f3c74 	movw	r3, #64628	; 0xfc74
    82c8:	e3403000 	movt	r3, #0
    82cc:	e28d0e11 	add	r0, sp, #272	; 0x110
    82d0:	e58d4000 	str	r4, [sp]
    82d4:	e30f2b30 	movw	r2, #64304	; 0xfb30
    82d8:	e3402000 	movt	r2, #0
    82dc:	eb001e2c 	bl	fb94 <initializeTask>
    82e0:	eb001fed 	bl	1029c <genTaskID()>
    82e4:	e1a01000 	mov	r1, r0
    82e8:	e30f3cf0 	movw	r3, #64752	; 0xfcf0
    82ec:	e3403000 	movt	r3, #0
    82f0:	e28d0f65 	add	r0, sp, #404	; 0x194
    82f4:	e58d4000 	str	r4, [sp]
    82f8:	e30f2b30 	movw	r2, #64304	; 0xfb30
    82fc:	e3402000 	movt	r2, #0
    8300:	eb001e23 	bl	fb94 <initializeTask>
    8304:	e3a0100a 	mov	r1, #10
    8308:	e3a03032 	mov	r3, #50	; 0x32
    830c:	e3a0c001 	mov	ip, #1
    8310:	e3a02050 	mov	r2, #80	; 0x50
    8314:	e28d0e11 	add	r0, sp, #272	; 0x110
    8318:	e3a04000 	mov	r4, #0
    831c:	e58dc034 	str	ip, [sp, #52]	; 0x34
    8320:	e58d10b8 	str	r1, [sp, #184]	; 0xb8
    8324:	e58d213c 	str	r2, [sp, #316]	; 0x13c
    8328:	e58d31c0 	str	r3, [sp, #448]	; 0x1c0
    832c:	eb001fe0 	bl	102b4 <AddTask(TTask*)>
    8330:	e28d0f65 	add	r0, sp, #404	; 0x194
    8334:	eb001fde 	bl	102b4 <AddTask(TTask*)>
    8338:	eb001f51 	bl	10084 <getScheduler()>
    833c:	e3a03002 	mov	r3, #2
    8340:	e30514fc 	movw	r1, #21756	; 0x54fc
    8344:	e3401001 	movt	r1, #1
    8348:	e2405004 	sub	r5, r0, #4
    834c:	e5c03199 	strb	r3, [r0, #409]	; 0x199
    8350:	e1a00006 	mov	r0, r6
    8354:	eb0000be 	bl	8654 <CKernel::write_log(char const*, ...)>
    8358:	e5b5c004 	ldr	ip, [r5, #4]!
    835c:	e35c0000 	cmp	ip, #0
    8360:	0a000006 	beq	8380 <main+0x190>
    8364:	e1a03004 	mov	r3, r4
    8368:	e1a01007 	mov	r1, r7
    836c:	e59c2000 	ldr	r2, [ip]
    8370:	e1a00006 	mov	r0, r6
    8374:	e59ce02c 	ldr	lr, [ip, #44]	; 0x2c
    8378:	e88d5000 	stm	sp, {ip, lr}
    837c:	eb0000b4 	bl	8654 <CKernel::write_log(char const*, ...)>
    8380:	e2844001 	add	r4, r4, #1
    8384:	e3540064 	cmp	r4, #100	; 0x64
    8388:	1afffff2 	bne	8358 <main+0x168>
    838c:	e28d0008 	add	r0, sp, #8
    8390:	ebffff53 	bl	80e4 <kernelTaskRun(TTask*)>

00008394 <_GLOBAL__sub_I__Z11kernelPrintPKc>:
    8394:	eaffff86 	b	81b4 <__static_initialization_and_destruction_0(int, int) [clone .part.0]>

00008398 <CKernel::CKernel()>:
    8398:	e3a01001 	mov	r1, #1
    839c:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
    83a0:	e1a04000 	mov	r4, r0
    83a4:	e1cd60f8 	strd	r6, [sp, #8]
    83a8:	e2807f66 	add	r7, r0, #408	; 0x198
    83ac:	e2805d4a 	add	r5, r0, #4736	; 0x1280
    83b0:	e58de010 	str	lr, [sp, #16]
    83b4:	e24dd00c 	sub	sp, sp, #12
    83b8:	e2806ea9 	add	r6, r0, #2704	; 0xa90
    83bc:	eb00229f 	bl	10e40 <CMemorySystem::CMemorySystem(bool)>
    83c0:	e1a00007 	mov	r0, r7
    83c4:	e2866004 	add	r6, r6, #4
    83c8:	eb00031e 	bl	9048 <CKernelOptions::CKernelOptions()>
    83cc:	e2840e9f 	add	r0, r4, #2544	; 0x9f0
    83d0:	e2855014 	add	r5, r5, #20
    83d4:	e2800004 	add	r0, r0, #4
    83d8:	eb00016d 	bl	8994 <CDeviceNameService::CDeviceNameService()>
    83dc:	e3a03000 	mov	r3, #0
    83e0:	e2840e9f 	add	r0, r4, #2544	; 0x9f0
    83e4:	e3a02b01 	mov	r2, #1024	; 0x400
    83e8:	e3a01c05 	mov	r1, #1280	; 0x500
    83ec:	e280000c 	add	r0, r0, #12
    83f0:	e58d3000 	str	r3, [sp]
    83f4:	eb0009d4 	bl	ab4c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>
    83f8:	e2840ea9 	add	r0, r4, #2704	; 0xa90
    83fc:	eb002182 	bl	10a0c <CExceptionHandler::CExceptionHandler()>
    8400:	e1a00006 	mov	r0, r6
    8404:	eb002476 	bl	115e4 <CInterruptSystem::CInterruptSystem()>
    8408:	e1a01006 	mov	r1, r6
    840c:	e1a00005 	mov	r0, r5
    8410:	eb0015ad 	bl	dacc <CTimer::CTimer(CInterruptSystem*)>
    8414:	e1a00007 	mov	r0, r7
    8418:	eb000416 	bl	9478 <CKernelOptions::GetLogLevel() const>
    841c:	e1a01000 	mov	r1, r0
    8420:	e2840d4b 	add	r0, r4, #4800	; 0x12c0
    8424:	e1a02005 	mov	r2, r5
    8428:	e3a03001 	mov	r3, #1
    842c:	e2800014 	add	r0, r0, #20
    8430:	eb000474 	bl	9608 <CLogger::CLogger(unsigned int, CTimer*, bool)>
    8434:	e1a00004 	mov	r0, r4
    8438:	e309344c 	movw	r3, #37964	; 0x944c
    843c:	e3403001 	movt	r3, #1
    8440:	e5834000 	str	r4, [r3]
    8444:	e28dd00c 	add	sp, sp, #12
    8448:	e1cd40d0 	ldrd	r4, [sp]
    844c:	e1cd60d8 	ldrd	r6, [sp, #8]
    8450:	e28dd010 	add	sp, sp, #16
    8454:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008458 <CKernel::~CKernel()>:
    8458:	e3a02000 	mov	r2, #0
    845c:	e309344c 	movw	r3, #37964	; 0x944c
    8460:	e3403001 	movt	r3, #1
    8464:	e52d4008 	str	r4, [sp, #-8]!
    8468:	e1a04000 	mov	r4, r0
    846c:	e2800d4b 	add	r0, r0, #4800	; 0x12c0
    8470:	e58de004 	str	lr, [sp, #4]
    8474:	e2800014 	add	r0, r0, #20
    8478:	e5832000 	str	r2, [r3]
    847c:	eb00047d 	bl	9678 <CLogger::~CLogger()>
    8480:	e2840d4a 	add	r0, r4, #4736	; 0x1280
    8484:	e2800014 	add	r0, r0, #20
    8488:	eb0015b6 	bl	db68 <CTimer::~CTimer()>
    848c:	e2840ea9 	add	r0, r4, #2704	; 0xa90
    8490:	e2800004 	add	r0, r0, #4
    8494:	eb00245d 	bl	11610 <CInterruptSystem::~CInterruptSystem()>
    8498:	e2840ea9 	add	r0, r4, #2704	; 0xa90
    849c:	eb002183 	bl	10ab0 <CExceptionHandler::~CExceptionHandler()>
    84a0:	e2840e9f 	add	r0, r4, #2544	; 0x9f0
    84a4:	e280000c 	add	r0, r0, #12
    84a8:	eb0009d4 	bl	ac00 <CScreenDevice::~CScreenDevice()>
    84ac:	e2840e9f 	add	r0, r4, #2544	; 0x9f0
    84b0:	e2800004 	add	r0, r0, #4
    84b4:	eb000147 	bl	89d8 <CDeviceNameService::~CDeviceNameService()>
    84b8:	e2840f66 	add	r0, r4, #408	; 0x198
    84bc:	eb0003e1 	bl	9448 <CKernelOptions::~CKernelOptions()>
    84c0:	e1a00004 	mov	r0, r4
    84c4:	eb0022c6 	bl	10fe4 <CMemorySystem::~CMemorySystem()>
    84c8:	e1a00004 	mov	r0, r4
    84cc:	e59d4000 	ldr	r4, [sp]
    84d0:	e28dd004 	add	sp, sp, #4
    84d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000084d8 <CKernel::Initialize()>:
    84d8:	e16d41f0 	strd	r4, [sp, #-16]!
    84dc:	e2805e9f 	add	r5, r0, #2544	; 0x9f0
    84e0:	e1a04000 	mov	r4, r0
    84e4:	e285500c 	add	r5, r5, #12
    84e8:	e58d6008 	str	r6, [sp, #8]
    84ec:	e1a00005 	mov	r0, r5
    84f0:	e58de00c 	str	lr, [sp, #12]
    84f4:	eb0009f1 	bl	acc0 <CScreenDevice::Initialize()>
    84f8:	e3500000 	cmp	r0, #0
    84fc:	1a000004 	bne	8514 <CKernel::Initialize()+0x3c>
    8500:	e1cd40d0 	ldrd	r4, [sp]
    8504:	e3a00000 	mov	r0, #0
    8508:	e59d6008 	ldr	r6, [sp, #8]
    850c:	e28dd00c 	add	sp, sp, #12
    8510:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8514:	e2840d4b 	add	r0, r4, #4800	; 0x12c0
    8518:	e1a01005 	mov	r1, r5
    851c:	e2800014 	add	r0, r0, #20
    8520:	eb000478 	bl	9708 <CLogger::Initialize(CDevice*)>
    8524:	e3500000 	cmp	r0, #0
    8528:	0afffff4 	beq	8500 <CKernel::Initialize()+0x28>
    852c:	e2840ea9 	add	r0, r4, #2704	; 0xa90
    8530:	e2800004 	add	r0, r0, #4
    8534:	eb00243e 	bl	11634 <CInterruptSystem::Initialize()>
    8538:	e3500000 	cmp	r0, #0
    853c:	0affffef 	beq	8500 <CKernel::Initialize()+0x28>
    8540:	e2840d4a 	add	r0, r4, #4736	; 0x1280
    8544:	e1cd40d0 	ldrd	r4, [sp]
    8548:	e2800014 	add	r0, r0, #20
    854c:	e59d6008 	ldr	r6, [sp, #8]
    8550:	e59de00c 	ldr	lr, [sp, #12]
    8554:	e28dd010 	add	sp, sp, #16
    8558:	ea00186a 	b	e708 <CTimer::Initialize()>

0000855c <CKernel::Run()>:
    855c:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    8560:	e3a02003 	mov	r2, #3
    8564:	e1a05000 	mov	r5, r0
    8568:	e1cd60f8 	strd	r6, [sp, #8]
    856c:	e2807d4b 	add	r7, r0, #4800	; 0x12c0
    8570:	e305354c 	movw	r3, #21836	; 0x554c
    8574:	e3403001 	movt	r3, #1
    8578:	e2877014 	add	r7, r7, #20
    857c:	e58d8010 	str	r8, [sp, #16]
    8580:	e1a00007 	mov	r0, r7
    8584:	e30515e0 	movw	r1, #21984	; 0x55e0
    8588:	e3401001 	movt	r1, #1
    858c:	e58de014 	str	lr, [sp, #20]
    8590:	e24dd008 	sub	sp, sp, #8
    8594:	eb000471 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8598:	e1a00007 	mov	r0, r7
    859c:	e3a02003 	mov	r2, #3
    85a0:	e3053570 	movw	r3, #21872	; 0x5570
    85a4:	e3403001 	movt	r3, #1
    85a8:	e30515e0 	movw	r1, #21984	; 0x55e0
    85ac:	e3401001 	movt	r1, #1
    85b0:	eb00046a 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    85b4:	e2855d4a 	add	r5, r5, #4736	; 0x1280
    85b8:	e3a03000 	mov	r3, #0
    85bc:	e2855014 	add	r5, r5, #20
    85c0:	e30015dc 	movw	r1, #1500	; 0x5dc
    85c4:	e1a00005 	mov	r0, r5
    85c8:	e30826f8 	movw	r2, #34552	; 0x86f8
    85cc:	e3402000 	movt	r2, #0
    85d0:	e58d3000 	str	r3, [sp]
    85d4:	e30585a4 	movw	r8, #21924	; 0x55a4
    85d8:	e3408001 	movt	r8, #1
    85dc:	e30565e0 	movw	r6, #21984	; 0x55e0
    85e0:	e3406001 	movt	r6, #1
    85e4:	eb0016e0 	bl	e16c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    85e8:	e1a00005 	mov	r0, r5
    85ec:	eb0015e7 	bl	dd90 <CTimer::GetTime() const>
    85f0:	e1a04000 	mov	r4, r0
    85f4:	e1a00005 	mov	r0, r5
    85f8:	eb0015e4 	bl	dd90 <CTimer::GetTime() const>
    85fc:	e1a03000 	mov	r3, r0
    8600:	e1a00005 	mov	r0, r5
    8604:	e1540003 	cmp	r4, r3
    8608:	0afffff9 	beq	85f4 <CKernel::Run()+0x98>
    860c:	eb0015df 	bl	dd90 <CTimer::GetTime() const>
    8610:	e1a04000 	mov	r4, r0
    8614:	e1a03008 	mov	r3, r8
    8618:	e3a02003 	mov	r2, #3
    861c:	e1a01006 	mov	r1, r6
    8620:	e1a00007 	mov	r0, r7
    8624:	e58d4000 	str	r4, [sp]
    8628:	eb00044c 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    862c:	eafffff0 	b	85f4 <CKernel::Run()+0x98>

00008630 <CKernel::addKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*)>:
    8630:	e3a0c000 	mov	ip, #0
    8634:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8638:	e24dd00c 	sub	sp, sp, #12
    863c:	e2800d4a 	add	r0, r0, #4736	; 0x1280
    8640:	e2800014 	add	r0, r0, #20
    8644:	e58dc000 	str	ip, [sp]
    8648:	eb0016c7 	bl	e16c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    864c:	e28dd00c 	add	sp, sp, #12
    8650:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008654 <CKernel::write_log(char const*, ...)>:
    8654:	e92d000e 	push	{r1, r2, r3}
    8658:	e2800d4b 	add	r0, r0, #4800	; 0x12c0
    865c:	e3a02003 	mov	r2, #3
    8660:	e2800014 	add	r0, r0, #20
    8664:	e30515e0 	movw	r1, #21984	; 0x55e0
    8668:	e3401001 	movt	r1, #1
    866c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    8670:	e24dd010 	sub	sp, sp, #16
    8674:	e59d3014 	ldr	r3, [sp, #20]
    8678:	e28dc018 	add	ip, sp, #24
    867c:	e58dc000 	str	ip, [sp]
    8680:	e58dc00c 	str	ip, [sp, #12]
    8684:	eb000441 	bl	9790 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    8688:	e28dd010 	add	sp, sp, #16
    868c:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    8690:	e28dd00c 	add	sp, sp, #12
    8694:	e12fff1e 	bx	lr

00008698 <CKernel::write_logV(char const*, std::__va_list)>:
    8698:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    869c:	e24dd00c 	sub	sp, sp, #12
    86a0:	e2800d4b 	add	r0, r0, #4800	; 0x12c0
    86a4:	e1a03001 	mov	r3, r1
    86a8:	e2800014 	add	r0, r0, #20
    86ac:	e30515e0 	movw	r1, #21984	; 0x55e0
    86b0:	e3401001 	movt	r1, #1
    86b4:	e58d2000 	str	r2, [sp]
    86b8:	e3a02003 	mov	r2, #3
    86bc:	eb000433 	bl	9790 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    86c0:	e28dd00c 	add	sp, sp, #12
    86c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000086c8 <CKernel::set_timer(unsigned int)>:
    86c8:	e3a0c000 	mov	ip, #0
    86cc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    86d0:	e24dd00c 	sub	sp, sp, #12
    86d4:	e1a03000 	mov	r3, r0
    86d8:	e2800d4a 	add	r0, r0, #4736	; 0x1280
    86dc:	e30826f8 	movw	r2, #34552	; 0x86f8
    86e0:	e3402000 	movt	r2, #0
    86e4:	e58dc000 	str	ip, [sp]
    86e8:	e2800014 	add	r0, r0, #20
    86ec:	eb00169e 	bl	e16c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>
    86f0:	e28dd00c 	add	sp, sp, #12
    86f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000086f8 <CKernel::TimerHandler(unsigned int, void*, void*)>:
    86f8:	e2510000 	subs	r0, r1, #0
    86fc:	0a000002 	beq	870c <CKernel::TimerHandler(unsigned int, void*, void*)+0x14>
    8700:	e30515c8 	movw	r1, #21960	; 0x55c8
    8704:	e3401001 	movt	r1, #1
    8708:	eaffffd1 	b	8654 <CKernel::write_log(char const*, ...)>
    870c:	e30515b0 	movw	r1, #21936	; 0x55b0
    8710:	e3401001 	movt	r1, #1
    8714:	e52d4008 	str	r4, [sp, #-8]!
    8718:	e30505bc 	movw	r0, #21948	; 0x55bc
    871c:	e3400001 	movt	r0, #1
    8720:	e58de004 	str	lr, [sp, #4]
    8724:	e3a02096 	mov	r2, #150	; 0x96
    8728:	ebffffff 	bl	872c <assertion_failed>

0000872c <assertion_failed>:
    872c:	e1a04000 	mov	r4, r0
    8730:	e1a05001 	mov	r5, r1
    8734:	e52d7008 	str	r7, [sp, #-8]!
    8738:	e1a06002 	mov	r6, r2
    873c:	e58de004 	str	lr, [sp, #4]
    8740:	e24dd018 	sub	sp, sp, #24
    8744:	e1a0700d 	mov	r7, sp
    8748:	eb0024cf 	bl	11a8c <CInterruptSystem::DisableFIQ()>
    874c:	f1080040 	cpsie	f
    8750:	e28d0008 	add	r0, sp, #8
    8754:	eb000ea3 	bl	c1e8 <CString::CString()>
    8758:	e1a02005 	mov	r2, r5
    875c:	e1a03006 	mov	r3, r6
    8760:	e28d0008 	add	r0, sp, #8
    8764:	e30515e8 	movw	r1, #21992	; 0x55e8
    8768:	e3401001 	movt	r1, #1
    876c:	eb000fe7 	bl	c710 <CString::Format(char const*, ...)>
    8770:	e28d0008 	add	r0, sp, #8
    8774:	eb000eff 	bl	c378 <CString::operator char const*() const>
    8778:	e1a01000 	mov	r1, r0
    877c:	e1a00007 	mov	r0, r7
    8780:	eb000059 	bl	88ec <debug_stacktrace(unsigned int const*, char const*)>
    8784:	eb0004bd 	bl	9a80 <CLogger::Get()>
    8788:	e1a05000 	mov	r5, r0
    878c:	e28d0008 	add	r0, sp, #8
    8790:	eb000ef8 	bl	c378 <CString::operator char const*() const>
    8794:	e1a01000 	mov	r1, r0
    8798:	e30535f0 	movw	r3, #22000	; 0x55f0
    879c:	e3403001 	movt	r3, #1
    87a0:	e1a00005 	mov	r0, r5
    87a4:	e58d4000 	str	r4, [sp]
    87a8:	e3a02000 	mov	r2, #0
    87ac:	eb0003eb 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    87b0:	eafffffe 	b	87b0 <assertion_failed+0x84>

000087b4 <debug_hexdump(void const*, unsigned int, char const*)>:
    87b4:	e3520000 	cmp	r2, #0
    87b8:	e305369c 	movw	r3, #22172	; 0x569c
    87bc:	e3403001 	movt	r3, #1
    87c0:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    87c4:	e1a05001 	mov	r5, r1
    87c8:	e1a04000 	mov	r4, r0
    87cc:	e1cd60f8 	strd	r6, [sp, #8]
    87d0:	11a06002 	movne	r6, r2
    87d4:	e1cd81f0 	strd	r8, [sp, #16]
    87d8:	01a06003 	moveq	r6, r3
    87dc:	e58da018 	str	sl, [sp, #24]
    87e0:	e58de01c 	str	lr, [sp, #28]
    87e4:	e24dd048 	sub	sp, sp, #72	; 0x48
    87e8:	eb0004a4 	bl	9a80 <CLogger::Get()>
    87ec:	e1a01006 	mov	r1, r6
    87f0:	e3053608 	movw	r3, #22024	; 0x5608
    87f4:	e3403001 	movt	r3, #1
    87f8:	e3a02004 	mov	r2, #4
    87fc:	e58d5000 	str	r5, [sp]
    8800:	e58d4004 	str	r4, [sp, #4]
    8804:	eb0003d5 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8808:	e3550000 	cmp	r5, #0
    880c:	0a00002f 	beq	88d0 <debug_hexdump(void const*, unsigned int, char const*)+0x11c>
    8810:	e3057630 	movw	r7, #22064	; 0x5630
    8814:	e3407001 	movt	r7, #1
    8818:	e205800f 	and	r8, r5, #15
    881c:	ea000001 	b	8828 <debug_hexdump(void const*, unsigned int, char const*)+0x74>
    8820:	e2555010 	subs	r5, r5, #16
    8824:	0a000029 	beq	88d0 <debug_hexdump(void const*, unsigned int, char const*)+0x11c>
    8828:	eb000494 	bl	9a80 <CLogger::Get()>
    882c:	e5d4e00f 	ldrb	lr, [r4, #15]
    8830:	e6ffc074 	uxth	ip, r4
    8834:	e1a03007 	mov	r3, r7
    8838:	e3a02004 	mov	r2, #4
    883c:	e1a01006 	mov	r1, r6
    8840:	e5d4a00e 	ldrb	sl, [r4, #14]
    8844:	e2844010 	add	r4, r4, #16
    8848:	e5549003 	ldrb	r9, [r4, #-3]
    884c:	e58de040 	str	lr, [sp, #64]	; 0x40
    8850:	e554e004 	ldrb	lr, [r4, #-4]
    8854:	e58da03c 	str	sl, [sp, #60]	; 0x3c
    8858:	e554a005 	ldrb	sl, [r4, #-5]
    885c:	e58d9038 	str	r9, [sp, #56]	; 0x38
    8860:	e5549006 	ldrb	r9, [r4, #-6]
    8864:	e58de034 	str	lr, [sp, #52]	; 0x34
    8868:	e554e007 	ldrb	lr, [r4, #-7]
    886c:	e58da030 	str	sl, [sp, #48]	; 0x30
    8870:	e554a008 	ldrb	sl, [r4, #-8]
    8874:	e58d902c 	str	r9, [sp, #44]	; 0x2c
    8878:	e5549009 	ldrb	r9, [r4, #-9]
    887c:	e58de028 	str	lr, [sp, #40]	; 0x28
    8880:	e554e00a 	ldrb	lr, [r4, #-10]
    8884:	e58da024 	str	sl, [sp, #36]	; 0x24
    8888:	e554a00b 	ldrb	sl, [r4, #-11]
    888c:	e58d9020 	str	r9, [sp, #32]
    8890:	e554900c 	ldrb	r9, [r4, #-12]
    8894:	e58de01c 	str	lr, [sp, #28]
    8898:	e554e00d 	ldrb	lr, [r4, #-13]
    889c:	e58da018 	str	sl, [sp, #24]
    88a0:	e554a00e 	ldrb	sl, [r4, #-14]
    88a4:	e58d9014 	str	r9, [sp, #20]
    88a8:	e554900f 	ldrb	r9, [r4, #-15]
    88ac:	e58de010 	str	lr, [sp, #16]
    88b0:	e554e010 	ldrb	lr, [r4, #-16]
    88b4:	e58da00c 	str	sl, [sp, #12]
    88b8:	e58de004 	str	lr, [sp, #4]
    88bc:	e58d9008 	str	r9, [sp, #8]
    88c0:	e58dc000 	str	ip, [sp]
    88c4:	eb0003a5 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    88c8:	e1580005 	cmp	r8, r5
    88cc:	1affffd3 	bne	8820 <debug_hexdump(void const*, unsigned int, char const*)+0x6c>
    88d0:	e28dd048 	add	sp, sp, #72	; 0x48
    88d4:	e1cd40d0 	ldrd	r4, [sp]
    88d8:	e1cd60d8 	ldrd	r6, [sp, #8]
    88dc:	e1cd81d0 	ldrd	r8, [sp, #16]
    88e0:	e59da018 	ldr	sl, [sp, #24]
    88e4:	e28dd01c 	add	sp, sp, #28
    88e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000088ec <debug_stacktrace(unsigned int const*, char const*)>:
    88ec:	e3510000 	cmp	r1, #0
    88f0:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    88f4:	e2405004 	sub	r5, r0, #4
    88f8:	e3a04000 	mov	r4, #0
    88fc:	e1cd60f8 	strd	r6, [sp, #8]
    8900:	e305769c 	movw	r7, #22172	; 0x569c
    8904:	e3407001 	movt	r7, #1
    8908:	e3056400 	movw	r6, #21504	; 0x5400
    890c:	e3406001 	movt	r6, #1
    8910:	11a07001 	movne	r7, r1
    8914:	e58d8010 	str	r8, [sp, #16]
    8918:	e3058688 	movw	r8, #22152	; 0x5688
    891c:	e3408001 	movt	r8, #1
    8920:	e58de014 	str	lr, [sp, #20]
    8924:	e24dd008 	sub	sp, sp, #8
    8928:	ea000002 	b	8938 <debug_stacktrace(unsigned int const*, char const*)+0x4c>
    892c:	e2844001 	add	r4, r4, #1
    8930:	e3540040 	cmp	r4, #64	; 0x40
    8934:	0a000010 	beq	897c <debug_stacktrace(unsigned int const*, char const*)+0x90>
    8938:	e5b53004 	ldr	r3, [r5, #4]!
    893c:	e3530902 	cmp	r3, #32768	; 0x8000
    8940:	3afffff9 	bcc	892c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    8944:	e1530006 	cmp	r3, r6
    8948:	2afffff7 	bcs	892c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    894c:	e3130003 	tst	r3, #3
    8950:	1afffff5 	bne	892c <debug_stacktrace(unsigned int const*, char const*)+0x40>
    8954:	eb000449 	bl	9a80 <CLogger::Get()>
    8958:	e595c000 	ldr	ip, [r5]
    895c:	e1a03008 	mov	r3, r8
    8960:	e3a02004 	mov	r2, #4
    8964:	e1a01007 	mov	r1, r7
    8968:	e88d1010 	stm	sp, {r4, ip}
    896c:	e2844001 	add	r4, r4, #1
    8970:	eb00037a 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    8974:	e3540040 	cmp	r4, #64	; 0x40
    8978:	1affffee 	bne	8938 <debug_stacktrace(unsigned int const*, char const*)+0x4c>
    897c:	e28dd008 	add	sp, sp, #8
    8980:	e1cd40d0 	ldrd	r4, [sp]
    8984:	e1cd60d8 	ldrd	r6, [sp, #8]
    8988:	e59d8010 	ldr	r8, [sp, #16]
    898c:	e28dd014 	add	sp, sp, #20
    8990:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008994 <CDeviceNameService::CDeviceNameService()>:
    8994:	e3092450 	movw	r2, #37968	; 0x9450
    8998:	e3402001 	movt	r2, #1
    899c:	e592c000 	ldr	ip, [r2]
    89a0:	e3a01000 	mov	r1, #0
    89a4:	e5801000 	str	r1, [r0]
    89a8:	e5801004 	str	r1, [r0, #4]
    89ac:	e15c0001 	cmp	ip, r1
    89b0:	1a000001 	bne	89bc <CDeviceNameService::CDeviceNameService()+0x28>
    89b4:	e5820000 	str	r0, [r2]
    89b8:	e12fff1e 	bx	lr
    89bc:	e30516a4 	movw	r1, #22180	; 0x56a4
    89c0:	e3401001 	movt	r1, #1
    89c4:	e52d4008 	str	r4, [sp, #-8]!
    89c8:	e2810018 	add	r0, r1, #24
    89cc:	e3a0201f 	mov	r2, #31
    89d0:	e58de004 	str	lr, [sp, #4]
    89d4:	ebffff54 	bl	872c <assertion_failed>

000089d8 <CDeviceNameService::~CDeviceNameService()>:
    89d8:	e16d41f0 	strd	r4, [sp, #-16]!
    89dc:	e1a05000 	mov	r5, r0
    89e0:	e5904000 	ldr	r4, [r0]
    89e4:	e58d6008 	str	r6, [sp, #8]
    89e8:	e58de00c 	str	lr, [sp, #12]
    89ec:	e3540000 	cmp	r4, #0
    89f0:	0a00000a 	beq	8a20 <CDeviceNameService::~CDeviceNameService()+0x48>
    89f4:	e5940004 	ldr	r0, [r4, #4]
    89f8:	e5944000 	ldr	r4, [r4]
    89fc:	e3500000 	cmp	r0, #0
    8a00:	0a000000 	beq	8a08 <CDeviceNameService::~CDeviceNameService()+0x30>
    8a04:	eb001b36 	bl	f6e4 <operator delete[](void*)>
    8a08:	e3a01010 	mov	r1, #16
    8a0c:	e5950000 	ldr	r0, [r5]
    8a10:	eb001b3d 	bl	f70c <operator delete(void*, unsigned int)>
    8a14:	e3540000 	cmp	r4, #0
    8a18:	e5854000 	str	r4, [r5]
    8a1c:	1afffff4 	bne	89f4 <CDeviceNameService::~CDeviceNameService()+0x1c>
    8a20:	e3093450 	movw	r3, #37968	; 0x9450
    8a24:	e3403001 	movt	r3, #1
    8a28:	e59d6008 	ldr	r6, [sp, #8]
    8a2c:	e3a02000 	mov	r2, #0
    8a30:	e1a00005 	mov	r0, r5
    8a34:	e1cd40d0 	ldrd	r4, [sp]
    8a38:	e28dd00c 	add	sp, sp, #12
    8a3c:	e5832000 	str	r2, [r3]
    8a40:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008a44 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>:
    8a44:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    8a48:	e1a05000 	mov	r5, r0
    8a4c:	e5900004 	ldr	r0, [r0, #4]
    8a50:	e1cd60f8 	strd	r6, [sp, #8]
    8a54:	e1a06001 	mov	r6, r1
    8a58:	e1a07002 	mov	r7, r2
    8a5c:	e58d8010 	str	r8, [sp, #16]
    8a60:	e1a08003 	mov	r8, r3
    8a64:	e58de014 	str	lr, [sp, #20]
    8a68:	e3500000 	cmp	r0, #0
    8a6c:	1a00001a 	bne	8adc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x98>
    8a70:	e3a00010 	mov	r0, #16
    8a74:	eb001b09 	bl	f6a0 <operator new(unsigned int)>
    8a78:	e3560000 	cmp	r6, #0
    8a7c:	e1a04000 	mov	r4, r0
    8a80:	0a00001d 	beq	8afc <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xb8>
    8a84:	e1a00006 	mov	r0, r6
    8a88:	eb001844 	bl	eba0 <strlen>
    8a8c:	e2800001 	add	r0, r0, #1
    8a90:	eb001b08 	bl	f6b8 <operator new[](unsigned int)>
    8a94:	e1a01006 	mov	r1, r6
    8a98:	e5840004 	str	r0, [r4, #4]
    8a9c:	eb0018e7 	bl	ee40 <strcpy>
    8aa0:	e3570000 	cmp	r7, #0
    8aa4:	0a000019 	beq	8b10 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xcc>
    8aa8:	e5953000 	ldr	r3, [r5]
    8aac:	e5854000 	str	r4, [r5]
    8ab0:	e5952004 	ldr	r2, [r5, #4]
    8ab4:	e5843000 	str	r3, [r4]
    8ab8:	e5847008 	str	r7, [r4, #8]
    8abc:	e3520000 	cmp	r2, #0
    8ac0:	e5c4800c 	strb	r8, [r4, #12]
    8ac4:	1a000006 	bne	8ae4 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0xa0>
    8ac8:	e1cd40d0 	ldrd	r4, [sp]
    8acc:	e1cd60d8 	ldrd	r6, [sp, #8]
    8ad0:	e59d8010 	ldr	r8, [sp, #16]
    8ad4:	e28dd014 	add	sp, sp, #20
    8ad8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8adc:	eb002271 	bl	114a8 <EnterCritical>
    8ae0:	eaffffe2 	b	8a70 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)+0x2c>
    8ae4:	e1cd40d0 	ldrd	r4, [sp]
    8ae8:	e1cd60d8 	ldrd	r6, [sp, #8]
    8aec:	e59d8010 	ldr	r8, [sp, #16]
    8af0:	e59de014 	ldr	lr, [sp, #20]
    8af4:	e28dd018 	add	sp, sp, #24
    8af8:	ea002298 	b	11560 <LeaveCritical>
    8afc:	e30516a4 	movw	r1, #22180	; 0x56a4
    8b00:	e3401001 	movt	r1, #1
    8b04:	e2810024 	add	r0, r1, #36	; 0x24
    8b08:	e3a0203b 	mov	r2, #59	; 0x3b
    8b0c:	ebffff06 	bl	872c <assertion_failed>
    8b10:	e30516a4 	movw	r1, #22180	; 0x56a4
    8b14:	e3401001 	movt	r1, #1
    8b18:	e2810030 	add	r0, r1, #48	; 0x30
    8b1c:	e3a02040 	mov	r2, #64	; 0x40
    8b20:	ebffff01 	bl	872c <assertion_failed>

00008b24 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>:
    8b24:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    8b28:	e1a04000 	mov	r4, r0
    8b2c:	e1a05003 	mov	r5, r3
    8b30:	e1cd60f8 	strd	r6, [sp, #8]
    8b34:	e1a06001 	mov	r6, r1
    8b38:	e1a07002 	mov	r7, r2
    8b3c:	e58d8010 	str	r8, [sp, #16]
    8b40:	e58de014 	str	lr, [sp, #20]
    8b44:	e24dd010 	sub	sp, sp, #16
    8b48:	e5dd8028 	ldrb	r8, [sp, #40]	; 0x28
    8b4c:	e1a0000d 	mov	r0, sp
    8b50:	eb000da4 	bl	c1e8 <CString::CString()>
    8b54:	e1a03007 	mov	r3, r7
    8b58:	e1a02006 	mov	r2, r6
    8b5c:	e59f1040 	ldr	r1, [pc, #64]	; 8ba4 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)+0x80>
    8b60:	e1a0000d 	mov	r0, sp
    8b64:	eb000ee9 	bl	c710 <CString::Format(char const*, ...)>
    8b68:	e1a0000d 	mov	r0, sp
    8b6c:	eb000e01 	bl	c378 <CString::operator char const*() const>
    8b70:	e1a01000 	mov	r1, r0
    8b74:	e1a03008 	mov	r3, r8
    8b78:	e1a02005 	mov	r2, r5
    8b7c:	e1a00004 	mov	r0, r4
    8b80:	ebffffaf 	bl	8a44 <CDeviceNameService::AddDevice(char const*, CDevice*, bool)>
    8b84:	e1a0000d 	mov	r0, sp
    8b88:	eb000ddb 	bl	c2fc <CString::~CString()>
    8b8c:	e28dd010 	add	sp, sp, #16
    8b90:	e1cd40d0 	ldrd	r4, [sp]
    8b94:	e1cd60d8 	ldrd	r6, [sp, #8]
    8b98:	e59d8010 	ldr	r8, [sp, #16]
    8b9c:	e28dd014 	add	sp, sp, #20
    8ba0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8ba4:	000156e4 	.word	0x000156e4

00008ba8 <CDeviceNameService::RemoveDevice(char const*, bool)>:
    8ba8:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    8bac:	e2515000 	subs	r5, r1, #0
    8bb0:	e1cd60f8 	strd	r6, [sp, #8]
    8bb4:	e58d8010 	str	r8, [sp, #16]
    8bb8:	e58de014 	str	lr, [sp, #20]
    8bbc:	0a000040 	beq	8cc4 <CDeviceNameService::RemoveDevice(char const*, bool)+0x11c>
    8bc0:	e1a08000 	mov	r8, r0
    8bc4:	e5900004 	ldr	r0, [r0, #4]
    8bc8:	e1a07002 	mov	r7, r2
    8bcc:	e3500000 	cmp	r0, #0
    8bd0:	1a000018 	bne	8c38 <CDeviceNameService::RemoveDevice(char const*, bool)+0x90>
    8bd4:	e5984000 	ldr	r4, [r8]
    8bd8:	e3540000 	cmp	r4, #0
    8bdc:	0a00003f 	beq	8ce0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x138>
    8be0:	e3a06000 	mov	r6, #0
    8be4:	ea00000b 	b	8c18 <CDeviceNameService::RemoveDevice(char const*, bool)+0x70>
    8be8:	e1a00005 	mov	r0, r5
    8bec:	eb0017f5 	bl	ebc8 <strcmp>
    8bf0:	e3500000 	cmp	r0, #0
    8bf4:	1a000002 	bne	8c04 <CDeviceNameService::RemoveDevice(char const*, bool)+0x5c>
    8bf8:	e5d4300c 	ldrb	r3, [r4, #12]
    8bfc:	e1530007 	cmp	r3, r7
    8c00:	0a000019 	beq	8c6c <CDeviceNameService::RemoveDevice(char const*, bool)+0xc4>
    8c04:	e5943000 	ldr	r3, [r4]
    8c08:	e1a06004 	mov	r6, r4
    8c0c:	e3530000 	cmp	r3, #0
    8c10:	0a00000c 	beq	8c48 <CDeviceNameService::RemoveDevice(char const*, bool)+0xa0>
    8c14:	e1a04003 	mov	r4, r3
    8c18:	e5941004 	ldr	r1, [r4, #4]
    8c1c:	e3510000 	cmp	r1, #0
    8c20:	1afffff0 	bne	8be8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x40>
    8c24:	e30516a4 	movw	r1, #22180	; 0x56a4
    8c28:	e3401001 	movt	r1, #1
    8c2c:	e2810048 	add	r0, r1, #72	; 0x48
    8c30:	e3a0205e 	mov	r2, #94	; 0x5e
    8c34:	ebfffebc 	bl	872c <assertion_failed>
    8c38:	eb00221a 	bl	114a8 <EnterCritical>
    8c3c:	e5984000 	ldr	r4, [r8]
    8c40:	e3540000 	cmp	r4, #0
    8c44:	1affffe5 	bne	8be0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x38>
    8c48:	e5983004 	ldr	r3, [r8, #4]
    8c4c:	e3530000 	cmp	r3, #0
    8c50:	0a000022 	beq	8ce0 <CDeviceNameService::RemoveDevice(char const*, bool)+0x138>
    8c54:	e1cd40d0 	ldrd	r4, [sp]
    8c58:	e1cd60d8 	ldrd	r6, [sp, #8]
    8c5c:	e59d8010 	ldr	r8, [sp, #16]
    8c60:	e59de014 	ldr	lr, [sp, #20]
    8c64:	e28dd018 	add	sp, sp, #24
    8c68:	ea00223c 	b	11560 <LeaveCritical>
    8c6c:	e3560000 	cmp	r6, #0
    8c70:	0a000010 	beq	8cb8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x110>
    8c74:	e5943000 	ldr	r3, [r4]
    8c78:	e5863000 	str	r3, [r6]
    8c7c:	e5983004 	ldr	r3, [r8, #4]
    8c80:	e3530000 	cmp	r3, #0
    8c84:	1a000013 	bne	8cd8 <CDeviceNameService::RemoveDevice(char const*, bool)+0x130>
    8c88:	e5940004 	ldr	r0, [r4, #4]
    8c8c:	e3500000 	cmp	r0, #0
    8c90:	0a000000 	beq	8c98 <CDeviceNameService::RemoveDevice(char const*, bool)+0xf0>
    8c94:	eb001a92 	bl	f6e4 <operator delete[](void*)>
    8c98:	e1a00004 	mov	r0, r4
    8c9c:	e3a01010 	mov	r1, #16
    8ca0:	e1cd40d0 	ldrd	r4, [sp]
    8ca4:	e1cd60d8 	ldrd	r6, [sp, #8]
    8ca8:	e59d8010 	ldr	r8, [sp, #16]
    8cac:	e59de014 	ldr	lr, [sp, #20]
    8cb0:	e28dd018 	add	sp, sp, #24
    8cb4:	ea001a94 	b	f70c <operator delete(void*, unsigned int)>
    8cb8:	e5943000 	ldr	r3, [r4]
    8cbc:	e5883000 	str	r3, [r8]
    8cc0:	eaffffed 	b	8c7c <CDeviceNameService::RemoveDevice(char const*, bool)+0xd4>
    8cc4:	e30516a4 	movw	r1, #22180	; 0x56a4
    8cc8:	e3401001 	movt	r1, #1
    8ccc:	e2810024 	add	r0, r1, #36	; 0x24
    8cd0:	e3a02056 	mov	r2, #86	; 0x56
    8cd4:	ebfffe94 	bl	872c <assertion_failed>
    8cd8:	eb002220 	bl	11560 <LeaveCritical>
    8cdc:	eaffffe9 	b	8c88 <CDeviceNameService::RemoveDevice(char const*, bool)+0xe0>
    8ce0:	e1cd40d0 	ldrd	r4, [sp]
    8ce4:	e1cd60d8 	ldrd	r6, [sp, #8]
    8ce8:	e59d8010 	ldr	r8, [sp, #16]
    8cec:	e28dd014 	add	sp, sp, #20
    8cf0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00008cf4 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)>:
    8cf4:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
    8cf8:	e1a04000 	mov	r4, r0
    8cfc:	e1a05003 	mov	r5, r3
    8d00:	e1cd60f8 	strd	r6, [sp, #8]
    8d04:	e1a06001 	mov	r6, r1
    8d08:	e1a07002 	mov	r7, r2
    8d0c:	e58de010 	str	lr, [sp, #16]
    8d10:	e24dd014 	sub	sp, sp, #20
    8d14:	e1a0000d 	mov	r0, sp
    8d18:	eb000d32 	bl	c1e8 <CString::CString()>
    8d1c:	e1a03007 	mov	r3, r7
    8d20:	e1a02006 	mov	r2, r6
    8d24:	e59f1038 	ldr	r1, [pc, #56]	; 8d64 <CDeviceNameService::RemoveDevice(char const*, unsigned int, bool)+0x70>
    8d28:	e1a0000d 	mov	r0, sp
    8d2c:	eb000e77 	bl	c710 <CString::Format(char const*, ...)>
    8d30:	e1a0000d 	mov	r0, sp
    8d34:	eb000d8f 	bl	c378 <CString::operator char const*() const>
    8d38:	e1a01000 	mov	r1, r0
    8d3c:	e1a02005 	mov	r2, r5
    8d40:	e1a00004 	mov	r0, r4
    8d44:	ebffff97 	bl	8ba8 <CDeviceNameService::RemoveDevice(char const*, bool)>
    8d48:	e1a0000d 	mov	r0, sp
    8d4c:	eb000d6a 	bl	c2fc <CString::~CString()>
    8d50:	e28dd014 	add	sp, sp, #20
    8d54:	e1cd40d0 	ldrd	r4, [sp]
    8d58:	e1cd60d8 	ldrd	r6, [sp, #8]
    8d5c:	e28dd010 	add	sp, sp, #16
    8d60:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8d64:	000156e4 	.word	0x000156e4

00008d68 <CDeviceNameService::GetDevice(char const*, bool)>:
    8d68:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
    8d6c:	e2515000 	subs	r5, r1, #0
    8d70:	e1cd60f8 	strd	r6, [sp, #8]
    8d74:	e58de010 	str	lr, [sp, #16]
    8d78:	e24dd00c 	sub	sp, sp, #12
    8d7c:	0a000028 	beq	8e24 <CDeviceNameService::GetDevice(char const*, bool)+0xbc>
    8d80:	e1a07000 	mov	r7, r0
    8d84:	e5900004 	ldr	r0, [r0, #4]
    8d88:	e1a06002 	mov	r6, r2
    8d8c:	e3500000 	cmp	r0, #0
    8d90:	1a000015 	bne	8dec <CDeviceNameService::GetDevice(char const*, bool)+0x84>
    8d94:	e5974000 	ldr	r4, [r7]
    8d98:	e3540000 	cmp	r4, #0
    8d9c:	1a00000a 	bne	8dcc <CDeviceNameService::GetDevice(char const*, bool)+0x64>
    8da0:	ea000019 	b	8e0c <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    8da4:	e1a00005 	mov	r0, r5
    8da8:	eb001786 	bl	ebc8 <strcmp>
    8dac:	e3500000 	cmp	r0, #0
    8db0:	1a000002 	bne	8dc0 <CDeviceNameService::GetDevice(char const*, bool)+0x58>
    8db4:	e5d4300c 	ldrb	r3, [r4, #12]
    8db8:	e1530006 	cmp	r3, r6
    8dbc:	0a00001d 	beq	8e38 <CDeviceNameService::GetDevice(char const*, bool)+0xd0>
    8dc0:	e5944000 	ldr	r4, [r4]
    8dc4:	e3540000 	cmp	r4, #0
    8dc8:	0a00000b 	beq	8dfc <CDeviceNameService::GetDevice(char const*, bool)+0x94>
    8dcc:	e5941004 	ldr	r1, [r4, #4]
    8dd0:	e3510000 	cmp	r1, #0
    8dd4:	1afffff2 	bne	8da4 <CDeviceNameService::GetDevice(char const*, bool)+0x3c>
    8dd8:	e30516a4 	movw	r1, #22180	; 0x56a4
    8ddc:	e3401001 	movt	r1, #1
    8de0:	e2810048 	add	r0, r1, #72	; 0x48
    8de4:	e3a02092 	mov	r2, #146	; 0x92
    8de8:	ebfffe4f 	bl	872c <assertion_failed>
    8dec:	eb0021ad 	bl	114a8 <EnterCritical>
    8df0:	e5974000 	ldr	r4, [r7]
    8df4:	e3540000 	cmp	r4, #0
    8df8:	1afffff3 	bne	8dcc <CDeviceNameService::GetDevice(char const*, bool)+0x64>
    8dfc:	e5973004 	ldr	r3, [r7, #4]
    8e00:	e3530000 	cmp	r3, #0
    8e04:	0a000000 	beq	8e0c <CDeviceNameService::GetDevice(char const*, bool)+0xa4>
    8e08:	eb0021d4 	bl	11560 <LeaveCritical>
    8e0c:	e3a00000 	mov	r0, #0
    8e10:	e28dd00c 	add	sp, sp, #12
    8e14:	e1cd40d0 	ldrd	r4, [sp]
    8e18:	e1cd60d8 	ldrd	r6, [sp, #8]
    8e1c:	e28dd010 	add	sp, sp, #16
    8e20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8e24:	e30516a4 	movw	r1, #22180	; 0x56a4
    8e28:	e3401001 	movt	r1, #1
    8e2c:	e2810024 	add	r0, r1, #36	; 0x24
    8e30:	e3a0208b 	mov	r2, #139	; 0x8b
    8e34:	ebfffe3c 	bl	872c <assertion_failed>
    8e38:	e5973004 	ldr	r3, [r7, #4]
    8e3c:	e5940008 	ldr	r0, [r4, #8]
    8e40:	e3530000 	cmp	r3, #0
    8e44:	1a000006 	bne	8e64 <CDeviceNameService::GetDevice(char const*, bool)+0xfc>
    8e48:	e3500000 	cmp	r0, #0
    8e4c:	1affffef 	bne	8e10 <CDeviceNameService::GetDevice(char const*, bool)+0xa8>
    8e50:	e30516a4 	movw	r1, #22180	; 0x56a4
    8e54:	e3401001 	movt	r1, #1
    8e58:	e281005c 	add	r0, r1, #92	; 0x5c
    8e5c:	e3a0209a 	mov	r2, #154	; 0x9a
    8e60:	ebfffe31 	bl	872c <assertion_failed>
    8e64:	e58d0004 	str	r0, [sp, #4]
    8e68:	eb0021bc 	bl	11560 <LeaveCritical>
    8e6c:	e59d0004 	ldr	r0, [sp, #4]
    8e70:	eafffff4 	b	8e48 <CDeviceNameService::GetDevice(char const*, bool)+0xe0>

00008e74 <CDeviceNameService::GetDevice(char const*, unsigned int, bool)>:
    8e74:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
    8e78:	e1a04000 	mov	r4, r0
    8e7c:	e1a05003 	mov	r5, r3
    8e80:	e1cd60f8 	strd	r6, [sp, #8]
    8e84:	e1a06001 	mov	r6, r1
    8e88:	e1a07002 	mov	r7, r2
    8e8c:	e58de010 	str	lr, [sp, #16]
    8e90:	e24dd014 	sub	sp, sp, #20
    8e94:	e1a0000d 	mov	r0, sp
    8e98:	eb000cd2 	bl	c1e8 <CString::CString()>
    8e9c:	e1a03007 	mov	r3, r7
    8ea0:	e1a02006 	mov	r2, r6
    8ea4:	e59f1040 	ldr	r1, [pc, #64]	; 8eec <CDeviceNameService::GetDevice(char const*, unsigned int, bool)+0x78>
    8ea8:	e1a0000d 	mov	r0, sp
    8eac:	eb000e17 	bl	c710 <CString::Format(char const*, ...)>
    8eb0:	e1a0000d 	mov	r0, sp
    8eb4:	eb000d2f 	bl	c378 <CString::operator char const*() const>
    8eb8:	e1a01000 	mov	r1, r0
    8ebc:	e1a02005 	mov	r2, r5
    8ec0:	e1a00004 	mov	r0, r4
    8ec4:	ebffffa7 	bl	8d68 <CDeviceNameService::GetDevice(char const*, bool)>
    8ec8:	e1a04000 	mov	r4, r0
    8ecc:	e1a0000d 	mov	r0, sp
    8ed0:	eb000d09 	bl	c2fc <CString::~CString()>
    8ed4:	e1a00004 	mov	r0, r4
    8ed8:	e28dd014 	add	sp, sp, #20
    8edc:	e1cd40d0 	ldrd	r4, [sp]
    8ee0:	e1cd60d8 	ldrd	r6, [sp, #8]
    8ee4:	e28dd010 	add	sp, sp, #16
    8ee8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8eec:	000156e4 	.word	0x000156e4

00008ef0 <CDeviceNameService::ListDevices(CDevice*)>:
    8ef0:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    8ef4:	e1cd60f8 	strd	r6, [sp, #8]
    8ef8:	e2517000 	subs	r7, r1, #0
    8efc:	e1cd81f0 	strd	r8, [sp, #16]
    8f00:	e58da018 	str	sl, [sp, #24]
    8f04:	e58de01c 	str	lr, [sp, #28]
    8f08:	e24dd018 	sub	sp, sp, #24
    8f0c:	0a00003a 	beq	8ffc <CDeviceNameService::ListDevices(CDevice*)+0x10c>
    8f10:	e5904000 	ldr	r4, [r0]
    8f14:	e3540000 	cmp	r4, #0
    8f18:	0a000030 	beq	8fe0 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
    8f1c:	e59f90ec 	ldr	r9, [pc, #236]	; 9010 <CDeviceNameService::ListDevices(CDevice*)+0x120>
    8f20:	e3a05000 	mov	r5, #0
    8f24:	ea00001b 	b	8f98 <CDeviceNameService::ListDevices(CDevice*)+0xa8>
    8f28:	e5d4200c 	ldrb	r2, [r4, #12]
    8f2c:	e2855001 	add	r5, r5, #1
    8f30:	e1a01009 	mov	r1, r9
    8f34:	e28d0008 	add	r0, sp, #8
    8f38:	e3520000 	cmp	r2, #0
    8f3c:	13a02062 	movne	r2, #98	; 0x62
    8f40:	03a02063 	moveq	r2, #99	; 0x63
    8f44:	e215a003 	ands	sl, r5, #3
    8f48:	03a0c00a 	moveq	ip, #10
    8f4c:	13a0c020 	movne	ip, #32
    8f50:	e58dc000 	str	ip, [sp]
    8f54:	eb000ded 	bl	c710 <CString::Format(char const*, ...)>
    8f58:	e5973000 	ldr	r3, [r7]
    8f5c:	e28d0008 	add	r0, sp, #8
    8f60:	e593800c 	ldr	r8, [r3, #12]
    8f64:	eb000d03 	bl	c378 <CString::operator char const*() const>
    8f68:	e1a06000 	mov	r6, r0
    8f6c:	e28d0008 	add	r0, sp, #8
    8f70:	eb000d4b 	bl	c4a4 <CString::GetLength() const>
    8f74:	e1a02000 	mov	r2, r0
    8f78:	e1a01006 	mov	r1, r6
    8f7c:	e1a00007 	mov	r0, r7
    8f80:	e12fff38 	blx	r8
    8f84:	e5944000 	ldr	r4, [r4]
    8f88:	e28d0008 	add	r0, sp, #8
    8f8c:	eb000cda 	bl	c2fc <CString::~CString()>
    8f90:	e3540000 	cmp	r4, #0
    8f94:	0a000009 	beq	8fc0 <CDeviceNameService::ListDevices(CDevice*)+0xd0>
    8f98:	e28d0008 	add	r0, sp, #8
    8f9c:	eb000c91 	bl	c1e8 <CString::CString()>
    8fa0:	e5943004 	ldr	r3, [r4, #4]
    8fa4:	e3530000 	cmp	r3, #0
    8fa8:	1affffde 	bne	8f28 <CDeviceNameService::ListDevices(CDevice*)+0x38>
    8fac:	e30516a4 	movw	r1, #22180	; 0x56a4
    8fb0:	e3401001 	movt	r1, #1
    8fb4:	e2810048 	add	r0, r1, #72	; 0x48
    8fb8:	e3a020b9 	mov	r2, #185	; 0xb9
    8fbc:	ebfffdda 	bl	872c <assertion_failed>
    8fc0:	e35a0000 	cmp	sl, #0
    8fc4:	0a000005 	beq	8fe0 <CDeviceNameService::ListDevices(CDevice*)+0xf0>
    8fc8:	e5973000 	ldr	r3, [r7]
    8fcc:	e1a00007 	mov	r0, r7
    8fd0:	e3a02001 	mov	r2, #1
    8fd4:	e59f1038 	ldr	r1, [pc, #56]	; 9014 <CDeviceNameService::ListDevices(CDevice*)+0x124>
    8fd8:	e593300c 	ldr	r3, [r3, #12]
    8fdc:	e12fff33 	blx	r3
    8fe0:	e28dd018 	add	sp, sp, #24
    8fe4:	e1cd40d0 	ldrd	r4, [sp]
    8fe8:	e1cd60d8 	ldrd	r6, [sp, #8]
    8fec:	e1cd81d0 	ldrd	r8, [sp, #16]
    8ff0:	e59da018 	ldr	sl, [sp, #24]
    8ff4:	e28dd01c 	add	sp, sp, #28
    8ff8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    8ffc:	e30516a4 	movw	r1, #22180	; 0x56a4
    9000:	e3401001 	movt	r1, #1
    9004:	e281006c 	add	r0, r1, #108	; 0x6c
    9008:	e3a020b0 	mov	r2, #176	; 0xb0
    900c:	ebfffdc6 	bl	872c <assertion_failed>
    9010:	00015720 	.word	0x00015720
    9014:	0001572c 	.word	0x0001572c

00009018 <CDeviceNameService::Get()>:
    9018:	e3093450 	movw	r3, #37968	; 0x9450
    901c:	e3403001 	movt	r3, #1
    9020:	e5930000 	ldr	r0, [r3]
    9024:	e3500000 	cmp	r0, #0
    9028:	112fff1e 	bxne	lr
    902c:	e30516a4 	movw	r1, #22180	; 0x56a4
    9030:	e3401001 	movt	r1, #1
    9034:	e52d4008 	str	r4, [sp, #-8]!
    9038:	e281008c 	add	r0, r1, #140	; 0x8c
    903c:	e3a020cc 	mov	r2, #204	; 0xcc
    9040:	e58de004 	str	lr, [sp, #4]
    9044:	ebfffdb8 	bl	872c <assertion_failed>

00009048 <CKernelOptions::CKernelOptions()>:
    9048:	e3a02004 	mov	r2, #4
    904c:	e3a0303c 	mov	r3, #60	; 0x3c
    9050:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
    9054:	e3a04000 	mov	r4, #0
    9058:	e1cd60f8 	strd	r6, [sp, #8]
    905c:	e2807e81 	add	r7, r0, #2064	; 0x810
    9060:	e1a05000 	mov	r5, r0
    9064:	e2877008 	add	r7, r7, #8
    9068:	e1cd81f0 	strd	r8, [sp, #16]
    906c:	e305173c 	movw	r1, #22332	; 0x573c
    9070:	e3401001 	movt	r1, #1
    9074:	e1cda1f8 	strd	sl, [sp, #24]
    9078:	e2858e83 	add	r8, r5, #2096	; 0x830
    907c:	e58de020 	str	lr, [sp, #32]
    9080:	e24dd014 	sub	sp, sp, #20
    9084:	e5804810 	str	r4, [r0, #2064]	; 0x810
    9088:	e5804814 	str	r4, [r0, #2068]	; 0x814
    908c:	e580282c 	str	r2, [r0, #2092]	; 0x82c
    9090:	e5804834 	str	r4, [r0, #2100]	; 0x834
    9094:	e5c04838 	strb	r4, [r0, #2104]	; 0x838
    9098:	e5804850 	str	r4, [r0, #2128]	; 0x850
    909c:	e5c04854 	strb	r4, [r0, #2132]	; 0x854
    90a0:	e5803858 	str	r3, [r0, #2136]	; 0x858
    90a4:	e1a00007 	mov	r0, r7
    90a8:	eb001764 	bl	ee40 <strcpy>
    90ac:	e59f1360 	ldr	r1, [pc, #864]	; 9414 <CKernelOptions::CKernelOptions()+0x3cc>
    90b0:	e1a00008 	mov	r0, r8
    90b4:	eb001761 	bl	ee40 <strcpy>
    90b8:	e3093454 	movw	r3, #37972	; 0x9454
    90bc:	e3403001 	movt	r3, #1
    90c0:	e5c54839 	strb	r4, [r5, #2105]	; 0x839
    90c4:	e1a01004 	mov	r1, r4
    90c8:	e28d0008 	add	r0, sp, #8
    90cc:	e5835000 	str	r5, [r3]
    90d0:	eb0026d6 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    90d4:	e1a02005 	mov	r2, r5
    90d8:	e28d0008 	add	r0, sp, #8
    90dc:	e58d4000 	str	r4, [sp]
    90e0:	e3a01001 	mov	r1, #1
    90e4:	e3401005 	movt	r1, #5
    90e8:	e300380c 	movw	r3, #2060	; 0x80c
    90ec:	eb0026e1 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    90f0:	e1500004 	cmp	r0, r4
    90f4:	0a000029 	beq	91a0 <CKernelOptions::CKernelOptions()+0x158>
    90f8:	e5953008 	ldr	r3, [r5, #8]
    90fc:	e3530b02 	cmp	r3, #2048	; 0x800
    9100:	2a000026 	bcs	91a0 <CKernelOptions::CKernelOptions()+0x158>
    9104:	e59f630c 	ldr	r6, [pc, #780]	; 9418 <CKernelOptions::CKernelOptions()+0x3d0>
    9108:	e0853003 	add	r3, r5, r3
    910c:	e285200c 	add	r2, r5, #12
    9110:	e5c3400c 	strb	r4, [r3, #12]
    9114:	e585280c 	str	r2, [r5, #2060]	; 0x80c
    9118:	e2469008 	sub	r9, r6, #8
    911c:	e1a00005 	mov	r0, r5
    9120:	eb0000e9 	bl	94cc <CKernelOptions::GetToken()>
    9124:	e250b000 	subs	fp, r0, #0
    9128:	0a00001c 	beq	91a0 <CKernelOptions::CKernelOptions()+0x158>
    912c:	e1db30d0 	ldrsb	r3, [fp]
    9130:	e3530000 	cmp	r3, #0
    9134:	0a000030 	beq	91fc <CKernelOptions::CKernelOptions()+0x1b4>
    9138:	e1a0400b 	mov	r4, fp
    913c:	ea000002 	b	914c <CKernelOptions::CKernelOptions()+0x104>
    9140:	e1f430d1 	ldrsb	r3, [r4, #1]!
    9144:	e3530000 	cmp	r3, #0
    9148:	0a00002b 	beq	91fc <CKernelOptions::CKernelOptions()+0x1b4>
    914c:	e353003d 	cmp	r3, #61	; 0x3d
    9150:	1afffffa 	bne	9140 <CKernelOptions::CKernelOptions()+0xf8>
    9154:	e3a02000 	mov	r2, #0
    9158:	e1a0a004 	mov	sl, r4
    915c:	e1a01006 	mov	r1, r6
    9160:	e1a0000b 	mov	r0, fp
    9164:	e4ca2001 	strb	r2, [sl], #1
    9168:	eb001696 	bl	ebc8 <strcmp>
    916c:	e3500000 	cmp	r0, #0
    9170:	1a000014 	bne	91c8 <CKernelOptions::CKernelOptions()+0x180>
    9174:	e1d420d1 	ldrsb	r2, [r4, #1]
    9178:	e3520000 	cmp	r2, #0
    917c:	0affffe6 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    9180:	e1a0000a 	mov	r0, sl
    9184:	eb000107 	bl	95a8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9188:	e3700001 	cmn	r0, #1
    918c:	15850810 	strne	r0, [r5, #2064]	; 0x810
    9190:	e1a00005 	mov	r0, r5
    9194:	eb0000cc 	bl	94cc <CKernelOptions::GetToken()>
    9198:	e250b000 	subs	fp, r0, #0
    919c:	1affffe2 	bne	912c <CKernelOptions::CKernelOptions()+0xe4>
    91a0:	e28d0008 	add	r0, sp, #8
    91a4:	eb0026ab 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
    91a8:	e1a00005 	mov	r0, r5
    91ac:	e28dd014 	add	sp, sp, #20
    91b0:	e1cd40d0 	ldrd	r4, [sp]
    91b4:	e1cd60d8 	ldrd	r6, [sp, #8]
    91b8:	e1cd81d0 	ldrd	r8, [sp, #16]
    91bc:	e1cda1d8 	ldrd	sl, [sp, #24]
    91c0:	e28dd020 	add	sp, sp, #32
    91c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    91c8:	e1a01009 	mov	r1, r9
    91cc:	e1a0000b 	mov	r0, fp
    91d0:	eb00167c 	bl	ebc8 <strcmp>
    91d4:	e3500000 	cmp	r0, #0
    91d8:	1a000012 	bne	9228 <CKernelOptions::CKernelOptions()+0x1e0>
    91dc:	e1d420d1 	ldrsb	r2, [r4, #1]
    91e0:	e3520000 	cmp	r2, #0
    91e4:	0affffcc 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    91e8:	e1a0000a 	mov	r0, sl
    91ec:	eb0000ed 	bl	95a8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    91f0:	e3700001 	cmn	r0, #1
    91f4:	15850814 	strne	r0, [r5, #2068]	; 0x814
    91f8:	eaffffc7 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    91fc:	e1a01006 	mov	r1, r6
    9200:	e1a0000b 	mov	r0, fp
    9204:	eb00166f 	bl	ebc8 <strcmp>
    9208:	e3500000 	cmp	r0, #0
    920c:	0affffc2 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    9210:	e1a01009 	mov	r1, r9
    9214:	e1a0000b 	mov	r0, fp
    9218:	eb00166a 	bl	ebc8 <strcmp>
    921c:	e3500000 	cmp	r0, #0
    9220:	13a0a000 	movne	sl, #0
    9224:	0affffbc 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    9228:	e59f11ec 	ldr	r1, [pc, #492]	; 941c <CKernelOptions::CKernelOptions()+0x3d4>
    922c:	e1a0000b 	mov	r0, fp
    9230:	eb001664 	bl	ebc8 <strcmp>
    9234:	e2504000 	subs	r4, r0, #0
    9238:	0a00000e 	beq	9278 <CKernelOptions::CKernelOptions()+0x230>
    923c:	e59f11dc 	ldr	r1, [pc, #476]	; 9420 <CKernelOptions::CKernelOptions()+0x3d8>
    9240:	e1a0000b 	mov	r0, fp
    9244:	eb00165f 	bl	ebc8 <strcmp>
    9248:	e3500000 	cmp	r0, #0
    924c:	1a00000f 	bne	9290 <CKernelOptions::CKernelOptions()+0x248>
    9250:	e35a0000 	cmp	sl, #0
    9254:	0affffb0 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    9258:	e1da20d0 	ldrsb	r2, [sl]
    925c:	e3520000 	cmp	r2, #0
    9260:	0affffad 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    9264:	e1a0000a 	mov	r0, sl
    9268:	eb0000ce 	bl	95a8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    926c:	e3500004 	cmp	r0, #4
    9270:	9585082c 	strls	r0, [r5, #2092]	; 0x82c
    9274:	eaffffa8 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    9278:	e1a0100a 	mov	r1, sl
    927c:	e3a02013 	mov	r2, #19
    9280:	e1a00007 	mov	r0, r7
    9284:	eb0016f8 	bl	ee6c <strncpy>
    9288:	e5c5482b 	strb	r4, [r5, #2091]	; 0x82b
    928c:	eaffffa2 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    9290:	e59f118c 	ldr	r1, [pc, #396]	; 9424 <CKernelOptions::CKernelOptions()+0x3dc>
    9294:	e1a0000b 	mov	r0, fp
    9298:	eb00164a 	bl	ebc8 <strcmp>
    929c:	e2504000 	subs	r4, r0, #0
    92a0:	0a000010 	beq	92e8 <CKernelOptions::CKernelOptions()+0x2a0>
    92a4:	e59f117c 	ldr	r1, [pc, #380]	; 9428 <CKernelOptions::CKernelOptions()+0x3e0>
    92a8:	e1a0000b 	mov	r0, fp
    92ac:	eb001645 	bl	ebc8 <strcmp>
    92b0:	e3500000 	cmp	r0, #0
    92b4:	1a000011 	bne	9300 <CKernelOptions::CKernelOptions()+0x2b8>
    92b8:	e35a0000 	cmp	sl, #0
    92bc:	0affff96 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    92c0:	e1da20d0 	ldrsb	r2, [sl]
    92c4:	e3520000 	cmp	r2, #0
    92c8:	0affff93 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    92cc:	e1a0000a 	mov	r0, sl
    92d0:	eb0000b4 	bl	95a8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    92d4:	e24010c8 	sub	r1, r0, #200	; 0xc8
    92d8:	e3012e78 	movw	r2, #7800	; 0x1e78
    92dc:	e1510002 	cmp	r1, r2
    92e0:	95850834 	strls	r0, [r5, #2100]	; 0x834
    92e4:	eaffff8c 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    92e8:	e1a0100a 	mov	r1, sl
    92ec:	e3a02002 	mov	r2, #2
    92f0:	e1a00008 	mov	r0, r8
    92f4:	eb0016dc 	bl	ee6c <strncpy>
    92f8:	e5c54832 	strb	r4, [r5, #2098]	; 0x832
    92fc:	eaffff86 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    9300:	e59f1124 	ldr	r1, [pc, #292]	; 942c <CKernelOptions::CKernelOptions()+0x3e4>
    9304:	e1a0000b 	mov	r0, fp
    9308:	eb00162e 	bl	ebc8 <strcmp>
    930c:	e3500000 	cmp	r0, #0
    9310:	1a000006 	bne	9330 <CKernelOptions::CKernelOptions()+0x2e8>
    9314:	e59f1114 	ldr	r1, [pc, #276]	; 9430 <CKernelOptions::CKernelOptions()+0x3e8>
    9318:	e1a0000a 	mov	r0, sl
    931c:	eb001629 	bl	ebc8 <strcmp>
    9320:	e3500000 	cmp	r0, #0
    9324:	03a03001 	moveq	r3, #1
    9328:	05c53838 	strbeq	r3, [r5, #2104]	; 0x838
    932c:	eaffff7a 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    9330:	e59f10fc 	ldr	r1, [pc, #252]	; 9434 <CKernelOptions::CKernelOptions()+0x3ec>
    9334:	e1a0000b 	mov	r0, fp
    9338:	eb001622 	bl	ebc8 <strcmp>
    933c:	e2504000 	subs	r4, r0, #0
    9340:	1a000006 	bne	9360 <CKernelOptions::CKernelOptions()+0x318>
    9344:	e2850e83 	add	r0, r5, #2096	; 0x830
    9348:	e1a0100a 	mov	r1, sl
    934c:	e2800009 	add	r0, r0, #9
    9350:	e3a02013 	mov	r2, #19
    9354:	eb0016c4 	bl	ee6c <strncpy>
    9358:	e5c5484c 	strb	r4, [r5, #2124]	; 0x84c
    935c:	eaffff6e 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    9360:	e59f10d0 	ldr	r1, [pc, #208]	; 9438 <CKernelOptions::CKernelOptions()+0x3f0>
    9364:	e1a0000b 	mov	r0, fp
    9368:	eb001616 	bl	ebc8 <strcmp>
    936c:	e3500000 	cmp	r0, #0
    9370:	1a000009 	bne	939c <CKernelOptions::CKernelOptions()+0x354>
    9374:	e35a0000 	cmp	sl, #0
    9378:	0affff67 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    937c:	e1da20d0 	ldrsb	r2, [sl]
    9380:	e3520000 	cmp	r2, #0
    9384:	0affff64 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    9388:	e1a0000a 	mov	r0, sl
    938c:	eb000085 	bl	95a8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9390:	e3500002 	cmp	r0, #2
    9394:	95850850 	strls	r0, [r5, #2128]	; 0x850
    9398:	eaffff5f 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    939c:	e59f1098 	ldr	r1, [pc, #152]	; 943c <CKernelOptions::CKernelOptions()+0x3f4>
    93a0:	e1a0000b 	mov	r0, fp
    93a4:	eb001607 	bl	ebc8 <strcmp>
    93a8:	e3500000 	cmp	r0, #0
    93ac:	1a000006 	bne	93cc <CKernelOptions::CKernelOptions()+0x384>
    93b0:	e59f1088 	ldr	r1, [pc, #136]	; 9440 <CKernelOptions::CKernelOptions()+0x3f8>
    93b4:	e1a0000a 	mov	r0, sl
    93b8:	eb001602 	bl	ebc8 <strcmp>
    93bc:	e3500000 	cmp	r0, #0
    93c0:	03a03001 	moveq	r3, #1
    93c4:	05c53854 	strbeq	r3, [r5, #2132]	; 0x854
    93c8:	eaffff53 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    93cc:	e59f1070 	ldr	r1, [pc, #112]	; 9444 <CKernelOptions::CKernelOptions()+0x3fc>
    93d0:	e1a0000b 	mov	r0, fp
    93d4:	eb0015fb 	bl	ebc8 <strcmp>
    93d8:	e16f2f1a 	clz	r2, sl
    93dc:	e3500000 	cmp	r0, #0
    93e0:	e1a022a2 	lsr	r2, r2, #5
    93e4:	13a02001 	movne	r2, #1
    93e8:	e3520000 	cmp	r2, #0
    93ec:	1affff4a 	bne	911c <CKernelOptions::CKernelOptions()+0xd4>
    93f0:	e1da20d0 	ldrsb	r2, [sl]
    93f4:	e3520000 	cmp	r2, #0
    93f8:	0affff47 	beq	911c <CKernelOptions::CKernelOptions()+0xd4>
    93fc:	e1a0000a 	mov	r0, sl
    9400:	eb000068 	bl	95a8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    9404:	e2402028 	sub	r2, r0, #40	; 0x28
    9408:	e3520026 	cmp	r2, #38	; 0x26
    940c:	95850858 	strls	r0, [r5, #2136]	; 0x858
    9410:	eaffff41 	b	911c <CKernelOptions::CKernelOptions()+0xd4>
    9414:	00015744 	.word	0x00015744
    9418:	000157c4 	.word	0x000157c4
    941c:	00015748 	.word	0x00015748
    9420:	00015750 	.word	0x00015750
    9424:	0001575c 	.word	0x0001575c
    9428:	00015764 	.word	0x00015764
    942c:	00015774 	.word	0x00015774
    9430:	00015780 	.word	0x00015780
    9434:	00015788 	.word	0x00015788
    9438:	00015794 	.word	0x00015794
    943c:	000157a0 	.word	0x000157a0
    9440:	000157a8 	.word	0x000157a8
    9444:	000157b0 	.word	0x000157b0

00009448 <CKernelOptions::~CKernelOptions()>:
    9448:	e3a02000 	mov	r2, #0
    944c:	e3093454 	movw	r3, #37972	; 0x9454
    9450:	e3403001 	movt	r3, #1
    9454:	e5832000 	str	r2, [r3]
    9458:	e12fff1e 	bx	lr

0000945c <CKernelOptions::GetWidth() const>:
    945c:	e5900810 	ldr	r0, [r0, #2064]	; 0x810
    9460:	e12fff1e 	bx	lr

00009464 <CKernelOptions::GetHeight() const>:
    9464:	e5900814 	ldr	r0, [r0, #2068]	; 0x814
    9468:	e12fff1e 	bx	lr

0000946c <CKernelOptions::GetLogDevice() const>:
    946c:	e2800e81 	add	r0, r0, #2064	; 0x810
    9470:	e2800008 	add	r0, r0, #8
    9474:	e12fff1e 	bx	lr

00009478 <CKernelOptions::GetLogLevel() const>:
    9478:	e590082c 	ldr	r0, [r0, #2092]	; 0x82c
    947c:	e12fff1e 	bx	lr

00009480 <CKernelOptions::GetKeyMap() const>:
    9480:	e2800e83 	add	r0, r0, #2096	; 0x830
    9484:	e12fff1e 	bx	lr

00009488 <CKernelOptions::GetUSBPowerDelay() const>:
    9488:	e5900834 	ldr	r0, [r0, #2100]	; 0x834
    948c:	e12fff1e 	bx	lr

00009490 <CKernelOptions::GetUSBFullSpeed() const>:
    9490:	e5d00838 	ldrb	r0, [r0, #2104]	; 0x838
    9494:	e12fff1e 	bx	lr

00009498 <CKernelOptions::GetSoundDevice() const>:
    9498:	e2800e83 	add	r0, r0, #2096	; 0x830
    949c:	e2800009 	add	r0, r0, #9
    94a0:	e12fff1e 	bx	lr

000094a4 <CKernelOptions::GetSoundOption() const>:
    94a4:	e5900850 	ldr	r0, [r0, #2128]	; 0x850
    94a8:	e12fff1e 	bx	lr

000094ac <CKernelOptions::GetCPUSpeed() const>:
    94ac:	e5d00854 	ldrb	r0, [r0, #2132]	; 0x854
    94b0:	e12fff1e 	bx	lr

000094b4 <CKernelOptions::GetSoCMaxTemp() const>:
    94b4:	e5900858 	ldr	r0, [r0, #2136]	; 0x858
    94b8:	e12fff1e 	bx	lr

000094bc <CKernelOptions::Get()>:
    94bc:	e3093454 	movw	r3, #37972	; 0x9454
    94c0:	e3403001 	movt	r3, #1
    94c4:	e5930000 	ldr	r0, [r3]
    94c8:	e12fff1e 	bx	lr

000094cc <CKernelOptions::GetToken()>:
    94cc:	e1a01000 	mov	r1, r0
    94d0:	e590080c 	ldr	r0, [r0, #2060]	; 0x80c
    94d4:	e1d030d0 	ldrsb	r3, [r0]
    94d8:	e3530000 	cmp	r3, #0
    94dc:	1a000005 	bne	94f8 <CKernelOptions::GetToken()+0x2c>
    94e0:	ea000017 	b	9544 <CKernelOptions::GetToken()+0x78>
    94e4:	e2800001 	add	r0, r0, #1
    94e8:	e581080c 	str	r0, [r1, #2060]	; 0x80c
    94ec:	e1d030d0 	ldrsb	r3, [r0]
    94f0:	e3530000 	cmp	r3, #0
    94f4:	0a000012 	beq	9544 <CKernelOptions::GetToken()+0x78>
    94f8:	e3530020 	cmp	r3, #32
    94fc:	0afffff8 	beq	94e4 <CKernelOptions::GetToken()+0x18>
    9500:	e591380c 	ldr	r3, [r1, #2060]	; 0x80c
    9504:	e1d320d0 	ldrsb	r2, [r3]
    9508:	e3520000 	cmp	r2, #0
    950c:	1a000005 	bne	9528 <CKernelOptions::GetToken()+0x5c>
    9510:	ea00000c 	b	9548 <CKernelOptions::GetToken()+0x7c>
    9514:	e2833001 	add	r3, r3, #1
    9518:	e581380c 	str	r3, [r1, #2060]	; 0x80c
    951c:	e1d320d0 	ldrsb	r2, [r3]
    9520:	e3520000 	cmp	r2, #0
    9524:	0a000008 	beq	954c <CKernelOptions::GetToken()+0x80>
    9528:	e3520020 	cmp	r2, #32
    952c:	1afffff8 	bne	9514 <CKernelOptions::GetToken()+0x48>
    9530:	e283c001 	add	ip, r3, #1
    9534:	e3a02000 	mov	r2, #0
    9538:	e581c80c 	str	ip, [r1, #2060]	; 0x80c
    953c:	e5c32000 	strb	r2, [r3]
    9540:	e12fff1e 	bx	lr
    9544:	e3a00000 	mov	r0, #0
    9548:	e12fff1e 	bx	lr
    954c:	e12fff1e 	bx	lr

00009550 <CKernelOptions::GetOptionValue(char*)>:
    9550:	e1d030d0 	ldrsb	r3, [r0]
    9554:	e3530000 	cmp	r3, #0
    9558:	1a000003 	bne	956c <CKernelOptions::GetOptionValue(char*)+0x1c>
    955c:	ea000007 	b	9580 <CKernelOptions::GetOptionValue(char*)+0x30>
    9560:	e1f030d1 	ldrsb	r3, [r0, #1]!
    9564:	e3530000 	cmp	r3, #0
    9568:	0a000004 	beq	9580 <CKernelOptions::GetOptionValue(char*)+0x30>
    956c:	e353003d 	cmp	r3, #61	; 0x3d
    9570:	1afffffa 	bne	9560 <CKernelOptions::GetOptionValue(char*)+0x10>
    9574:	e3a03000 	mov	r3, #0
    9578:	e4c03001 	strb	r3, [r0], #1
    957c:	e12fff1e 	bx	lr
    9580:	e1a00003 	mov	r0, r3
    9584:	e12fff1e 	bx	lr

00009588 <CKernelOptions::GetDecimal(char*)>:
    9588:	e2503000 	subs	r3, r0, #0
    958c:	0a000003 	beq	95a0 <CKernelOptions::GetDecimal(char*)+0x18>
    9590:	e1d330d0 	ldrsb	r3, [r3]
    9594:	e3530000 	cmp	r3, #0
    9598:	0a000000 	beq	95a0 <CKernelOptions::GetDecimal(char*)+0x18>
    959c:	ea000001 	b	95a8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>
    95a0:	e3e00000 	mvn	r0, #0
    95a4:	e12fff1e 	bx	lr

000095a8 <CKernelOptions::GetDecimal(char*) [clone .part.0]>:
    95a8:	e3a01000 	mov	r1, #0
    95ac:	ea000009 	b	95d8 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x30>
    95b0:	e3520009 	cmp	r2, #9
    95b4:	8a000010 	bhi	95fc <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    95b8:	e3730001 	cmn	r3, #1
    95bc:	13a02000 	movne	r2, #0
    95c0:	03a02001 	moveq	r2, #1
    95c4:	e1510003 	cmp	r1, r3
    95c8:	83822001 	orrhi	r2, r2, #1
    95cc:	e1a01003 	mov	r1, r3
    95d0:	e3520000 	cmp	r2, #0
    95d4:	1a000008 	bne	95fc <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x54>
    95d8:	e0d0c0d1 	ldrsb	ip, [r0], #1
    95dc:	e0813101 	add	r3, r1, r1, lsl #2
    95e0:	e24c2030 	sub	r2, ip, #48	; 0x30
    95e4:	e35c0000 	cmp	ip, #0
    95e8:	e0823083 	add	r3, r2, r3, lsl #1
    95ec:	e6ef2072 	uxtb	r2, r2
    95f0:	1affffee 	bne	95b0 <CKernelOptions::GetDecimal(char*) [clone .part.0]+0x8>
    95f4:	e1a00001 	mov	r0, r1
    95f8:	e12fff1e 	bx	lr
    95fc:	e3e01000 	mvn	r1, #0
    9600:	e1a00001 	mov	r0, r1
    9604:	e12fff1e 	bx	lr

00009608 <CLogger::CLogger(unsigned int, CTimer*, bool)>:
    9608:	e3a0c000 	mov	ip, #0
    960c:	e52d4008 	str	r4, [sp, #-8]!
    9610:	e1a04000 	mov	r4, r0
    9614:	e58de004 	str	lr, [sp, #4]
    9618:	e3a0e001 	mov	lr, #1
    961c:	e3a00901 	mov	r0, #16384	; 0x4000
    9620:	e8840006 	stm	r4, {r1, r2}
    9624:	e5c43008 	strb	r3, [r4, #8]
    9628:	e584c00c 	str	ip, [r4, #12]
    962c:	e584c010 	str	ip, [r4, #16]
    9630:	e584c014 	str	ip, [r4, #20]
    9634:	e584c018 	str	ip, [r4, #24]
    9638:	e584e01c 	str	lr, [r4, #28]
    963c:	e584c0e8 	str	ip, [r4, #232]	; 0xe8
    9640:	e584c0ec 	str	ip, [r4, #236]	; 0xec
    9644:	e584e0f0 	str	lr, [r4, #240]	; 0xf0
    9648:	e584c0f4 	str	ip, [r4, #244]	; 0xf4
    964c:	e584c0f8 	str	ip, [r4, #248]	; 0xf8
    9650:	eb001818 	bl	f6b8 <operator new[](unsigned int)>
    9654:	e1a02000 	mov	r2, r0
    9658:	e3093458 	movw	r3, #37976	; 0x9458
    965c:	e3403001 	movt	r3, #1
    9660:	e1a00004 	mov	r0, r4
    9664:	e5842010 	str	r2, [r4, #16]
    9668:	e5834000 	str	r4, [r3]
    966c:	e59d4000 	ldr	r4, [sp]
    9670:	e28dd004 	add	sp, sp, #4
    9674:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009678 <CLogger::~CLogger()>:
    9678:	e3a01000 	mov	r1, #0
    967c:	e3092458 	movw	r2, #37976	; 0x9458
    9680:	e3402001 	movt	r2, #1
    9684:	e16d41f0 	strd	r4, [sp, #-16]!
    9688:	e1a04000 	mov	r4, r0
    968c:	e1a05001 	mov	r5, r1
    9690:	e590c0e8 	ldr	ip, [r0, #232]	; 0xe8
    9694:	e59030ec 	ldr	r3, [r0, #236]	; 0xec
    9698:	e58d6008 	str	r6, [sp, #8]
    969c:	e58de00c 	str	lr, [sp, #12]
    96a0:	e5821000 	str	r1, [r2]
    96a4:	ea00000a 	b	96d4 <CLogger::~CLogger()+0x5c>
    96a8:	e7940102 	ldr	r0, [r4, r2, lsl #2]
    96ac:	e3500000 	cmp	r0, #0
    96b0:	0a000002 	beq	96c0 <CLogger::~CLogger()+0x48>
    96b4:	eb001814 	bl	f70c <operator delete(void*, unsigned int)>
    96b8:	e594c0e8 	ldr	ip, [r4, #232]	; 0xe8
    96bc:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    96c0:	e2833001 	add	r3, r3, #1
    96c4:	e3530032 	cmp	r3, #50	; 0x32
    96c8:	e58430ec 	str	r3, [r4, #236]	; 0xec
    96cc:	03a03000 	moveq	r3, #0
    96d0:	058450ec 	streq	r5, [r4, #236]	; 0xec
    96d4:	e153000c 	cmp	r3, ip
    96d8:	e2832008 	add	r2, r3, #8
    96dc:	e3a01f42 	mov	r1, #264	; 0x108
    96e0:	1afffff0 	bne	96a8 <CLogger::~CLogger()+0x30>
    96e4:	e5940010 	ldr	r0, [r4, #16]
    96e8:	e3500000 	cmp	r0, #0
    96ec:	0a000000 	beq	96f4 <CLogger::~CLogger()+0x7c>
    96f0:	eb0017fb 	bl	f6e4 <operator delete[](void*)>
    96f4:	e1a00004 	mov	r0, r4
    96f8:	e1cd40d0 	ldrd	r4, [sp]
    96fc:	e59d6008 	ldr	r6, [sp, #8]
    9700:	e28dd00c 	add	sp, sp, #12
    9704:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009708 <CLogger::Initialize(CDevice*)>:
    9708:	e52d4008 	str	r4, [sp, #-8]!
    970c:	e1a04000 	mov	r4, r0
    9710:	e58de004 	str	lr, [sp, #4]
    9714:	e24dd008 	sub	sp, sp, #8
    9718:	e580100c 	str	r1, [r0, #12]
    971c:	eb0004fe 	bl	ab1c <CMachineInfo::Get()>
    9720:	eb000360 	bl	a4a8 <CMachineInfo::GetMachineName() const>
    9724:	e1a02000 	mov	r2, r0
    9728:	e30537cc 	movw	r3, #22476	; 0x57cc
    972c:	e3403001 	movt	r3, #1
    9730:	e1a00004 	mov	r0, r4
    9734:	e283101c 	add	r1, r3, #28
    9738:	e58d2000 	str	r2, [sp]
    973c:	e3a02003 	mov	r2, #3
    9740:	eb000006 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    9744:	e3a00001 	mov	r0, #1
    9748:	e28dd008 	add	sp, sp, #8
    974c:	e59d4000 	ldr	r4, [sp]
    9750:	e28dd004 	add	sp, sp, #4
    9754:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00009758 <CLogger::SetNewTarget(CDevice*)>:
    9758:	e580100c 	str	r1, [r0, #12]
    975c:	e12fff1e 	bx	lr

00009760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>:
    9760:	e52d3004 	push	{r3}		; (str r3, [sp, #-4]!)
    9764:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    9768:	e24dd010 	sub	sp, sp, #16
    976c:	e59d3014 	ldr	r3, [sp, #20]
    9770:	e28dc018 	add	ip, sp, #24
    9774:	e58dc000 	str	ip, [sp]
    9778:	e58dc00c 	str	ip, [sp, #12]
    977c:	eb000003 	bl	9790 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>
    9780:	e28dd010 	add	sp, sp, #16
    9784:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    9788:	e28dd004 	add	sp, sp, #4
    978c:	e12fff1e 	bx	lr

00009790 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)>:
    9790:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
    9794:	e1a04000 	mov	r4, r0
    9798:	e1a05002 	mov	r5, r2
    979c:	e1cd60f8 	strd	r6, [sp, #8]
    97a0:	e1a07003 	mov	r7, r3
    97a4:	e1a06001 	mov	r6, r1
    97a8:	e58de010 	str	lr, [sp, #16]
    97ac:	e24dd024 	sub	sp, sp, #36	; 0x24
    97b0:	e1a0000d 	mov	r0, sp
    97b4:	eb000a8b 	bl	c1e8 <CString::CString()>
    97b8:	e1a01007 	mov	r1, r7
    97bc:	e1a0000d 	mov	r0, sp
    97c0:	e59d2038 	ldr	r2, [sp, #56]	; 0x38
    97c4:	eb000bdc 	bl	c73c <CString::FormatV(char const*, std::__va_list)>
    97c8:	e1a0000d 	mov	r0, sp
    97cc:	eb000ae9 	bl	c378 <CString::operator char const*() const>
    97d0:	e1a03000 	mov	r3, r0
    97d4:	e1a02005 	mov	r2, r5
    97d8:	e1a01006 	mov	r1, r6
    97dc:	e1a00004 	mov	r0, r4
    97e0:	eb000149 	bl	9d0c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>
    97e4:	e5943000 	ldr	r3, [r4]
    97e8:	e1550003 	cmp	r5, r3
    97ec:	8a000029 	bhi	9898 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x108>
    97f0:	e28d0010 	add	r0, sp, #16
    97f4:	eb000a7b 	bl	c1e8 <CString::CString()>
    97f8:	e3550000 	cmp	r5, #0
    97fc:	0a00002c 	beq	98b4 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x124>
    9800:	e5940004 	ldr	r0, [r4, #4]
    9804:	e3500000 	cmp	r0, #0
    9808:	0a00000d 	beq	9844 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xb4>
    980c:	eb0011da 	bl	df7c <CTimer::GetTimeString()>
    9810:	e2505000 	subs	r5, r0, #0
    9814:	0a00000a 	beq	9844 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0xb4>
    9818:	eb000ad6 	bl	c378 <CString::operator char const*() const>
    981c:	e1a01000 	mov	r1, r0
    9820:	e28d0010 	add	r0, sp, #16
    9824:	eb000b23 	bl	c4b8 <CString::Append(char const*)>
    9828:	e28d0010 	add	r0, sp, #16
    982c:	e59f1144 	ldr	r1, [pc, #324]	; 9978 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    9830:	eb000b20 	bl	c4b8 <CString::Append(char const*)>
    9834:	e5953000 	ldr	r3, [r5]
    9838:	e1a00005 	mov	r0, r5
    983c:	e5933004 	ldr	r3, [r3, #4]
    9840:	e12fff33 	blx	r3
    9844:	e1a01006 	mov	r1, r6
    9848:	e28d0010 	add	r0, sp, #16
    984c:	eb000b19 	bl	c4b8 <CString::Append(char const*)>
    9850:	e59f1124 	ldr	r1, [pc, #292]	; 997c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    9854:	e28d0010 	add	r0, sp, #16
    9858:	eb000b16 	bl	c4b8 <CString::Append(char const*)>
    985c:	e1a0000d 	mov	r0, sp
    9860:	eb000ac4 	bl	c378 <CString::operator char const*() const>
    9864:	e1a01000 	mov	r1, r0
    9868:	e28d0010 	add	r0, sp, #16
    986c:	eb000b11 	bl	c4b8 <CString::Append(char const*)>
    9870:	e59f1108 	ldr	r1, [pc, #264]	; 9980 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    9874:	e28d0010 	add	r0, sp, #16
    9878:	eb000b0e 	bl	c4b8 <CString::Append(char const*)>
    987c:	e28d0010 	add	r0, sp, #16
    9880:	eb000abc 	bl	c378 <CString::operator char const*() const>
    9884:	e1a01000 	mov	r1, r0
    9888:	e1a00004 	mov	r0, r4
    988c:	eb00009e 	bl	9b0c <CLogger::Write(char const*)>
    9890:	e28d0010 	add	r0, sp, #16
    9894:	eb000a98 	bl	c2fc <CString::~CString()>
    9898:	e1a0000d 	mov	r0, sp
    989c:	eb000a96 	bl	c2fc <CString::~CString()>
    98a0:	e28dd024 	add	sp, sp, #36	; 0x24
    98a4:	e1cd40d0 	ldrd	r4, [sp]
    98a8:	e1cd60d8 	ldrd	r6, [sp, #8]
    98ac:	e28dd010 	add	sp, sp, #16
    98b0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    98b4:	e59f10c8 	ldr	r1, [pc, #200]	; 9984 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f4>
    98b8:	e28d0010 	add	r0, sp, #16
    98bc:	eb000ab3 	bl	c390 <CString::operator=(char const*)>
    98c0:	e5940004 	ldr	r0, [r4, #4]
    98c4:	e3500000 	cmp	r0, #0
    98c8:	0a00000d 	beq	9904 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x174>
    98cc:	eb0011aa 	bl	df7c <CTimer::GetTimeString()>
    98d0:	e2505000 	subs	r5, r0, #0
    98d4:	0a00000a 	beq	9904 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x174>
    98d8:	eb000aa6 	bl	c378 <CString::operator char const*() const>
    98dc:	e1a01000 	mov	r1, r0
    98e0:	e28d0010 	add	r0, sp, #16
    98e4:	eb000af3 	bl	c4b8 <CString::Append(char const*)>
    98e8:	e28d0010 	add	r0, sp, #16
    98ec:	e59f1084 	ldr	r1, [pc, #132]	; 9978 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1e8>
    98f0:	eb000af0 	bl	c4b8 <CString::Append(char const*)>
    98f4:	e5953000 	ldr	r3, [r5]
    98f8:	e1a00005 	mov	r0, r5
    98fc:	e5933004 	ldr	r3, [r3, #4]
    9900:	e12fff33 	blx	r3
    9904:	e1a01006 	mov	r1, r6
    9908:	e28d0010 	add	r0, sp, #16
    990c:	eb000ae9 	bl	c4b8 <CString::Append(char const*)>
    9910:	e59f1064 	ldr	r1, [pc, #100]	; 997c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1ec>
    9914:	e28d0010 	add	r0, sp, #16
    9918:	eb000ae6 	bl	c4b8 <CString::Append(char const*)>
    991c:	e1a0000d 	mov	r0, sp
    9920:	eb000a94 	bl	c378 <CString::operator char const*() const>
    9924:	e1a01000 	mov	r1, r0
    9928:	e28d0010 	add	r0, sp, #16
    992c:	eb000ae1 	bl	c4b8 <CString::Append(char const*)>
    9930:	e59f1050 	ldr	r1, [pc, #80]	; 9988 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f8>
    9934:	e28d0010 	add	r0, sp, #16
    9938:	eb000ade 	bl	c4b8 <CString::Append(char const*)>
    993c:	e59f103c 	ldr	r1, [pc, #60]	; 9980 <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1f0>
    9940:	e28d0010 	add	r0, sp, #16
    9944:	eb000adb 	bl	c4b8 <CString::Append(char const*)>
    9948:	e28d0010 	add	r0, sp, #16
    994c:	eb000a89 	bl	c378 <CString::operator char const*() const>
    9950:	e1a01000 	mov	r1, r0
    9954:	e1a00004 	mov	r0, r4
    9958:	eb00006b 	bl	9b0c <CLogger::Write(char const*)>
    995c:	e59430f8 	ldr	r3, [r4, #248]	; 0xf8
    9960:	e3530000 	cmp	r3, #0
    9964:	0a000000 	beq	996c <CLogger::WriteV(char const*, TLogSeverity, char const*, std::__va_list)+0x1dc>
    9968:	e12fff33 	blx	r3
    996c:	e3a000ff 	mov	r0, #255	; 0xff
    9970:	eb000ff4 	bl	d948 <set_qemu_exit_status>
    9974:	eb000ff7 	bl	d958 <halt>
    9978:	00015808 	.word	0x00015808
    997c:	00015804 	.word	0x00015804
    9980:	000157f8 	.word	0x000157f8
    9984:	000157f0 	.word	0x000157f0
    9988:	000157fc 	.word	0x000157fc

0000998c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)>:
    998c:	e16d41f0 	strd	r4, [sp, #-16]!
    9990:	e1a04000 	mov	r4, r0
    9994:	e5900000 	ldr	r0, [r0]
    9998:	e58d6008 	str	r6, [sp, #8]
    999c:	e58de00c 	str	lr, [sp, #12]
    99a0:	e24dd0c8 	sub	sp, sp, #200	; 0xc8
    99a4:	e1520000 	cmp	r2, r0
    99a8:	8a000012 	bhi	99f8 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x6c>
    99ac:	e1a05003 	mov	r5, r3
    99b0:	e3a03000 	mov	r3, #0
    99b4:	e1520003 	cmp	r2, r3
    99b8:	e5cd3000 	strb	r3, [sp]
    99bc:	0a000012 	beq	9a0c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0x80>
    99c0:	e1a0000d 	mov	r0, sp
    99c4:	eb001537 	bl	eea8 <strcat>
    99c8:	e59f10a0 	ldr	r1, [pc, #160]	; 9a70 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xe4>
    99cc:	e1a0000d 	mov	r0, sp
    99d0:	eb001534 	bl	eea8 <strcat>
    99d4:	e1a01005 	mov	r1, r5
    99d8:	e1a0000d 	mov	r0, sp
    99dc:	eb001531 	bl	eea8 <strcat>
    99e0:	e59f108c 	ldr	r1, [pc, #140]	; 9a74 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xe8>
    99e4:	e1a0000d 	mov	r0, sp
    99e8:	eb00152e 	bl	eea8 <strcat>
    99ec:	e1a0100d 	mov	r1, sp
    99f0:	e1a00004 	mov	r0, r4
    99f4:	eb000044 	bl	9b0c <CLogger::Write(char const*)>
    99f8:	e28dd0c8 	add	sp, sp, #200	; 0xc8
    99fc:	e1cd40d0 	ldrd	r4, [sp]
    9a00:	e59d6008 	ldr	r6, [sp, #8]
    9a04:	e28dd00c 	add	sp, sp, #12
    9a08:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9a0c:	e1a06001 	mov	r6, r1
    9a10:	e1a0000d 	mov	r0, sp
    9a14:	e59f105c 	ldr	r1, [pc, #92]	; 9a78 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xec>
    9a18:	eb001508 	bl	ee40 <strcpy>
    9a1c:	e1a01006 	mov	r1, r6
    9a20:	e1a0000d 	mov	r0, sp
    9a24:	eb00151f 	bl	eea8 <strcat>
    9a28:	e59f1040 	ldr	r1, [pc, #64]	; 9a70 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xe4>
    9a2c:	e1a0000d 	mov	r0, sp
    9a30:	eb00151c 	bl	eea8 <strcat>
    9a34:	e1a01005 	mov	r1, r5
    9a38:	e1a0000d 	mov	r0, sp
    9a3c:	eb001519 	bl	eea8 <strcat>
    9a40:	e59f1034 	ldr	r1, [pc, #52]	; 9a7c <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xf0>
    9a44:	e1a0000d 	mov	r0, sp
    9a48:	eb001516 	bl	eea8 <strcat>
    9a4c:	e59f1020 	ldr	r1, [pc, #32]	; 9a74 <CLogger::WriteNoAlloc(char const*, TLogSeverity, char const*)+0xe8>
    9a50:	e1a0000d 	mov	r0, sp
    9a54:	eb001513 	bl	eea8 <strcat>
    9a58:	e1a0100d 	mov	r1, sp
    9a5c:	e1a00004 	mov	r0, r4
    9a60:	eb000029 	bl	9b0c <CLogger::Write(char const*)>
    9a64:	e3a000ff 	mov	r0, #255	; 0xff
    9a68:	eb000fb6 	bl	d948 <set_qemu_exit_status>
    9a6c:	eb000fb9 	bl	d958 <halt>
    9a70:	00015804 	.word	0x00015804
    9a74:	000157f8 	.word	0x000157f8
    9a78:	000157f0 	.word	0x000157f0
    9a7c:	000157fc 	.word	0x000157fc

00009a80 <CLogger::Get()>:
    9a80:	e16d41f0 	strd	r4, [sp, #-16]!
    9a84:	e3095458 	movw	r5, #37976	; 0x9458
    9a88:	e3405001 	movt	r5, #1
    9a8c:	e5954000 	ldr	r4, [r5]
    9a90:	e58d6008 	str	r6, [sp, #8]
    9a94:	e58de00c 	str	lr, [sp, #12]
    9a98:	e3540000 	cmp	r4, #0
    9a9c:	0a000004 	beq	9ab4 <CLogger::Get()+0x34>
    9aa0:	e1a00004 	mov	r0, r4
    9aa4:	e1cd40d0 	ldrd	r4, [sp]
    9aa8:	e59d6008 	ldr	r6, [sp, #8]
    9aac:	e28dd00c 	add	sp, sp, #12
    9ab0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9ab4:	e3a000fc 	mov	r0, #252	; 0xfc
    9ab8:	eb0016f8 	bl	f6a0 <operator new(unsigned int)>
    9abc:	e1a04000 	mov	r4, r0
    9ac0:	e3a03000 	mov	r3, #0
    9ac4:	e3a02001 	mov	r2, #1
    9ac8:	e3a00901 	mov	r0, #16384	; 0x4000
    9acc:	e5843000 	str	r3, [r4]
    9ad0:	e5843004 	str	r3, [r4, #4]
    9ad4:	e5c42008 	strb	r2, [r4, #8]
    9ad8:	e584300c 	str	r3, [r4, #12]
    9adc:	e5843010 	str	r3, [r4, #16]
    9ae0:	e5843014 	str	r3, [r4, #20]
    9ae4:	e5843018 	str	r3, [r4, #24]
    9ae8:	e584201c 	str	r2, [r4, #28]
    9aec:	e58430e8 	str	r3, [r4, #232]	; 0xe8
    9af0:	e58430ec 	str	r3, [r4, #236]	; 0xec
    9af4:	e1c42ff0 	strd	r2, [r4, #240]	; 0xf0
    9af8:	e58430f8 	str	r3, [r4, #248]	; 0xf8
    9afc:	eb0016ed 	bl	f6b8 <operator new[](unsigned int)>
    9b00:	e5854000 	str	r4, [r5]
    9b04:	e5840010 	str	r0, [r4, #16]
    9b08:	eaffffe4 	b	9aa0 <CLogger::Get()+0x20>

00009b0c <CLogger::Write(char const*)>:
    9b0c:	e16d41f0 	strd	r4, [sp, #-16]!
    9b10:	e1a04000 	mov	r4, r0
    9b14:	e1a00001 	mov	r0, r1
    9b18:	e1a05001 	mov	r5, r1
    9b1c:	e58d6008 	str	r6, [sp, #8]
    9b20:	e58de00c 	str	lr, [sp, #12]
    9b24:	eb00141d 	bl	eba0 <strlen>
    9b28:	e1a06000 	mov	r6, r0
    9b2c:	e594000c 	ldr	r0, [r4, #12]
    9b30:	e3500000 	cmp	r0, #0
    9b34:	0a000004 	beq	9b4c <CLogger::Write(char const*)+0x40>
    9b38:	e5903000 	ldr	r3, [r0]
    9b3c:	e1a02006 	mov	r2, r6
    9b40:	e1a01005 	mov	r1, r5
    9b44:	e593300c 	ldr	r3, [r3, #12]
    9b48:	e12fff33 	blx	r3
    9b4c:	e594001c 	ldr	r0, [r4, #28]
    9b50:	e3500000 	cmp	r0, #0
    9b54:	1a000025 	bne	9bf0 <CLogger::Write(char const*)+0xe4>
    9b58:	e3560000 	cmp	r6, #0
    9b5c:	e246c001 	sub	ip, r6, #1
    9b60:	0a00001e 	beq	9be0 <CLogger::Write(char const*)+0xd4>
    9b64:	e1a02005 	mov	r2, r5
    9b68:	ea000003 	b	9b7c <CLogger::Write(char const*)+0x70>
    9b6c:	e2623001 	rsb	r3, r2, #1
    9b70:	e0853003 	add	r3, r5, r3
    9b74:	e173000c 	cmn	r3, ip
    9b78:	0a000015 	beq	9bd4 <CLogger::Write(char const*)+0xc8>
    9b7c:	e0d230d1 	ldrsb	r3, [r2], #1
    9b80:	e353000d 	cmp	r3, #13
    9b84:	0afffff8 	beq	9b6c <CLogger::Write(char const*)+0x60>
    9b88:	e1c401d0 	ldrd	r0, [r4, #16]
    9b8c:	e7c03001 	strb	r3, [r0, r1]
    9b90:	e5943014 	ldr	r3, [r4, #20]
    9b94:	e5940018 	ldr	r0, [r4, #24]
    9b98:	e2833001 	add	r3, r3, #1
    9b9c:	e7ed3053 	ubfx	r3, r3, #0, #14
    9ba0:	e1530000 	cmp	r3, r0
    9ba4:	e5843014 	str	r3, [r4, #20]
    9ba8:	1affffef 	bne	9b6c <CLogger::Write(char const*)+0x60>
    9bac:	e5d40008 	ldrb	r0, [r4, #8]
    9bb0:	e2831001 	add	r1, r3, #1
    9bb4:	e7ed1051 	ubfx	r1, r1, #0, #14
    9bb8:	e3500000 	cmp	r0, #0
    9bbc:	0a000015 	beq	9c18 <CLogger::Write(char const*)+0x10c>
    9bc0:	e2623001 	rsb	r3, r2, #1
    9bc4:	e5841018 	str	r1, [r4, #24]
    9bc8:	e0853003 	add	r3, r5, r3
    9bcc:	e173000c 	cmn	r3, ip
    9bd0:	1affffe9 	bne	9b7c <CLogger::Write(char const*)+0x70>
    9bd4:	e594301c 	ldr	r3, [r4, #28]
    9bd8:	e3530000 	cmp	r3, #0
    9bdc:	1a000008 	bne	9c04 <CLogger::Write(char const*)+0xf8>
    9be0:	e1cd40d0 	ldrd	r4, [sp]
    9be4:	e59d6008 	ldr	r6, [sp, #8]
    9be8:	e28dd00c 	add	sp, sp, #12
    9bec:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9bf0:	eb001e2c 	bl	114a8 <EnterCritical>
    9bf4:	e3560000 	cmp	r6, #0
    9bf8:	e246c001 	sub	ip, r6, #1
    9bfc:	1affffd8 	bne	9b64 <CLogger::Write(char const*)+0x58>
    9c00:	eafffff3 	b	9bd4 <CLogger::Write(char const*)+0xc8>
    9c04:	e1cd40d0 	ldrd	r4, [sp]
    9c08:	e59d6008 	ldr	r6, [sp, #8]
    9c0c:	e59de00c 	ldr	lr, [sp, #12]
    9c10:	e28dd010 	add	sp, sp, #16
    9c14:	ea001e51 	b	11560 <LeaveCritical>
    9c18:	e2433001 	sub	r3, r3, #1
    9c1c:	e7ed3053 	ubfx	r3, r3, #0, #14
    9c20:	e5843014 	str	r3, [r4, #20]
    9c24:	eaffffea 	b	9bd4 <CLogger::Write(char const*)+0xc8>

00009c28 <CLogger::Read(void*, unsigned int, bool)>:
    9c28:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    9c2c:	e1a04000 	mov	r4, r0
    9c30:	e1a05001 	mov	r5, r1
    9c34:	e590001c 	ldr	r0, [r0, #28]
    9c38:	e1cd60f8 	strd	r6, [sp, #8]
    9c3c:	e1a07002 	mov	r7, r2
    9c40:	e1cd81f0 	strd	r8, [sp, #16]
    9c44:	e1a08003 	mov	r8, r3
    9c48:	e58da018 	str	sl, [sp, #24]
    9c4c:	e58de01c 	str	lr, [sp, #28]
    9c50:	e3500000 	cmp	r0, #0
    9c54:	1a00001f 	bne	9cd8 <CLogger::Read(void*, unsigned int, bool)+0xb0>
    9c58:	e5943014 	ldr	r3, [r4, #20]
    9c5c:	e594c018 	ldr	ip, [r4, #24]
    9c60:	e153000c 	cmp	r3, ip
    9c64:	0a000024 	beq	9cfc <CLogger::Read(void*, unsigned int, bool)+0xd4>
    9c68:	e1a09007 	mov	r9, r7
    9c6c:	e3a0e000 	mov	lr, #0
    9c70:	ea000007 	b	9c94 <CLogger::Read(void*, unsigned int, bool)+0x6c>
    9c74:	e5946010 	ldr	r6, [r4, #16]
    9c78:	e28ee001 	add	lr, lr, #1
    9c7c:	e19660dc 	ldrsb	r6, [r6, ip]
    9c80:	e7edc051 	ubfx	ip, r1, #0, #14
    9c84:	e4c56001 	strb	r6, [r5], #1
    9c88:	e5941014 	ldr	r1, [r4, #20]
    9c8c:	e151000c 	cmp	r1, ip
    9c90:	0a00000e 	beq	9cd0 <CLogger::Read(void*, unsigned int, bool)+0xa8>
    9c94:	e15e0007 	cmp	lr, r7
    9c98:	e28c1001 	add	r1, ip, #1
    9c9c:	1afffff4 	bne	9c74 <CLogger::Read(void*, unsigned int, bool)+0x4c>
    9ca0:	e594301c 	ldr	r3, [r4, #28]
    9ca4:	e3580000 	cmp	r8, #0
    9ca8:	1584c018 	strne	ip, [r4, #24]
    9cac:	e3530000 	cmp	r3, #0
    9cb0:	1a000013 	bne	9d04 <CLogger::Read(void*, unsigned int, bool)+0xdc>
    9cb4:	e1a00009 	mov	r0, r9
    9cb8:	e1cd40d0 	ldrd	r4, [sp]
    9cbc:	e1cd60d8 	ldrd	r6, [sp, #8]
    9cc0:	e1cd81d0 	ldrd	r8, [sp, #16]
    9cc4:	e59da018 	ldr	sl, [sp, #24]
    9cc8:	e28dd01c 	add	sp, sp, #28
    9ccc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9cd0:	e1a0900e 	mov	r9, lr
    9cd4:	eafffff1 	b	9ca0 <CLogger::Read(void*, unsigned int, bool)+0x78>
    9cd8:	eb001df2 	bl	114a8 <EnterCritical>
    9cdc:	e5943014 	ldr	r3, [r4, #20]
    9ce0:	e594c018 	ldr	ip, [r4, #24]
    9ce4:	e153000c 	cmp	r3, ip
    9ce8:	1affffde 	bne	9c68 <CLogger::Read(void*, unsigned int, bool)+0x40>
    9cec:	e594301c 	ldr	r3, [r4, #28]
    9cf0:	e3530000 	cmp	r3, #0
    9cf4:	0a000000 	beq	9cfc <CLogger::Read(void*, unsigned int, bool)+0xd4>
    9cf8:	eb001e18 	bl	11560 <LeaveCritical>
    9cfc:	e3e09000 	mvn	r9, #0
    9d00:	eaffffeb 	b	9cb4 <CLogger::Read(void*, unsigned int, bool)+0x8c>
    9d04:	eb001e15 	bl	11560 <LeaveCritical>
    9d08:	eaffffe9 	b	9cb4 <CLogger::Read(void*, unsigned int, bool)+0x8c>

00009d0c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)>:
    9d0c:	e16d41fc 	strd	r4, [sp, #-28]!	; 0xffffffe4
    9d10:	e1a04000 	mov	r4, r0
    9d14:	e3a00f42 	mov	r0, #264	; 0x108
    9d18:	e1cd60f8 	strd	r6, [sp, #8]
    9d1c:	e1a06003 	mov	r6, r3
    9d20:	e1a07002 	mov	r7, r2
    9d24:	e1cd81f0 	strd	r8, [sp, #16]
    9d28:	e1a08001 	mov	r8, r1
    9d2c:	e3a09000 	mov	r9, #0
    9d30:	e58de018 	str	lr, [sp, #24]
    9d34:	e24dd00c 	sub	sp, sp, #12
    9d38:	eb001658 	bl	f6a0 <operator new(unsigned int)>
    9d3c:	e1a05000 	mov	r5, r0
    9d40:	e1a01008 	mov	r1, r8
    9d44:	e4c07001 	strb	r7, [r0], #1
    9d48:	e3a02032 	mov	r2, #50	; 0x32
    9d4c:	eb001446 	bl	ee6c <strncpy>
    9d50:	e1a01006 	mov	r1, r6
    9d54:	e2850033 	add	r0, r5, #51	; 0x33
    9d58:	e5c59032 	strb	r9, [r5, #50]	; 0x32
    9d5c:	e3a020c8 	mov	r2, #200	; 0xc8
    9d60:	eb001441 	bl	ee6c <strncpy>
    9d64:	e5940004 	ldr	r0, [r4, #4]
    9d68:	e5c590fa 	strb	r9, [r5, #250]	; 0xfa
    9d6c:	e1500009 	cmp	r0, r9
    9d70:	0a000004 	beq	9d88 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x7c>
    9d74:	e28d2004 	add	r2, sp, #4
    9d78:	e1a0100d 	mov	r1, sp
    9d7c:	eb001005 	bl	dd98 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>
    9d80:	e1500009 	cmp	r0, r9
    9d84:	1a00003d 	bne	9e80 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x174>
    9d88:	e3a03000 	mov	r3, #0
    9d8c:	e58530fc 	str	r3, [r5, #252]	; 0xfc
    9d90:	e5853100 	str	r3, [r5, #256]	; 0x100
    9d94:	e5853104 	str	r3, [r5, #260]	; 0x104
    9d98:	e59420f0 	ldr	r2, [r4, #240]	; 0xf0
    9d9c:	e3520000 	cmp	r2, #0
    9da0:	1a000032 	bne	9e70 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x164>
    9da4:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    9da8:	e2830008 	add	r0, r3, #8
    9dac:	e3530031 	cmp	r3, #49	; 0x31
    9db0:	e2831001 	add	r1, r3, #1
    9db4:	e7845100 	str	r5, [r4, r0, lsl #2]
    9db8:	0a000020 	beq	9e40 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x134>
    9dbc:	e59400ec 	ldr	r0, [r4, #236]	; 0xec
    9dc0:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    9dc4:	e1510000 	cmp	r1, r0
    9dc8:	0a00000b 	beq	9dfc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xf0>
    9dcc:	e3520000 	cmp	r2, #0
    9dd0:	1a000018 	bne	9e38 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x12c>
    9dd4:	e59430f4 	ldr	r3, [r4, #244]	; 0xf4
    9dd8:	e3530000 	cmp	r3, #0
    9ddc:	0a000000 	beq	9de4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xd8>
    9de0:	e12fff33 	blx	r3
    9de4:	e28dd00c 	add	sp, sp, #12
    9de8:	e1cd40d0 	ldrd	r4, [sp]
    9dec:	e1cd60d8 	ldrd	r6, [sp, #8]
    9df0:	e1cd81d0 	ldrd	r8, [sp, #16]
    9df4:	e28dd018 	add	sp, sp, #24
    9df8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9dfc:	e2833009 	add	r3, r3, #9
    9e00:	e3510031 	cmp	r1, #49	; 0x31
    9e04:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    9e08:	03a03000 	moveq	r3, #0
    9e0c:	e2811001 	add	r1, r1, #1
    9e10:	058430ec 	streq	r3, [r4, #236]	; 0xec
    9e14:	1a000010 	bne	9e5c <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x150>
    9e18:	e3520000 	cmp	r2, #0
    9e1c:	1a000011 	bne	9e68 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x15c>
    9e20:	e3550000 	cmp	r5, #0
    9e24:	0affffea 	beq	9dd4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    9e28:	e1a00005 	mov	r0, r5
    9e2c:	e3a01f42 	mov	r1, #264	; 0x108
    9e30:	eb001635 	bl	f70c <operator delete(void*, unsigned int)>
    9e34:	eaffffe6 	b	9dd4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    9e38:	eb001dc8 	bl	11560 <LeaveCritical>
    9e3c:	eaffffe4 	b	9dd4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc8>
    9e40:	e59430ec 	ldr	r3, [r4, #236]	; 0xec
    9e44:	e3a01000 	mov	r1, #0
    9e48:	e58410e8 	str	r1, [r4, #232]	; 0xe8
    9e4c:	e1530001 	cmp	r3, r1
    9e50:	1affffdd 	bne	9dcc <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0xc0>
    9e54:	e5945020 	ldr	r5, [r4, #32]
    9e58:	e3a01001 	mov	r1, #1
    9e5c:	e3520000 	cmp	r2, #0
    9e60:	e58410ec 	str	r1, [r4, #236]	; 0xec
    9e64:	0affffed 	beq	9e20 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
    9e68:	eb001dbc 	bl	11560 <LeaveCritical>
    9e6c:	eaffffeb 	b	9e20 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x114>
    9e70:	e1a00002 	mov	r0, r2
    9e74:	eb001d8b 	bl	114a8 <EnterCritical>
    9e78:	e59420f0 	ldr	r2, [r4, #240]	; 0xf0
    9e7c:	eaffffc8 	b	9da4 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x98>
    9e80:	e89d000a 	ldm	sp, {r1, r3}
    9e84:	e3012759 	movw	r2, #5977	; 0x1759
    9e88:	e34d21b7 	movt	r2, #53687	; 0xd1b7
    9e8c:	e5940004 	ldr	r0, [r4, #4]
    9e90:	e0832392 	umull	r2, r3, r2, r3
    9e94:	e58510fc 	str	r1, [r5, #252]	; 0xfc
    9e98:	e1a036a3 	lsr	r3, r3, #13
    9e9c:	e5853100 	str	r3, [r5, #256]	; 0x100
    9ea0:	eb000f7b 	bl	dc94 <CTimer::GetTimeZone() const>
    9ea4:	e5850104 	str	r0, [r5, #260]	; 0x104
    9ea8:	eaffffba 	b	9d98 <CLogger::WriteEvent(char const*, TLogSeverity, char const*)+0x8c>

00009eac <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)>:
    9eac:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    9eb0:	e1a04000 	mov	r4, r0
    9eb4:	e59000f0 	ldr	r0, [r0, #240]	; 0xf0
    9eb8:	e1cd60f8 	strd	r6, [sp, #8]
    9ebc:	e1a06001 	mov	r6, r1
    9ec0:	e1a07003 	mov	r7, r3
    9ec4:	e58d8010 	str	r8, [sp, #16]
    9ec8:	e1a08002 	mov	r8, r2
    9ecc:	e58de014 	str	lr, [sp, #20]
    9ed0:	e3500000 	cmp	r0, #0
    9ed4:	1a000025 	bne	9f70 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xc4>
    9ed8:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    9edc:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
    9ee0:	e15c0003 	cmp	ip, r3
    9ee4:	0a00002e 	beq	9fa4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xf8>
    9ee8:	e35c0031 	cmp	ip, #49	; 0x31
    9eec:	e28c3008 	add	r3, ip, #8
    9ef0:	e28cc001 	add	ip, ip, #1
    9ef4:	e7945103 	ldr	r5, [r4, r3, lsl #2]
    9ef8:	03a03000 	moveq	r3, #0
    9efc:	1584c0ec 	strne	ip, [r4, #236]	; 0xec
    9f00:	058430ec 	streq	r3, [r4, #236]	; 0xec
    9f04:	e3500000 	cmp	r0, #0
    9f08:	1a00001f 	bne	9f8c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe0>
    9f0c:	e1a01005 	mov	r1, r5
    9f10:	e1a00008 	mov	r0, r8
    9f14:	e4d13001 	ldrb	r3, [r1], #1
    9f18:	e5c63000 	strb	r3, [r6]
    9f1c:	eb0013c7 	bl	ee40 <strcpy>
    9f20:	e2851033 	add	r1, r5, #51	; 0x33
    9f24:	e1a00007 	mov	r0, r7
    9f28:	eb0013c4 	bl	ee40 <strcpy>
    9f2c:	e59dc018 	ldr	ip, [sp, #24]
    9f30:	e1a00005 	mov	r0, r5
    9f34:	e3a01f42 	mov	r1, #264	; 0x108
    9f38:	e1c52fdc 	ldrd	r2, [r5, #252]	; 0xfc
    9f3c:	e58c2000 	str	r2, [ip]
    9f40:	e59d201c 	ldr	r2, [sp, #28]
    9f44:	e5823000 	str	r3, [r2]
    9f48:	e59d2020 	ldr	r2, [sp, #32]
    9f4c:	e5953104 	ldr	r3, [r5, #260]	; 0x104
    9f50:	e5823000 	str	r3, [r2]
    9f54:	eb0015ec 	bl	f70c <operator delete(void*, unsigned int)>
    9f58:	e3a00001 	mov	r0, #1
    9f5c:	e1cd40d0 	ldrd	r4, [sp]
    9f60:	e1cd60d8 	ldrd	r6, [sp, #8]
    9f64:	e59d8010 	ldr	r8, [sp, #16]
    9f68:	e28dd014 	add	sp, sp, #20
    9f6c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    9f70:	eb001d4c 	bl	114a8 <EnterCritical>
    9f74:	e59430e8 	ldr	r3, [r4, #232]	; 0xe8
    9f78:	e594c0ec 	ldr	ip, [r4, #236]	; 0xec
    9f7c:	e153000c 	cmp	r3, ip
    9f80:	0a000003 	beq	9f94 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xe8>
    9f84:	e59400f0 	ldr	r0, [r4, #240]	; 0xf0
    9f88:	eaffffd6 	b	9ee8 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x3c>
    9f8c:	eb001d73 	bl	11560 <LeaveCritical>
    9f90:	eaffffdd 	b	9f0c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0x60>
    9f94:	e59430f0 	ldr	r3, [r4, #240]	; 0xf0
    9f98:	e3530000 	cmp	r3, #0
    9f9c:	0a000000 	beq	9fa4 <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xf8>
    9fa0:	eb001d6e 	bl	11560 <LeaveCritical>
    9fa4:	e3a00000 	mov	r0, #0
    9fa8:	eaffffeb 	b	9f5c <CLogger::ReadEvent(TLogSeverity*, char*, char*, long*, unsigned int*, int*)+0xb0>

00009fac <CLogger::RegisterEventNotificationHandler(void (*)())>:
    9fac:	e58010f4 	str	r1, [r0, #244]	; 0xf4
    9fb0:	e12fff1e 	bx	lr

00009fb4 <CLogger::RegisterPanicHandler(void (*)())>:
    9fb4:	e58010f8 	str	r1, [r0, #248]	; 0xf8
    9fb8:	e12fff1e 	bx	lr
    9fbc:	00000000 	andeq	r0, r0, r0

00009fc0 <CMachineInfo::CMachineInfo()>:
    9fc0:	e52d400c 	str	r4, [sp, #-12]!
    9fc4:	e58db004 	str	fp, [sp, #4]
    9fc8:	e58de008 	str	lr, [sp, #8]
    9fcc:	e28db008 	add	fp, sp, #8
    9fd0:	e24dd04c 	sub	sp, sp, #76	; 0x4c
    9fd4:	e50b0048 	str	r0, [fp, #-72]	; 0xffffffb8
    9fd8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    9fdc:	e3a02000 	mov	r2, #0
    9fe0:	e5832000 	str	r2, [r3]
    9fe4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    9fe8:	e3a02012 	mov	r2, #18
    9fec:	e5c32004 	strb	r2, [r3, #4]
    9ff0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    9ff4:	e3a02000 	mov	r2, #0
    9ff8:	e5832008 	str	r2, [r3, #8]
    9ffc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a000:	e3a02000 	mov	r2, #0
    a004:	e583200c 	str	r2, [r3, #12]
    a008:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a00c:	e3a02004 	mov	r2, #4
    a010:	e5c32010 	strb	r2, [r3, #16]
    a014:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a018:	e3a02000 	mov	r2, #0
    a01c:	e5832014 	str	r2, [r3, #20]
    a020:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a024:	e30721f5 	movw	r2, #29173	; 0x71f5
    a028:	e1c321b8 	strh	r2, [r3, #24]
    a02c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a030:	e3a02000 	mov	r2, #0
    a034:	e583201c 	str	r2, [r3, #28]
    a038:	e309345c 	movw	r3, #37980	; 0x945c
    a03c:	e3403001 	movt	r3, #1
    a040:	e5933000 	ldr	r3, [r3]
    a044:	e3530000 	cmp	r3, #0
    a048:	0a000024 	beq	a0e0 <CMachineInfo::CMachineInfo()+0x120>
    a04c:	e309345c 	movw	r3, #37980	; 0x945c
    a050:	e3403001 	movt	r3, #1
    a054:	e5933000 	ldr	r3, [r3]
    a058:	e5932000 	ldr	r2, [r3]
    a05c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a060:	e5832000 	str	r2, [r3]
    a064:	e309345c 	movw	r3, #37980	; 0x945c
    a068:	e3403001 	movt	r3, #1
    a06c:	e5933000 	ldr	r3, [r3]
    a070:	e5d32004 	ldrb	r2, [r3, #4]
    a074:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a078:	e5c32004 	strb	r2, [r3, #4]
    a07c:	e309345c 	movw	r3, #37980	; 0x945c
    a080:	e3403001 	movt	r3, #1
    a084:	e5933000 	ldr	r3, [r3]
    a088:	e5932008 	ldr	r2, [r3, #8]
    a08c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a090:	e5832008 	str	r2, [r3, #8]
    a094:	e309345c 	movw	r3, #37980	; 0x945c
    a098:	e3403001 	movt	r3, #1
    a09c:	e5933000 	ldr	r3, [r3]
    a0a0:	e593200c 	ldr	r2, [r3, #12]
    a0a4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a0a8:	e583200c 	str	r2, [r3, #12]
    a0ac:	e309345c 	movw	r3, #37980	; 0x945c
    a0b0:	e3403001 	movt	r3, #1
    a0b4:	e5933000 	ldr	r3, [r3]
    a0b8:	e5d32010 	ldrb	r2, [r3, #16]
    a0bc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a0c0:	e5c32010 	strb	r2, [r3, #16]
    a0c4:	e309345c 	movw	r3, #37980	; 0x945c
    a0c8:	e3403001 	movt	r3, #1
    a0cc:	e5933000 	ldr	r3, [r3]
    a0d0:	e5932014 	ldr	r2, [r3, #20]
    a0d4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a0d8:	e5832014 	str	r2, [r3, #20]
    a0dc:	ea0000cf 	b	a420 <CMachineInfo::CMachineInfo()+0x460>
    a0e0:	e309345c 	movw	r3, #37980	; 0x945c
    a0e4:	e3403001 	movt	r3, #1
    a0e8:	e51b2048 	ldr	r2, [fp, #-72]	; 0xffffffb8
    a0ec:	e5832000 	str	r2, [r3]
    a0f0:	e24b3020 	sub	r3, fp, #32
    a0f4:	e3a01001 	mov	r1, #1
    a0f8:	e1a00003 	mov	r0, r3
    a0fc:	eb0022cb 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    a100:	e24b2030 	sub	r2, fp, #48	; 0x30
    a104:	e24b0020 	sub	r0, fp, #32
    a108:	e3a03000 	mov	r3, #0
    a10c:	e58d3000 	str	r3, [sp]
    a110:	e3a03010 	mov	r3, #16
    a114:	e3a01001 	mov	r1, #1
    a118:	e3401006 	movt	r1, #6
    a11c:	eb0022d5 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a120:	e1a03000 	mov	r3, r0
    a124:	e3530000 	cmp	r3, #0
    a128:	0a000003 	beq	a13c <CMachineInfo::CMachineInfo()+0x17c>
    a12c:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
    a130:	e6ff2073 	uxth	r2, r3
    a134:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a138:	e1c321b8 	strh	r2, [r3, #24]
    a13c:	e24b2040 	sub	r2, fp, #64	; 0x40
    a140:	e24b0020 	sub	r0, fp, #32
    a144:	e3a03000 	mov	r3, #0
    a148:	e58d3000 	str	r3, [sp]
    a14c:	e3a03010 	mov	r3, #16
    a150:	e3a01002 	mov	r1, #2
    a154:	e3401001 	movt	r1, #1
    a158:	eb0022c6 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a15c:	e1a03000 	mov	r3, r0
    a160:	e2233001 	eor	r3, r3, #1
    a164:	e6ef3073 	uxtb	r3, r3
    a168:	e3530000 	cmp	r3, #0
    a16c:	0a000001 	beq	a178 <CMachineInfo::CMachineInfo()+0x1b8>
    a170:	e3a04000 	mov	r4, #0
    a174:	ea0000a5 	b	a410 <CMachineInfo::CMachineInfo()+0x450>
    a178:	e51b2034 	ldr	r2, [fp, #-52]	; 0xffffffcc
    a17c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a180:	e5832000 	str	r2, [r3]
    a184:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a188:	e5933000 	ldr	r3, [r3]
    a18c:	e2033502 	and	r3, r3, #8388608	; 0x800000
    a190:	e3530000 	cmp	r3, #0
    a194:	0a000067 	beq	a338 <CMachineInfo::CMachineInfo()+0x378>
    a198:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a19c:	e5933000 	ldr	r3, [r3]
    a1a0:	e1a03223 	lsr	r3, r3, #4
    a1a4:	e6ef3073 	uxtb	r3, r3
    a1a8:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
    a1ac:	e3a03000 	mov	r3, #0
    a1b0:	e50b3010 	str	r3, [fp, #-16]
    a1b4:	e51b3010 	ldr	r3, [fp, #-16]
    a1b8:	e353000f 	cmp	r3, #15
    a1bc:	8a000010 	bhi	a204 <CMachineInfo::CMachineInfo()+0x244>
    a1c0:	e3072e98 	movw	r2, #32408	; 0x7e98
    a1c4:	e3402001 	movt	r2, #1
    a1c8:	e51b1010 	ldr	r1, [fp, #-16]
    a1cc:	e1a03001 	mov	r3, r1
    a1d0:	e1a03083 	lsl	r3, r3, #1
    a1d4:	e0833001 	add	r3, r3, r1
    a1d8:	e1a03103 	lsl	r3, r3, #2
    a1dc:	e0823003 	add	r3, r2, r3
    a1e0:	e5933000 	ldr	r3, [r3]
    a1e4:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
    a1e8:	e1520003 	cmp	r2, r3
    a1ec:	0a000003 	beq	a200 <CMachineInfo::CMachineInfo()+0x240>
    a1f0:	e51b3010 	ldr	r3, [fp, #-16]
    a1f4:	e2833001 	add	r3, r3, #1
    a1f8:	e50b3010 	str	r3, [fp, #-16]
    a1fc:	eaffffec 	b	a1b4 <CMachineInfo::CMachineInfo()+0x1f4>
    a200:	e320f000 	nop	{0}
    a204:	e51b3010 	ldr	r3, [fp, #-16]
    a208:	e353000f 	cmp	r3, #15
    a20c:	9a000001 	bls	a218 <CMachineInfo::CMachineInfo()+0x258>
    a210:	e3a04000 	mov	r4, #0
    a214:	ea00007d 	b	a410 <CMachineInfo::CMachineInfo()+0x450>
    a218:	e3072e98 	movw	r2, #32408	; 0x7e98
    a21c:	e3402001 	movt	r2, #1
    a220:	e51b1010 	ldr	r1, [fp, #-16]
    a224:	e1a03001 	mov	r3, r1
    a228:	e1a03083 	lsl	r3, r3, #1
    a22c:	e0833001 	add	r3, r3, r1
    a230:	e1a03103 	lsl	r3, r3, #2
    a234:	e0823003 	add	r3, r2, r3
    a238:	e2833004 	add	r3, r3, #4
    a23c:	e5d32000 	ldrb	r2, [r3]
    a240:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a244:	e5c32004 	strb	r2, [r3, #4]
    a248:	e3072e98 	movw	r2, #32408	; 0x7e98
    a24c:	e3402001 	movt	r2, #1
    a250:	e51b1010 	ldr	r1, [fp, #-16]
    a254:	e1a03001 	mov	r3, r1
    a258:	e1a03083 	lsl	r3, r3, #1
    a25c:	e0833001 	add	r3, r3, r1
    a260:	e1a03103 	lsl	r3, r3, #2
    a264:	e0823003 	add	r3, r2, r3
    a268:	e2833008 	add	r3, r3, #8
    a26c:	e5932000 	ldr	r2, [r3]
    a270:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a274:	e5832008 	str	r2, [r3, #8]
    a278:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a27c:	e5933000 	ldr	r3, [r3]
    a280:	e203300f 	and	r3, r3, #15
    a284:	e2832001 	add	r2, r3, #1
    a288:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a28c:	e583200c 	str	r2, [r3, #12]
    a290:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a294:	e5933000 	ldr	r3, [r3]
    a298:	e1a03623 	lsr	r3, r3, #12
    a29c:	e6ef3073 	uxtb	r3, r3
    a2a0:	e203300f 	and	r3, r3, #15
    a2a4:	e6ef2073 	uxtb	r2, r3
    a2a8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a2ac:	e5c32010 	strb	r2, [r3, #16]
    a2b0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a2b4:	e5933000 	ldr	r3, [r3]
    a2b8:	e1a03a23 	lsr	r3, r3, #20
    a2bc:	e2033007 	and	r3, r3, #7
    a2c0:	e3a02c01 	mov	r2, #256	; 0x100
    a2c4:	e1a03312 	lsl	r3, r2, r3
    a2c8:	e1a02003 	mov	r2, r3
    a2cc:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a2d0:	e5832014 	str	r2, [r3, #20]
    a2d4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a2d8:	e5d33010 	ldrb	r3, [r3, #16]
    a2dc:	e3530003 	cmp	r3, #3
    a2e0:	9a000002 	bls	a2f0 <CMachineInfo::CMachineInfo()+0x330>
    a2e4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a2e8:	e3a02004 	mov	r2, #4
    a2ec:	e5c32010 	strb	r2, [r3, #16]
    a2f0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a2f4:	e5d33004 	ldrb	r3, [r3, #4]
    a2f8:	e3530003 	cmp	r3, #3
    a2fc:	1a000042 	bne	a40c <CMachineInfo::CMachineInfo()+0x44c>
    a300:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a304:	e5933014 	ldr	r3, [r3, #20]
    a308:	e3530c01 	cmp	r3, #256	; 0x100
    a30c:	1a00003e 	bne	a40c <CMachineInfo::CMachineInfo()+0x44c>
    a310:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a314:	e593300c 	ldr	r3, [r3, #12]
    a318:	e3530001 	cmp	r3, #1
    a31c:	1a000001 	bne	a328 <CMachineInfo::CMachineInfo()+0x368>
    a320:	e3a02001 	mov	r2, #1
    a324:	ea000000 	b	a32c <CMachineInfo::CMachineInfo()+0x36c>
    a328:	e3a02002 	mov	r2, #2
    a32c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a330:	e5c32004 	strb	r2, [r3, #4]
    a334:	ea000034 	b	a40c <CMachineInfo::CMachineInfo()+0x44c>
    a338:	e3a03000 	mov	r3, #0
    a33c:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    a340:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a344:	e3530010 	cmp	r3, #16
    a348:	8a00000c 	bhi	a380 <CMachineInfo::CMachineInfo()+0x3c0>
    a34c:	e3073d88 	movw	r3, #32136	; 0x7d88
    a350:	e3403001 	movt	r3, #1
    a354:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
    a358:	e7932202 	ldr	r2, [r3, r2, lsl #4]
    a35c:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a360:	e5933000 	ldr	r3, [r3]
    a364:	e1520003 	cmp	r2, r3
    a368:	0a000003 	beq	a37c <CMachineInfo::CMachineInfo()+0x3bc>
    a36c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a370:	e2833001 	add	r3, r3, #1
    a374:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
    a378:	eafffff0 	b	a340 <CMachineInfo::CMachineInfo()+0x380>
    a37c:	e320f000 	nop	{0}
    a380:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a384:	e3530010 	cmp	r3, #16
    a388:	9a000001 	bls	a394 <CMachineInfo::CMachineInfo()+0x3d4>
    a38c:	e3a04000 	mov	r4, #0
    a390:	ea00001e 	b	a410 <CMachineInfo::CMachineInfo()+0x450>
    a394:	e3072d88 	movw	r2, #32136	; 0x7d88
    a398:	e3402001 	movt	r2, #1
    a39c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a3a0:	e1a03203 	lsl	r3, r3, #4
    a3a4:	e0823003 	add	r3, r2, r3
    a3a8:	e5d32004 	ldrb	r2, [r3, #4]
    a3ac:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a3b0:	e5c32004 	strb	r2, [r3, #4]
    a3b4:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a3b8:	e3a02001 	mov	r2, #1
    a3bc:	e5832008 	str	r2, [r3, #8]
    a3c0:	e3072d88 	movw	r2, #32136	; 0x7d88
    a3c4:	e3402001 	movt	r2, #1
    a3c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a3cc:	e1a03203 	lsl	r3, r3, #4
    a3d0:	e0823003 	add	r3, r2, r3
    a3d4:	e5932008 	ldr	r2, [r3, #8]
    a3d8:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a3dc:	e583200c 	str	r2, [r3, #12]
    a3e0:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a3e4:	e3a02000 	mov	r2, #0
    a3e8:	e5c32010 	strb	r2, [r3, #16]
    a3ec:	e3072d88 	movw	r2, #32136	; 0x7d88
    a3f0:	e3402001 	movt	r2, #1
    a3f4:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
    a3f8:	e1a03203 	lsl	r3, r3, #4
    a3fc:	e0823003 	add	r3, r2, r3
    a400:	e593200c 	ldr	r2, [r3, #12]
    a404:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a408:	e5832014 	str	r2, [r3, #20]
    a40c:	e3a04001 	mov	r4, #1
    a410:	e24b3020 	sub	r3, fp, #32
    a414:	e1a00003 	mov	r0, r3
    a418:	eb00220e 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
    a41c:	e3540001 	cmp	r4, #1
    a420:	e51b3048 	ldr	r3, [fp, #-72]	; 0xffffffb8
    a424:	e1a00003 	mov	r0, r3
    a428:	e24bd008 	sub	sp, fp, #8
    a42c:	e59d4000 	ldr	r4, [sp]
    a430:	e59db004 	ldr	fp, [sp, #4]
    a434:	e28dd008 	add	sp, sp, #8
    a438:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a43c <CMachineInfo::~CMachineInfo()>:
    a43c:	e16d41f0 	strd	r4, [sp, #-16]!
    a440:	e3a03012 	mov	r3, #18
    a444:	e1a04000 	mov	r4, r0
    a448:	e590501c 	ldr	r5, [r0, #28]
    a44c:	e58d6008 	str	r6, [sp, #8]
    a450:	e58de00c 	str	lr, [sp, #12]
    a454:	e5c03004 	strb	r3, [r0, #4]
    a458:	e3550000 	cmp	r5, #0
    a45c:	0a000004 	beq	a474 <CMachineInfo::~CMachineInfo()+0x38>
    a460:	e1a00005 	mov	r0, r5
    a464:	eb001e79 	bl	11e50 <CDeviceTreeBlob::~CDeviceTreeBlob()>
    a468:	e1a00005 	mov	r0, r5
    a46c:	e3a01004 	mov	r1, #4
    a470:	eb0014a5 	bl	f70c <operator delete(void*, unsigned int)>
    a474:	e309345c 	movw	r3, #37980	; 0x945c
    a478:	e3403001 	movt	r3, #1
    a47c:	e59d6008 	ldr	r6, [sp, #8]
    a480:	e1a00004 	mov	r0, r4
    a484:	e5932000 	ldr	r2, [r3]
    a488:	e1520004 	cmp	r2, r4
    a48c:	e1cd40d0 	ldrd	r4, [sp]
    a490:	e28dd00c 	add	sp, sp, #12
    a494:	03a02000 	moveq	r2, #0
    a498:	05832000 	streq	r2, [r3]
    a49c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000a4a0 <CMachineInfo::GetMachineModel() const>:
    a4a0:	e5d00004 	ldrb	r0, [r0, #4]
    a4a4:	e12fff1e 	bx	lr

0000a4a8 <CMachineInfo::GetMachineName() const>:
    a4a8:	e5d02004 	ldrb	r2, [r0, #4]
    a4ac:	e3073d88 	movw	r3, #32136	; 0x7d88
    a4b0:	e3403001 	movt	r3, #1
    a4b4:	e0833102 	add	r3, r3, r2, lsl #2
    a4b8:	e59301d0 	ldr	r0, [r3, #464]	; 0x1d0
    a4bc:	e12fff1e 	bx	lr

0000a4c0 <CMachineInfo::GetModelMajor() const>:
    a4c0:	e5900008 	ldr	r0, [r0, #8]
    a4c4:	e12fff1e 	bx	lr

0000a4c8 <CMachineInfo::GetModelRevision() const>:
    a4c8:	e590000c 	ldr	r0, [r0, #12]
    a4cc:	e12fff1e 	bx	lr

0000a4d0 <CMachineInfo::GetSoCType() const>:
    a4d0:	e5d00010 	ldrb	r0, [r0, #16]
    a4d4:	e12fff1e 	bx	lr

0000a4d8 <CMachineInfo::GetRAMSize() const>:
    a4d8:	e5900014 	ldr	r0, [r0, #20]
    a4dc:	e12fff1e 	bx	lr

0000a4e0 <CMachineInfo::GetSoCName() const>:
    a4e0:	e5d02010 	ldrb	r2, [r0, #16]
    a4e4:	e3073d88 	movw	r3, #32136	; 0x7d88
    a4e8:	e3403001 	movt	r3, #1
    a4ec:	e0833102 	add	r3, r3, r2, lsl #2
    a4f0:	e593021c 	ldr	r0, [r3, #540]	; 0x21c
    a4f4:	e12fff1e 	bx	lr

0000a4f8 <CMachineInfo::GetRevisionRaw() const>:
    a4f8:	e5900000 	ldr	r0, [r0]
    a4fc:	e12fff1e 	bx	lr

0000a500 <CMachineInfo::GetActLEDInfo() const>:
    a500:	e5d02004 	ldrb	r2, [r0, #4]
    a504:	e3073d88 	movw	r3, #32136	; 0x7d88
    a508:	e3403001 	movt	r3, #1
    a50c:	e0833102 	add	r3, r3, r2, lsl #2
    a510:	e5930230 	ldr	r0, [r3, #560]	; 0x230
    a514:	e12fff1e 	bx	lr

0000a518 <CMachineInfo::GetClockRate(unsigned int) const>:
    a518:	e16d40fc 	strd	r4, [sp, #-12]!
    a51c:	e1a04001 	mov	r4, r1
    a520:	e1a05000 	mov	r5, r0
    a524:	e58de008 	str	lr, [sp, #8]
    a528:	e24dd02c 	sub	sp, sp, #44	; 0x2c
    a52c:	e3a01000 	mov	r1, #0
    a530:	e28d000c 	add	r0, sp, #12
    a534:	eb0021bd 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
    a538:	e3a02004 	mov	r2, #4
    a53c:	e3a03014 	mov	r3, #20
    a540:	e28d000c 	add	r0, sp, #12
    a544:	e3a01002 	mov	r1, #2
    a548:	e3401003 	movt	r1, #3
    a54c:	e58d2000 	str	r2, [sp]
    a550:	e08d2003 	add	r2, sp, r3
    a554:	e58d4020 	str	r4, [sp, #32]
    a558:	eb0021c6 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
    a55c:	e3500000 	cmp	r0, #0
    a560:	1a00001d 	bne	a5dc <CMachineInfo::GetClockRate(unsigned int) const+0xc4>
    a564:	e2444001 	sub	r4, r4, #1
    a568:	e354000d 	cmp	r4, #13
    a56c:	979ff104 	ldrls	pc, [pc, r4, lsl #2]
    a570:	ea000025 	b	a60c <CMachineInfo::GetClockRate(unsigned int) const+0xf4>
    a574:	0000a5d0 	.word	0x0000a5d0
    a578:	0000a5ac 	.word	0x0000a5ac
    a57c:	0000a60c 	.word	0x0000a60c
    a580:	0000a5ec 	.word	0x0000a5ec
    a584:	0000a60c 	.word	0x0000a60c
    a588:	0000a60c 	.word	0x0000a60c
    a58c:	0000a60c 	.word	0x0000a60c
    a590:	0000a60c 	.word	0x0000a60c
    a594:	0000a60c 	.word	0x0000a60c
    a598:	0000a60c 	.word	0x0000a60c
    a59c:	0000a60c 	.word	0x0000a60c
    a5a0:	0000a60c 	.word	0x0000a60c
    a5a4:	0000a60c 	.word	0x0000a60c
    a5a8:	0000a5e4 	.word	0x0000a5e4
    a5ac:	e3a04b1b 	mov	r4, #27648	; 0x6c00
    a5b0:	e34042dc 	movt	r4, #732	; 0x2dc
    a5b4:	e28d000c 	add	r0, sp, #12
    a5b8:	eb0021a6 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
    a5bc:	e1a00004 	mov	r0, r4
    a5c0:	e28dd02c 	add	sp, sp, #44	; 0x2c
    a5c4:	e1cd40d0 	ldrd	r4, [sp]
    a5c8:	e28dd008 	add	sp, sp, #8
    a5cc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a5d0:	e3a04ce1 	mov	r4, #57600	; 0xe100
    a5d4:	e34045f5 	movt	r4, #1525	; 0x5f5
    a5d8:	eafffff5 	b	a5b4 <CMachineInfo::GetClockRate(unsigned int) const+0x9c>
    a5dc:	e59d4024 	ldr	r4, [sp, #36]	; 0x24
    a5e0:	eafffff3 	b	a5b4 <CMachineInfo::GetClockRate(unsigned int) const+0x9c>
    a5e4:	e3a04000 	mov	r4, #0
    a5e8:	eafffff1 	b	a5b4 <CMachineInfo::GetClockRate(unsigned int) const+0x9c>
    a5ec:	e5952008 	ldr	r2, [r5, #8]
    a5f0:	e3a03ca3 	mov	r3, #41728	; 0xa300
    a5f4:	e34131e1 	movt	r3, #4577	; 0x11e1
    a5f8:	e30b4280 	movw	r4, #45696	; 0xb280
    a5fc:	e3404ee6 	movt	r4, #3814	; 0xee6
    a600:	e3520002 	cmp	r2, #2
    a604:	81a04003 	movhi	r4, r3
    a608:	eaffffe9 	b	a5b4 <CMachineInfo::GetClockRate(unsigned int) const+0x9c>
    a60c:	e59f1008 	ldr	r1, [pc, #8]	; a61c <CMachineInfo::GetClockRate(unsigned int) const+0x104>
    a610:	e3002151 	movw	r2, #337	; 0x151
    a614:	e2810010 	add	r0, r1, #16
    a618:	ebfff843 	bl	872c <assertion_failed>
    a61c:	000159ac 	.word	0x000159ac

0000a620 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const>:
    a620:	e3510036 	cmp	r1, #54	; 0x36
    a624:	0a000006 	beq	a644 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x24>
    a628:	e3510037 	cmp	r1, #55	; 0x37
    a62c:	1a00000e 	bne	a66c <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x4c>
    a630:	e5d03004 	ldrb	r3, [r0, #4]
    a634:	e3530003 	cmp	r3, #3
    a638:	83a00028 	movhi	r0, #40	; 0x28
    a63c:	93a0002d 	movls	r0, #45	; 0x2d
    a640:	e12fff1e 	bx	lr
    a644:	e5d03004 	ldrb	r3, [r0, #4]
    a648:	e3530003 	cmp	r3, #3
    a64c:	9a000004 	bls	a664 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x44>
    a650:	e5903008 	ldr	r3, [r0, #8]
    a654:	e3530003 	cmp	r3, #3
    a658:	33a0002d 	movcc	r0, #45	; 0x2d
    a65c:	23a00029 	movcs	r0, #41	; 0x29
    a660:	e12fff1e 	bx	lr
    a664:	e3a00028 	mov	r0, #40	; 0x28
    a668:	e12fff1e 	bx	lr
    a66c:	e59f1010 	ldr	r1, [pc, #16]	; a684 <CMachineInfo::GetGPIOPin(TGPIOVirtualPin) const+0x64>
    a670:	e3002192 	movw	r2, #402	; 0x192
    a674:	e52d4008 	str	r4, [sp, #-8]!
    a678:	e58de004 	str	lr, [sp, #4]
    a67c:	e2810010 	add	r0, r1, #16
    a680:	ebfff829 	bl	872c <assertion_failed>
    a684:	000159ac 	.word	0x000159ac

0000a688 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)>:
    a688:	e5903008 	ldr	r3, [r0, #8]
    a68c:	e3530003 	cmp	r3, #3
    a690:	8a000006 	bhi	a6b0 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x28>
    a694:	e3510001 	cmp	r1, #1
    a698:	0a00000e 	beq	a6d8 <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x50>
    a69c:	e3510006 	cmp	r1, #6
    a6a0:	e3a00c65 	mov	r0, #25856	; 0x6500
    a6a4:	e3410dcd 	movt	r0, #7629	; 0x1dcd
    a6a8:	13a00000 	movne	r0, #0
    a6ac:	e12fff1e 	bx	lr
    a6b0:	e3510001 	cmp	r1, #1
    a6b4:	0a000004 	beq	a6cc <CMachineInfo::GetGPIOClockSourceRate(unsigned int)+0x44>
    a6b8:	e3510006 	cmp	r1, #6
    a6bc:	e3a00d5e 	mov	r0, #6016	; 0x1780
    a6c0:	e3420cb4 	movt	r0, #11444	; 0x2cb4
    a6c4:	13a00000 	movne	r0, #0
    a6c8:	e12fff1e 	bx	lr
    a6cc:	e30f0980 	movw	r0, #63872	; 0xf980
    a6d0:	e3400337 	movt	r0, #823	; 0x337
    a6d4:	e12fff1e 	bx	lr
    a6d8:	e3a00b3e 	mov	r0, #63488	; 0xf800
    a6dc:	e3400124 	movt	r0, #292	; 0x124
    a6e0:	e12fff1e 	bx	lr

0000a6e4 <CMachineInfo::GetDevice(TDeviceId) const>:
    a6e4:	e3510000 	cmp	r1, #0
    a6e8:	1a000003 	bne	a6fc <CMachineInfo::GetDevice(TDeviceId) const+0x18>
    a6ec:	e5d00004 	ldrb	r0, [r0, #4]
    a6f0:	e2500001 	subs	r0, r0, #1
    a6f4:	13a00001 	movne	r0, #1
    a6f8:	e12fff1e 	bx	lr
    a6fc:	e59f1010 	ldr	r1, [pc, #16]	; a714 <CMachineInfo::GetDevice(TDeviceId) const+0x30>
    a700:	e30021cd 	movw	r2, #461	; 0x1cd
    a704:	e52d4008 	str	r4, [sp, #-8]!
    a708:	e58de004 	str	lr, [sp, #4]
    a70c:	e2810010 	add	r0, r1, #16
    a710:	ebfff805 	bl	872c <assertion_failed>
    a714:	000159ac 	.word	0x000159ac

0000a718 <CMachineInfo::ArePWMChannelsSwapped() const>:
    a718:	e5d03004 	ldrb	r3, [r0, #4]
    a71c:	e2430006 	sub	r0, r3, #6
    a720:	e3500001 	cmp	r0, #1
    a724:	83530003 	cmphi	r3, #3
    a728:	83a00001 	movhi	r0, #1
    a72c:	93a00000 	movls	r0, #0
    a730:	e12fff1e 	bx	lr

0000a734 <CMachineInfo::AllocateDMAChannel(unsigned int)>:
    a734:	e309345c 	movw	r3, #37980	; 0x945c
    a738:	e3403001 	movt	r3, #1
    a73c:	e52d4008 	str	r4, [sp, #-8]!
    a740:	e1a02000 	mov	r2, r0
    a744:	e5933000 	ldr	r3, [r3]
    a748:	e58de004 	str	lr, [sp, #4]
    a74c:	ea000002 	b	a75c <CMachineInfo::AllocateDMAChannel(unsigned int)+0x28>
    a750:	e1530002 	cmp	r3, r2
    a754:	0a000006 	beq	a774 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x40>
    a758:	e1a02003 	mov	r2, r3
    a75c:	e3530000 	cmp	r3, #0
    a760:	1afffffa 	bne	a750 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x1c>
    a764:	e59f10cc 	ldr	r1, [pc, #204]	; a838 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x104>
    a768:	e30021dd 	movw	r2, #477	; 0x1dd
    a76c:	e2810014 	add	r0, r1, #20
    a770:	ebfff7ed 	bl	872c <assertion_failed>
    a774:	e3d1000f 	bics	r0, r1, #15
    a778:	0a000015 	beq	a7d4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xa0>
    a77c:	e3510081 	cmp	r1, #129	; 0x81
    a780:	0a000025 	beq	a81c <CMachineInfo::AllocateDMAChannel(unsigned int)+0xe8>
    a784:	e3510083 	cmp	r1, #131	; 0x83
    a788:	13a00000 	movne	r0, #0
    a78c:	03a0000b 	moveq	r0, #11
    a790:	13a03007 	movne	r3, #7
    a794:	03a0300e 	moveq	r3, #14
    a798:	e1d2c1b8 	ldrh	ip, [r2, #24]
    a79c:	e1a0135c 	asr	r1, ip, r3
    a7a0:	e3110001 	tst	r1, #1
    a7a4:	0a000003 	beq	a7b8 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x84>
    a7a8:	ea000016 	b	a808 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd4>
    a7ac:	e1a0135c 	asr	r1, ip, r3
    a7b0:	e3110001 	tst	r1, #1
    a7b4:	1a000013 	bne	a808 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xd4>
    a7b8:	e2433001 	sub	r3, r3, #1
    a7bc:	e1500003 	cmp	r0, r3
    a7c0:	dafffff9 	ble	a7ac <CMachineInfo::AllocateDMAChannel(unsigned int)+0x78>
    a7c4:	e59d4000 	ldr	r4, [sp]
    a7c8:	e28dd004 	add	sp, sp, #4
    a7cc:	e3a00080 	mov	r0, #128	; 0x80
    a7d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a7d4:	e3510007 	cmp	r1, #7
    a7d8:	8a000012 	bhi	a828 <CMachineInfo::AllocateDMAChannel(unsigned int)+0xf4>
    a7dc:	e1d321b8 	ldrh	r2, [r3, #24]
    a7e0:	e1a00152 	asr	r0, r2, r1
    a7e4:	e3100001 	tst	r0, #1
    a7e8:	0afffff5 	beq	a7c4 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x90>
    a7ec:	e3a0c001 	mov	ip, #1
    a7f0:	e1a00001 	mov	r0, r1
    a7f4:	e1c2211c 	bic	r2, r2, ip, lsl r1
    a7f8:	e1c321b8 	strh	r2, [r3, #24]
    a7fc:	e59d4000 	ldr	r4, [sp]
    a800:	e28dd004 	add	sp, sp, #4
    a804:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a808:	e3a01001 	mov	r1, #1
    a80c:	e1a00003 	mov	r0, r3
    a810:	e1cc3311 	bic	r3, ip, r1, lsl r3
    a814:	e1c231b8 	strh	r3, [r2, #24]
    a818:	eafffff7 	b	a7fc <CMachineInfo::AllocateDMAChannel(unsigned int)+0xc8>
    a81c:	e3a00000 	mov	r0, #0
    a820:	e3a03006 	mov	r3, #6
    a824:	eaffffdb 	b	a798 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x64>
    a828:	e59f1008 	ldr	r1, [pc, #8]	; a838 <CMachineInfo::AllocateDMAChannel(unsigned int)+0x104>
    a82c:	e30021e6 	movw	r2, #486	; 0x1e6
    a830:	e2810024 	add	r0, r1, #36	; 0x24
    a834:	ebfff7bc 	bl	872c <assertion_failed>
    a838:	000159ac 	.word	0x000159ac

0000a83c <CMachineInfo::FreeDMAChannel(unsigned int)>:
    a83c:	e309345c 	movw	r3, #37980	; 0x945c
    a840:	e3403001 	movt	r3, #1
    a844:	e52d4008 	str	r4, [sp, #-8]!
    a848:	e5933000 	ldr	r3, [r3]
    a84c:	e58de004 	str	lr, [sp, #4]
    a850:	ea000002 	b	a860 <CMachineInfo::FreeDMAChannel(unsigned int)+0x24>
    a854:	e1530000 	cmp	r3, r0
    a858:	0a000006 	beq	a878 <CMachineInfo::FreeDMAChannel(unsigned int)+0x3c>
    a85c:	e1a00003 	mov	r0, r3
    a860:	e3530000 	cmp	r3, #0
    a864:	1afffffa 	bne	a854 <CMachineInfo::FreeDMAChannel(unsigned int)+0x18>
    a868:	e59f1058 	ldr	r1, [pc, #88]	; a8c8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
    a86c:	e300220a 	movw	r2, #522	; 0x20a
    a870:	e2810014 	add	r0, r1, #20
    a874:	ebfff7ac 	bl	872c <assertion_failed>
    a878:	e3510007 	cmp	r1, #7
    a87c:	8a000009 	bhi	a8a8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x6c>
    a880:	e1d321b8 	ldrh	r2, [r3, #24]
    a884:	e1e00152 	mvn	r0, r2, asr r1
    a888:	e3100001 	tst	r0, #1
    a88c:	0a000009 	beq	a8b8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x7c>
    a890:	e3a00001 	mov	r0, #1
    a894:	e59d4000 	ldr	r4, [sp]
    a898:	e28dd004 	add	sp, sp, #4
    a89c:	e1821110 	orr	r1, r2, r0, lsl r1
    a8a0:	e1c311b8 	strh	r1, [r3, #24]
    a8a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a8a8:	e59f1018 	ldr	r1, [pc, #24]	; a8c8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
    a8ac:	e3002212 	movw	r2, #530	; 0x212
    a8b0:	e2810024 	add	r0, r1, #36	; 0x24
    a8b4:	ebfff79c 	bl	872c <assertion_failed>
    a8b8:	e59f1008 	ldr	r1, [pc, #8]	; a8c8 <CMachineInfo::FreeDMAChannel(unsigned int)+0x8c>
    a8bc:	e3002213 	movw	r2, #531	; 0x213
    a8c0:	e2810040 	add	r0, r1, #64	; 0x40
    a8c4:	ebfff798 	bl	872c <assertion_failed>
    a8c8:	000159ac 	.word	0x000159ac

0000a8cc <CMachineInfo::FetchDTB()>:
    a8cc:	e3a03000 	mov	r3, #0
    a8d0:	e16d41f0 	strd	r4, [sp, #-16]!
    a8d4:	e59350f8 	ldr	r5, [r3, #248]	; 0xf8
    a8d8:	e58d6008 	str	r6, [sp, #8]
    a8dc:	e58de00c 	str	lr, [sp, #12]
    a8e0:	e1550003 	cmp	r5, r3
    a8e4:	0a00000a 	beq	a914 <CMachineInfo::FetchDTB()+0x48>
    a8e8:	e590601c 	ldr	r6, [r0, #28]
    a8ec:	e1a04000 	mov	r4, r0
    a8f0:	e1560003 	cmp	r6, r3
    a8f4:	1a00000a 	bne	a924 <CMachineInfo::FetchDTB()+0x58>
    a8f8:	e3a00004 	mov	r0, #4
    a8fc:	eb001367 	bl	f6a0 <operator new(unsigned int)>
    a900:	e1a01005 	mov	r1, r5
    a904:	e1a05000 	mov	r5, r0
    a908:	eb001d2d 	bl	11dc4 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)>
    a90c:	e584501c 	str	r5, [r4, #28]
    a910:	e58660f8 	str	r6, [r6, #248]	; 0xf8
    a914:	e1cd40d0 	ldrd	r4, [sp]
    a918:	e59d6008 	ldr	r6, [sp, #8]
    a91c:	e28dd00c 	add	sp, sp, #12
    a920:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    a924:	e59f1008 	ldr	r1, [pc, #8]	; a934 <CMachineInfo::FetchDTB()+0x68>
    a928:	e300221e 	movw	r2, #542	; 0x21e
    a92c:	e2810068 	add	r0, r1, #104	; 0x68
    a930:	ebfff77d 	bl	872c <assertion_failed>
    a934:	000159ac 	.word	0x000159ac

0000a938 <CMachineInfo::GetPCIeDMAMemory() const>:
    a938:	e309345c 	movw	r3, #37980	; 0x945c
    a93c:	e3403001 	movt	r3, #1
    a940:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    a944:	e1a05000 	mov	r5, r0
    a948:	e5934000 	ldr	r4, [r3]
    a94c:	e1cd60f8 	strd	r6, [sp, #8]
    a950:	e1a06001 	mov	r6, r1
    a954:	e1cd81f0 	strd	r8, [sp, #16]
    a958:	e58da018 	str	sl, [sp, #24]
    a95c:	e58de01c 	str	lr, [sp, #28]
    a960:	e24dd010 	sub	sp, sp, #16
    a964:	ea000002 	b	a974 <CMachineInfo::GetPCIeDMAMemory() const+0x3c>
    a968:	e1540006 	cmp	r4, r6
    a96c:	0a000006 	beq	a98c <CMachineInfo::GetPCIeDMAMemory() const+0x54>
    a970:	e1a06004 	mov	r6, r4
    a974:	e3540000 	cmp	r4, #0
    a978:	1afffffa 	bne	a968 <CMachineInfo::GetPCIeDMAMemory() const+0x30>
    a97c:	e59f118c 	ldr	r1, [pc, #396]	; ab10 <CMachineInfo::GetPCIeDMAMemory() const+0x1d8>
    a980:	e3a02f8a 	mov	r2, #552	; 0x228
    a984:	e2810014 	add	r0, r1, #20
    a988:	ebfff767 	bl	872c <assertion_failed>
    a98c:	e594001c 	ldr	r0, [r4, #28]
    a990:	e3500000 	cmp	r0, #0
    a994:	0a00000e 	beq	a9d4 <CMachineInfo::GetPCIeDMAMemory() const+0x9c>
    a998:	e59f1174 	ldr	r1, [pc, #372]	; ab14 <CMachineInfo::GetPCIeDMAMemory() const+0x1dc>
    a99c:	e3a02000 	mov	r2, #0
    a9a0:	eb001d35 	bl	11e7c <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>
    a9a4:	e2501000 	subs	r1, r0, #0
    a9a8:	0a000009 	beq	a9d4 <CMachineInfo::GetPCIeDMAMemory() const+0x9c>
    a9ac:	e59f2164 	ldr	r2, [pc, #356]	; ab18 <CMachineInfo::GetPCIeDMAMemory() const+0x1e0>
    a9b0:	e594001c 	ldr	r0, [r4, #28]
    a9b4:	eb001de7 	bl	12158 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>
    a9b8:	e250a000 	subs	sl, r0, #0
    a9bc:	0a000004 	beq	a9d4 <CMachineInfo::GetPCIeDMAMemory() const+0x9c>
    a9c0:	e1a0100a 	mov	r1, sl
    a9c4:	e594001c 	ldr	r0, [r4, #28]
    a9c8:	eb001e37 	bl	122ac <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const>
    a9cc:	e350001c 	cmp	r0, #28
    a9d0:	0a00001b 	beq	aa44 <CMachineInfo::GetPCIeDMAMemory() const+0x10c>
    a9d4:	e5d60004 	ldrb	r0, [r6, #4]
    a9d8:	e3a03000 	mov	r3, #0
    a9dc:	e1a03a03 	lsl	r3, r3, #20
    a9e0:	e5961014 	ldr	r1, [r6, #20]
    a9e4:	e350000f 	cmp	r0, #15
    a9e8:	e1833621 	orr	r3, r3, r1, lsr #12
    a9ec:	e1a02a01 	lsl	r2, r1, #20
    a9f0:	0a00000e 	beq	aa30 <CMachineInfo::GetPCIeDMAMemory() const+0xf8>
    a9f4:	e3510a01 	cmp	r1, #4096	; 0x1000
    a9f8:	2ddf1b42 	vldrcs	d17, [pc, #264]	; ab08 <CMachineInfo::GetPCIeDMAMemory() const+0x1d0>
    a9fc:	3a00000e 	bcc	aa3c <CMachineInfo::GetPCIeDMAMemory() const+0x104>
    aa00:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    aa04:	edc51b00 	vstr	d17, [r5]
    aa08:	edc50b02 	vstr	d16, [r5, #8]
    aa0c:	e1c521f0 	strd	r2, [r5, #16]
    aa10:	e1a00005 	mov	r0, r5
    aa14:	e28dd010 	add	sp, sp, #16
    aa18:	e1cd40d0 	ldrd	r4, [sp]
    aa1c:	e1cd60d8 	ldrd	r6, [sp, #8]
    aa20:	e1cd81d0 	ldrd	r8, [sp, #16]
    aa24:	e59da018 	ldr	sl, [sp, #24]
    aa28:	e28dd01c 	add	sp, sp, #28
    aa2c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    aa30:	e596000c 	ldr	r0, [r6, #12]
    aa34:	e3500004 	cmp	r0, #4
    aa38:	8affffed 	bhi	a9f4 <CMachineInfo::GetPCIeDMAMemory() const+0xbc>
    aa3c:	f2c01010 	vmov.i32	d17, #0	; 0x00000000
    aa40:	eaffffee 	b	aa00 <CMachineInfo::GetPCIeDMAMemory() const+0xc8>
    aa44:	f2c00010 	vmov.i32	d16, #0	; 0x00000000
    aa48:	e3a02001 	mov	r2, #1
    aa4c:	e1a0100a 	mov	r1, sl
    aa50:	e594001c 	ldr	r0, [r4, #28]
    aa54:	edcd0b00 	vstr	d16, [sp]
    aa58:	eb001e2e 	bl	12318 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
    aa5c:	e1a03000 	mov	r3, r0
    aa60:	e3a02002 	mov	r2, #2
    aa64:	e594001c 	ldr	r0, [r4, #28]
    aa68:	e1a0100a 	mov	r1, sl
    aa6c:	e58d3004 	str	r3, [sp, #4]
    aa70:	e3a03000 	mov	r3, #0
    aa74:	e58d3000 	str	r3, [sp]
    aa78:	eb001e26 	bl	12318 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
    aa7c:	e1cd60d0 	ldrd	r6, [sp]
    aa80:	e1a03000 	mov	r3, r0
    aa84:	e3a02003 	mov	r2, #3
    aa88:	e1a0100a 	mov	r1, sl
    aa8c:	e594001c 	ldr	r0, [r4, #28]
    aa90:	e1866003 	orr	r6, r6, r3
    aa94:	e1cd60f8 	strd	r6, [sp, #8]
    aa98:	eb001e1e 	bl	12318 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
    aa9c:	e1a09000 	mov	r9, r0
    aaa0:	e3a02004 	mov	r2, #4
    aaa4:	e594001c 	ldr	r0, [r4, #28]
    aaa8:	e1a0100a 	mov	r1, sl
    aaac:	eb001e19 	bl	12318 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
    aab0:	e59d8000 	ldr	r8, [sp]
    aab4:	e1a03000 	mov	r3, r0
    aab8:	e3a02005 	mov	r2, #5
    aabc:	e1a0100a 	mov	r1, sl
    aac0:	e594001c 	ldr	r0, [r4, #28]
    aac4:	e1888003 	orr	r8, r8, r3
    aac8:	eb001e12 	bl	12318 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
    aacc:	e1a03000 	mov	r3, r0
    aad0:	e3a02006 	mov	r2, #6
    aad4:	e594001c 	ldr	r0, [r4, #28]
    aad8:	e1a0100a 	mov	r1, sl
    aadc:	e1a04003 	mov	r4, r3
    aae0:	eb001e0c 	bl	12318 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>
    aae4:	e59d2000 	ldr	r2, [sp]
    aae8:	e1a03004 	mov	r3, r4
    aaec:	e1c580f8 	strd	r8, [r5, #8]
    aaf0:	e1cd60d8 	ldrd	r6, [sp, #8]
    aaf4:	e1822000 	orr	r2, r2, r0
    aaf8:	e1c560f0 	strd	r6, [r5]
    aafc:	e1c521f0 	strd	r2, [r5, #16]
    ab00:	eaffffc2 	b	aa10 <CMachineInfo::GetPCIeDMAMemory() const+0xd8>
    ab04:	e320f000 	nop	{0}
    ab08:	00000000 	.word	0x00000000
    ab0c:	00000004 	.word	0x00000004
    ab10:	000159ac 	.word	0x000159ac
    ab14:	00015a20 	.word	0x00015a20
    ab18:	00015a34 	.word	0x00015a34

0000ab1c <CMachineInfo::Get()>:
    ab1c:	e309345c 	movw	r3, #37980	; 0x945c
    ab20:	e3403001 	movt	r3, #1
    ab24:	e5930000 	ldr	r0, [r3]
    ab28:	e3500000 	cmp	r0, #0
    ab2c:	112fff1e 	bxne	lr
    ab30:	e300225a 	movw	r2, #602	; 0x25a
    ab34:	e52d4008 	str	r4, [sp, #-8]!
    ab38:	e59f1008 	ldr	r1, [pc, #8]	; ab48 <CMachineInfo::Get()+0x2c>
    ab3c:	e58de004 	str	lr, [sp, #4]
    ab40:	e2810014 	add	r0, r1, #20
    ab44:	ebfff6f8 	bl	872c <assertion_failed>
    ab48:	000159ac 	.word	0x000159ac

0000ab4c <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)>:
    ab4c:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    ab50:	e1a04000 	mov	r4, r0
    ab54:	e3a05000 	mov	r5, #0
    ab58:	e1cd60f8 	strd	r6, [sp, #8]
    ab5c:	e1a07002 	mov	r7, r2
    ab60:	e1a06003 	mov	r6, r3
    ab64:	e1cd81f0 	strd	r8, [sp, #16]
    ab68:	e1a09001 	mov	r9, r1
    ab6c:	e58da018 	str	sl, [sp, #24]
    ab70:	e58de01c 	str	lr, [sp, #28]
    ab74:	e59d8020 	ldr	r8, [sp, #32]
    ab78:	eb0020f7 	bl	12f5c <CDevice::CDevice()>
    ab7c:	e59f3078 	ldr	r3, [pc, #120]	; abfc <CScreenDevice::CScreenDevice(unsigned int, unsigned int, bool, unsigned int)+0xb0>
    ab80:	e2840020 	add	r0, r4, #32
    ab84:	e584501c 	str	r5, [r4, #28]
    ab88:	e5843000 	str	r3, [r4]
    ab8c:	e584900c 	str	r9, [r4, #12]
    ab90:	e5847010 	str	r7, [r4, #16]
    ab94:	e3a07001 	mov	r7, #1
    ab98:	e5c46014 	strb	r6, [r4, #20]
    ab9c:	e5848018 	str	r8, [r4, #24]
    aba0:	eb00209a 	bl	12e10 <CCharGenerator::CCharGenerator()>
    aba4:	e3e03020 	mvn	r3, #32
    aba8:	e1a02005 	mov	r2, r5
    abac:	e5845024 	str	r5, [r4, #36]	; 0x24
    abb0:	e2840064 	add	r0, r4, #100	; 0x64
    abb4:	e3a01081 	mov	r1, #129	; 0x81
    abb8:	e584503c 	str	r5, [r4, #60]	; 0x3c
    abbc:	e5845040 	str	r5, [r4, #64]	; 0x40
    abc0:	e5845048 	str	r5, [r4, #72]	; 0x48
    abc4:	e584504c 	str	r5, [r4, #76]	; 0x4c
    abc8:	e5c47050 	strb	r7, [r4, #80]	; 0x50
    abcc:	e1c435b2 	strh	r3, [r4, #82]	; 0x52
    abd0:	e5845054 	str	r5, [r4, #84]	; 0x54
    abd4:	e5c45060 	strb	r5, [r4, #96]	; 0x60
    abd8:	eb0020e7 	bl	12f7c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>
    abdc:	e1a00004 	mov	r0, r4
    abe0:	e1cd81d0 	ldrd	r8, [sp, #16]
    abe4:	e59da018 	ldr	sl, [sp, #24]
    abe8:	e5847090 	str	r7, [r4, #144]	; 0x90
    abec:	e1cd40d0 	ldrd	r4, [sp]
    abf0:	e1cd60d8 	ldrd	r6, [sp, #8]
    abf4:	e28dd01c 	add	sp, sp, #28
    abf8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    abfc:	00015a48 	.word	0x00015a48

0000ac00 <CScreenDevice::~CScreenDevice()>:
    ac00:	e5d03014 	ldrb	r3, [r0, #20]
    ac04:	e16d41f0 	strd	r4, [sp, #-16]!
    ac08:	e1a04000 	mov	r4, r0
    ac0c:	e59f207c 	ldr	r2, [pc, #124]	; ac90 <CScreenDevice::~CScreenDevice()+0x90>
    ac10:	e58d6008 	str	r6, [sp, #8]
    ac14:	e58de00c 	str	lr, [sp, #12]
    ac18:	e3530000 	cmp	r3, #0
    ac1c:	e5802000 	str	r2, [r0]
    ac20:	0a000003 	beq	ac34 <CScreenDevice::~CScreenDevice()+0x34>
    ac24:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    ac28:	e3500000 	cmp	r0, #0
    ac2c:	0a000000 	beq	ac34 <CScreenDevice::~CScreenDevice()+0x34>
    ac30:	eb0012ab 	bl	f6e4 <operator delete[](void*)>
    ac34:	e594501c 	ldr	r5, [r4, #28]
    ac38:	e3a03000 	mov	r3, #0
    ac3c:	e5843024 	str	r3, [r4, #36]	; 0x24
    ac40:	e1550003 	cmp	r5, r3
    ac44:	0a000004 	beq	ac5c <CScreenDevice::~CScreenDevice()+0x5c>
    ac48:	e1a00005 	mov	r0, r5
    ac4c:	eb001e9a 	bl	126bc <CBcmFrameBuffer::~CBcmFrameBuffer()>
    ac50:	e1a00005 	mov	r0, r5
    ac54:	e3a01098 	mov	r1, #152	; 0x98
    ac58:	eb0012ab 	bl	f70c <operator delete(void*, unsigned int)>
    ac5c:	e3a03000 	mov	r3, #0
    ac60:	e2840064 	add	r0, r4, #100	; 0x64
    ac64:	e584301c 	str	r3, [r4, #28]
    ac68:	eb00211b 	bl	130dc <CDMAChannel::~CDMAChannel()>
    ac6c:	e2840020 	add	r0, r4, #32
    ac70:	eb002069 	bl	12e1c <CCharGenerator::~CCharGenerator()>
    ac74:	e1a00004 	mov	r0, r4
    ac78:	eb00208f 	bl	12ebc <CDevice::~CDevice()>
    ac7c:	e1a00004 	mov	r0, r4
    ac80:	e1cd40d0 	ldrd	r4, [sp]
    ac84:	e59d6008 	ldr	r6, [sp, #8]
    ac88:	e28dd00c 	add	sp, sp, #12
    ac8c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ac90:	00015a48 	.word	0x00015a48

0000ac94 <CScreenDevice::~CScreenDevice()>:
    ac94:	e52d4008 	str	r4, [sp, #-8]!
    ac98:	e1a04000 	mov	r4, r0
    ac9c:	e58de004 	str	lr, [sp, #4]
    aca0:	ebffffd6 	bl	ac00 <CScreenDevice::~CScreenDevice()>
    aca4:	e1a00004 	mov	r0, r4
    aca8:	e3a01094 	mov	r1, #148	; 0x94
    acac:	eb001296 	bl	f70c <operator delete(void*, unsigned int)>
    acb0:	e1a00004 	mov	r0, r4
    acb4:	e59d4000 	ldr	r4, [sp]
    acb8:	e28dd004 	add	sp, sp, #4
    acbc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000acc0 <CScreenDevice::Initialize()>:
    acc0:	e16d41f0 	strd	r4, [sp, #-16]!
    acc4:	e1a04000 	mov	r4, r0
    acc8:	e5d05014 	ldrb	r5, [r0, #20]
    accc:	e58d6008 	str	r6, [sp, #8]
    acd0:	e58de00c 	str	lr, [sp, #12]
    acd4:	e24dd010 	sub	sp, sp, #16
    acd8:	e3550000 	cmp	r5, #0
    acdc:	0a000033 	beq	adb0 <CScreenDevice::Initialize()+0xf0>
    ace0:	e590300c 	ldr	r3, [r0, #12]
    ace4:	e5902010 	ldr	r2, [r0, #16]
    ace8:	e580302c 	str	r3, [r0, #44]	; 0x2c
    acec:	e5803030 	str	r3, [r0, #48]	; 0x30
    acf0:	e0030392 	mul	r3, r2, r3
    acf4:	e5802034 	str	r2, [r0, #52]	; 0x34
    acf8:	e1a02083 	lsl	r2, r3, #1
    acfc:	e373010f 	cmn	r3, #-1073741821	; 0xc0000003
    ad00:	23e00000 	mvncs	r0, #0
    ad04:	31a00002 	movcc	r0, r2
    ad08:	e5842028 	str	r2, [r4, #40]	; 0x28
    ad0c:	eb001269 	bl	f6b8 <operator new[](unsigned int)>
    ad10:	e5946034 	ldr	r6, [r4, #52]	; 0x34
    ad14:	e5840024 	str	r0, [r4, #36]	; 0x24
    ad18:	e2845020 	add	r5, r4, #32
    ad1c:	e1a00005 	mov	r0, r5
    ad20:	eb002040 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    ad24:	e1a03000 	mov	r3, r0
    ad28:	e1a00005 	mov	r0, r5
    ad2c:	e736f316 	udiv	r6, r6, r3
    ad30:	eb00203c 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    ad34:	e1a03000 	mov	r3, r0
    ad38:	e5942040 	ldr	r2, [r4, #64]	; 0x40
    ad3c:	e3a01000 	mov	r1, #0
    ad40:	e1a00004 	mov	r0, r4
    ad44:	e5841048 	str	r1, [r4, #72]	; 0x48
    ad48:	e0030693 	mul	r3, r3, r6
    ad4c:	e5843038 	str	r3, [r4, #56]	; 0x38
    ad50:	e5843044 	str	r3, [r4, #68]	; 0x44
    ad54:	e584204c 	str	r2, [r4, #76]	; 0x4c
    ad58:	eb000241 	bl	b664 <CScreenDevice::ClearDisplayEnd()>
    ad5c:	e5d43050 	ldrb	r3, [r4, #80]	; 0x50
    ad60:	e3530000 	cmp	r3, #0
    ad64:	1a00000e 	bne	ada4 <CScreenDevice::Initialize()+0xe4>
    ad68:	ebfff8aa 	bl	9018 <CDeviceNameService::Get()>
    ad6c:	e5942018 	ldr	r2, [r4, #24]
    ad70:	e3a01000 	mov	r1, #0
    ad74:	e3a05001 	mov	r5, #1
    ad78:	e1a03004 	mov	r3, r4
    ad7c:	e58d1000 	str	r1, [sp]
    ad80:	e59f10e4 	ldr	r1, [pc, #228]	; ae6c <CScreenDevice::Initialize()+0x1ac>
    ad84:	e0822005 	add	r2, r2, r5
    ad88:	ebfff765 	bl	8b24 <CDeviceNameService::AddDevice(char const*, unsigned int, CDevice*, bool)>
    ad8c:	e1a00005 	mov	r0, r5
    ad90:	e28dd010 	add	sp, sp, #16
    ad94:	e1cd40d0 	ldrd	r4, [sp]
    ad98:	e59d6008 	ldr	r6, [sp, #8]
    ad9c:	e28dd00c 	add	sp, sp, #12
    ada0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ada4:	e1a00004 	mov	r0, r4
    ada8:	eb0004da 	bl	c118 <CScreenDevice::InvertCursor() [clone .part.0]>
    adac:	eaffffed 	b	ad68 <CScreenDevice::Initialize()+0xa8>
    adb0:	e3a00098 	mov	r0, #152	; 0x98
    adb4:	eb001239 	bl	f6a0 <operator new(unsigned int)>
    adb8:	e5942018 	ldr	r2, [r4, #24]
    adbc:	e1a06000 	mov	r6, r0
    adc0:	e3a03010 	mov	r3, #16
    adc4:	e58d5000 	str	r5, [sp]
    adc8:	e58d5004 	str	r5, [sp, #4]
    adcc:	e58d500c 	str	r5, [sp, #12]
    add0:	e594100c 	ldr	r1, [r4, #12]
    add4:	e58d2008 	str	r2, [sp, #8]
    add8:	e5942010 	ldr	r2, [r4, #16]
    addc:	eb001dc6 	bl	124fc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>
    ade0:	e1a00006 	mov	r0, r6
    ade4:	e584601c 	str	r6, [r4, #28]
    ade8:	eb001e55 	bl	12744 <CBcmFrameBuffer::Initialize()>
    adec:	e3500000 	cmp	r0, #0
    adf0:	0affffe5 	beq	ad8c <CScreenDevice::Initialize()+0xcc>
    adf4:	e594001c 	ldr	r0, [r4, #28]
    adf8:	eb001ea2 	bl	12888 <CBcmFrameBuffer::GetDepth() const>
    adfc:	e3500010 	cmp	r0, #16
    ae00:	1affffe1 	bne	ad8c <CScreenDevice::Initialize()+0xcc>
    ae04:	e594001c 	ldr	r0, [r4, #28]
    ae08:	eb001ea0 	bl	12890 <CBcmFrameBuffer::GetBuffer() const>
    ae0c:	e1a03000 	mov	r3, r0
    ae10:	e594001c 	ldr	r0, [r4, #28]
    ae14:	e5843024 	str	r3, [r4, #36]	; 0x24
    ae18:	eb001e9e 	bl	12898 <CBcmFrameBuffer::GetSize() const>
    ae1c:	e1a03000 	mov	r3, r0
    ae20:	e594001c 	ldr	r0, [r4, #28]
    ae24:	e5843028 	str	r3, [r4, #40]	; 0x28
    ae28:	eb001e94 	bl	12880 <CBcmFrameBuffer::GetPitch() const>
    ae2c:	e1a03000 	mov	r3, r0
    ae30:	e594001c 	ldr	r0, [r4, #28]
    ae34:	e584302c 	str	r3, [r4, #44]	; 0x2c
    ae38:	eb001e88 	bl	12860 <CBcmFrameBuffer::GetWidth() const>
    ae3c:	e1a03000 	mov	r3, r0
    ae40:	e594001c 	ldr	r0, [r4, #28]
    ae44:	e5843030 	str	r3, [r4, #48]	; 0x30
    ae48:	eb001e86 	bl	12868 <CBcmFrameBuffer::GetHeight() const>
    ae4c:	e594302c 	ldr	r3, [r4, #44]	; 0x2c
    ae50:	e1a06000 	mov	r6, r0
    ae54:	e5840034 	str	r0, [r4, #52]	; 0x34
    ae58:	e3130003 	tst	r3, #3
    ae5c:	1affffca 	bne	ad8c <CScreenDevice::Initialize()+0xcc>
    ae60:	e1a030a3 	lsr	r3, r3, #1
    ae64:	e584302c 	str	r3, [r4, #44]	; 0x2c
    ae68:	eaffffaa 	b	ad18 <CScreenDevice::Initialize()+0x58>
    ae6c:	00015a60 	.word	0x00015a60

0000ae70 <CScreenDevice::GetWidth() const>:
    ae70:	e5900030 	ldr	r0, [r0, #48]	; 0x30
    ae74:	e12fff1e 	bx	lr

0000ae78 <CScreenDevice::GetHeight() const>:
    ae78:	e5900034 	ldr	r0, [r0, #52]	; 0x34
    ae7c:	e12fff1e 	bx	lr

0000ae80 <CScreenDevice::GetColumns() const>:
    ae80:	e52d4008 	str	r4, [sp, #-8]!
    ae84:	e2800020 	add	r0, r0, #32
    ae88:	e5904010 	ldr	r4, [r0, #16]
    ae8c:	e58de004 	str	lr, [sp, #4]
    ae90:	eb001fe2 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    ae94:	e730f014 	udiv	r0, r4, r0
    ae98:	e59d4000 	ldr	r4, [sp]
    ae9c:	e28dd004 	add	sp, sp, #4
    aea0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000aea4 <CScreenDevice::GetRows() const>:
    aea4:	e52d4008 	str	r4, [sp, #-8]!
    aea8:	e2800020 	add	r0, r0, #32
    aeac:	e5904018 	ldr	r4, [r0, #24]
    aeb0:	e58de004 	str	lr, [sp, #4]
    aeb4:	eb001fdb 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    aeb8:	e730f014 	udiv	r0, r4, r0
    aebc:	e59d4000 	ldr	r4, [sp]
    aec0:	e28dd004 	add	sp, sp, #4
    aec4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000aec8 <CScreenDevice::GetFrameBuffer()>:
    aec8:	e590001c 	ldr	r0, [r0, #28]
    aecc:	e12fff1e 	bx	lr

0000aed0 <CScreenDevice::GetStatus()>:
    aed0:	e5d12050 	ldrb	r2, [r1, #80]	; 0x50
    aed4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    aed8:	e1d1c5b2 	ldrh	ip, [r1, #82]	; 0x52
    aedc:	e591e024 	ldr	lr, [r1, #36]	; 0x24
    aee0:	e5c0201c 	strb	r2, [r0, #28]
    aee4:	e5d12060 	ldrb	r2, [r1, #96]	; 0x60
    aee8:	e580e000 	str	lr, [r0]
    aeec:	e1c0c1be 	strh	ip, [r0, #30]
    aef0:	e591e028 	ldr	lr, [r1, #40]	; 0x28
    aef4:	e591c03c 	ldr	ip, [r1, #60]	; 0x3c
    aef8:	e5c0202c 	strb	r2, [r0, #44]	; 0x2c
    aefc:	e5912040 	ldr	r2, [r1, #64]	; 0x40
    af00:	e580e004 	str	lr, [r0, #4]
    af04:	e580c008 	str	ip, [r0, #8]
    af08:	e591e044 	ldr	lr, [r1, #68]	; 0x44
    af0c:	e580200c 	str	r2, [r0, #12]
    af10:	e591c048 	ldr	ip, [r1, #72]	; 0x48
    af14:	e591204c 	ldr	r2, [r1, #76]	; 0x4c
    af18:	e580e010 	str	lr, [r0, #16]
    af1c:	e591e054 	ldr	lr, [r1, #84]	; 0x54
    af20:	e580c014 	str	ip, [r0, #20]
    af24:	e591c058 	ldr	ip, [r1, #88]	; 0x58
    af28:	e5802018 	str	r2, [r0, #24]
    af2c:	e591205c 	ldr	r2, [r1, #92]	; 0x5c
    af30:	e580e020 	str	lr, [r0, #32]
    af34:	e580c024 	str	ip, [r0, #36]	; 0x24
    af38:	e5802028 	str	r2, [r0, #40]	; 0x28
    af3c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000af40 <CScreenDevice::SetStatus(TScreenStatus const&)>:
    af40:	e5913004 	ldr	r3, [r1, #4]
    af44:	e5902028 	ldr	r2, [r0, #40]	; 0x28
    af48:	e1520003 	cmp	r2, r3
    af4c:	0a000001 	beq	af58 <CScreenDevice::SetStatus(TScreenStatus const&)+0x18>
    af50:	e3a00000 	mov	r0, #0
    af54:	e12fff1e 	bx	lr
    af58:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    af5c:	e1a05001 	mov	r5, r1
    af60:	e1a04000 	mov	r4, r0
    af64:	e590102c 	ldr	r1, [r0, #44]	; 0x2c
    af68:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    af6c:	e1cd60f8 	strd	r6, [sp, #8]
    af70:	e58d8010 	str	r8, [sp, #16]
    af74:	e58de014 	str	lr, [sp, #20]
    af78:	e1510003 	cmp	r1, r3
    af7c:	1a000033 	bne	b050 <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
    af80:	e5900090 	ldr	r0, [r0, #144]	; 0x90
    af84:	e3500000 	cmp	r0, #0
    af88:	1a000025 	bne	b024 <CScreenDevice::SetStatus(TScreenStatus const&)+0xe4>
    af8c:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    af90:	e3530000 	cmp	r3, #0
    af94:	1a00002d 	bne	b050 <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
    af98:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    af9c:	e3530000 	cmp	r3, #0
    afa0:	1a00002a 	bne	b050 <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
    afa4:	e5951000 	ldr	r1, [r5]
    afa8:	e5940024 	ldr	r0, [r4, #36]	; 0x24
    afac:	eb00111d 	bl	f428 <memcpy>
    afb0:	e5943090 	ldr	r3, [r4, #144]	; 0x90
    afb4:	e5d5201c 	ldrb	r2, [r5, #28]
    afb8:	e1d5e1be 	ldrh	lr, [r5, #30]
    afbc:	e3530000 	cmp	r3, #0
    afc0:	e5953008 	ldr	r3, [r5, #8]
    afc4:	e1d5c2b0 	ldrh	ip, [r5, #32]
    afc8:	e5d50022 	ldrb	r0, [r5, #34]	; 0x22
    afcc:	e5d51023 	ldrb	r1, [r5, #35]	; 0x23
    afd0:	e5957010 	ldr	r7, [r5, #16]
    afd4:	e5956018 	ldr	r6, [r5, #24]
    afd8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    afdc:	e595300c 	ldr	r3, [r5, #12]
    afe0:	e5843040 	str	r3, [r4, #64]	; 0x40
    afe4:	e5953014 	ldr	r3, [r5, #20]
    afe8:	e5847044 	str	r7, [r4, #68]	; 0x44
    afec:	e5c42050 	strb	r2, [r4, #80]	; 0x50
    aff0:	e5952024 	ldr	r2, [r5, #36]	; 0x24
    aff4:	e5843048 	str	r3, [r4, #72]	; 0x48
    aff8:	e5953028 	ldr	r3, [r5, #40]	; 0x28
    affc:	e584604c 	str	r6, [r4, #76]	; 0x4c
    b000:	e1c4e5b2 	strh	lr, [r4, #82]	; 0x52
    b004:	e1c4c5b4 	strh	ip, [r4, #84]	; 0x54
    b008:	e5c40056 	strb	r0, [r4, #86]	; 0x56
    b00c:	e5c41057 	strb	r1, [r4, #87]	; 0x57
    b010:	e1c425f8 	strd	r2, [r4, #88]	; 0x58
    b014:	1a000015 	bne	b070 <CScreenDevice::SetStatus(TScreenStatus const&)+0x130>
    b018:	f57ff05f 	dmb	sy
    b01c:	e3a00001 	mov	r0, #1
    b020:	ea00000b 	b	b054 <CScreenDevice::SetStatus(TScreenStatus const&)+0x114>
    b024:	eb00191f 	bl	114a8 <EnterCritical>
    b028:	e5d43060 	ldrb	r3, [r4, #96]	; 0x60
    b02c:	e3530000 	cmp	r3, #0
    b030:	1a000002 	bne	b040 <CScreenDevice::SetStatus(TScreenStatus const&)+0x100>
    b034:	e5d5302c 	ldrb	r3, [r5, #44]	; 0x2c
    b038:	e3530000 	cmp	r3, #0
    b03c:	0a000009 	beq	b068 <CScreenDevice::SetStatus(TScreenStatus const&)+0x128>
    b040:	e5943090 	ldr	r3, [r4, #144]	; 0x90
    b044:	e3530000 	cmp	r3, #0
    b048:	0a000000 	beq	b050 <CScreenDevice::SetStatus(TScreenStatus const&)+0x110>
    b04c:	eb001943 	bl	11560 <LeaveCritical>
    b050:	e3a00000 	mov	r0, #0
    b054:	e1cd40d0 	ldrd	r4, [sp]
    b058:	e1cd60d8 	ldrd	r6, [sp, #8]
    b05c:	e59d8010 	ldr	r8, [sp, #16]
    b060:	e28dd014 	add	sp, sp, #20
    b064:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b068:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    b06c:	eaffffcc 	b	afa4 <CScreenDevice::SetStatus(TScreenStatus const&)+0x64>
    b070:	eb00193a 	bl	11560 <LeaveCritical>
    b074:	eaffffe7 	b	b018 <CScreenDevice::SetStatus(TScreenStatus const&)+0xd8>

0000b078 <CScreenDevice::Write(void const*, unsigned int)>:
    b078:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    b07c:	e1a05000 	mov	r5, r0
    b080:	e1a04001 	mov	r4, r1
    b084:	e5900090 	ldr	r0, [r0, #144]	; 0x90
    b088:	e1cd60f8 	strd	r6, [sp, #8]
    b08c:	e1a07002 	mov	r7, r2
    b090:	e58d8010 	str	r8, [sp, #16]
    b094:	e58de014 	str	lr, [sp, #20]
    b098:	e3500000 	cmp	r0, #0
    b09c:	1a000025 	bne	b138 <CScreenDevice::Write(void const*, unsigned int)+0xc0>
    b0a0:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    b0a4:	e3a02001 	mov	r2, #1
    b0a8:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    b0ac:	e3530000 	cmp	r3, #0
    b0b0:	1a00001a 	bne	b120 <CScreenDevice::Write(void const*, unsigned int)+0xa8>
    b0b4:	e3570000 	cmp	r7, #0
    b0b8:	e2473001 	sub	r3, r7, #1
    b0bc:	0a00000b 	beq	b0f0 <CScreenDevice::Write(void const*, unsigned int)+0x78>
    b0c0:	e2837001 	add	r7, r3, #1
    b0c4:	e0846007 	add	r6, r4, r7
    b0c8:	e0d410d1 	ldrsb	r1, [r4], #1
    b0cc:	e1a00005 	mov	r0, r5
    b0d0:	eb00001c 	bl	b148 <CScreenDevice::Write(char)>
    b0d4:	e1540006 	cmp	r4, r6
    b0d8:	1afffffa 	bne	b0c8 <CScreenDevice::Write(void const*, unsigned int)+0x50>
    b0dc:	e5d53050 	ldrb	r3, [r5, #80]	; 0x50
    b0e0:	e3530000 	cmp	r3, #0
    b0e4:	0a000001 	beq	b0f0 <CScreenDevice::Write(void const*, unsigned int)+0x78>
    b0e8:	e1a00005 	mov	r0, r5
    b0ec:	eb000409 	bl	c118 <CScreenDevice::InvertCursor() [clone .part.0]>
    b0f0:	e5953090 	ldr	r3, [r5, #144]	; 0x90
    b0f4:	e3a02000 	mov	r2, #0
    b0f8:	e5c52060 	strb	r2, [r5, #96]	; 0x60
    b0fc:	e1530002 	cmp	r3, r2
    b100:	1a00000e 	bne	b140 <CScreenDevice::Write(void const*, unsigned int)+0xc8>
    b104:	f57ff05f 	dmb	sy
    b108:	e1a00007 	mov	r0, r7
    b10c:	e1cd40d0 	ldrd	r4, [sp]
    b110:	e1cd60d8 	ldrd	r6, [sp, #8]
    b114:	e59d8010 	ldr	r8, [sp, #16]
    b118:	e28dd014 	add	sp, sp, #20
    b11c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b120:	e1a00005 	mov	r0, r5
    b124:	eb0003fb 	bl	c118 <CScreenDevice::InvertCursor() [clone .part.0]>
    b128:	e3570000 	cmp	r7, #0
    b12c:	e2473001 	sub	r3, r7, #1
    b130:	1affffe2 	bne	b0c0 <CScreenDevice::Write(void const*, unsigned int)+0x48>
    b134:	eaffffe8 	b	b0dc <CScreenDevice::Write(void const*, unsigned int)+0x64>
    b138:	eb0018da 	bl	114a8 <EnterCritical>
    b13c:	eaffffd7 	b	b0a0 <CScreenDevice::Write(void const*, unsigned int)+0x28>
    b140:	eb001906 	bl	11560 <LeaveCritical>
    b144:	eaffffee 	b	b104 <CScreenDevice::Write(void const*, unsigned int)+0x8c>

0000b148 <CScreenDevice::Write(char)>:
    b148:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    b14c:	e52d4008 	str	r4, [sp, #-8]!
    b150:	e1a04000 	mov	r4, r0
    b154:	e58de004 	str	lr, [sp, #4]
    b158:	e3530007 	cmp	r3, #7
    b15c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b160:	ea000047 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b164:	0000b298 	.word	0x0000b298
    b168:	0000b388 	.word	0x0000b388
    b16c:	0000b2f8 	.word	0x0000b2f8
    b170:	0000b184 	.word	0x0000b184
    b174:	0000b39c 	.word	0x0000b39c
    b178:	0000b3bc 	.word	0x0000b3bc
    b17c:	0000b3dc 	.word	0x0000b3dc
    b180:	0000b350 	.word	0x0000b350
    b184:	e241303b 	sub	r3, r1, #59	; 0x3b
    b188:	e3530032 	cmp	r3, #50	; 0x32
    b18c:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b190:	ea000071 	b	b35c <CScreenDevice::Write(char)+0x214>
    b194:	0000b4c4 	.word	0x0000b4c4
    b198:	0000b35c 	.word	0x0000b35c
    b19c:	0000b35c 	.word	0x0000b35c
    b1a0:	0000b35c 	.word	0x0000b35c
    b1a4:	0000b35c 	.word	0x0000b35c
    b1a8:	0000b35c 	.word	0x0000b35c
    b1ac:	0000b35c 	.word	0x0000b35c
    b1b0:	0000b35c 	.word	0x0000b35c
    b1b4:	0000b35c 	.word	0x0000b35c
    b1b8:	0000b35c 	.word	0x0000b35c
    b1bc:	0000b35c 	.word	0x0000b35c
    b1c0:	0000b35c 	.word	0x0000b35c
    b1c4:	0000b35c 	.word	0x0000b35c
    b1c8:	0000b35c 	.word	0x0000b35c
    b1cc:	0000b35c 	.word	0x0000b35c
    b1d0:	0000b35c 	.word	0x0000b35c
    b1d4:	0000b35c 	.word	0x0000b35c
    b1d8:	0000b284 	.word	0x0000b284
    b1dc:	0000b284 	.word	0x0000b284
    b1e0:	0000b35c 	.word	0x0000b35c
    b1e4:	0000b35c 	.word	0x0000b35c
    b1e8:	0000b284 	.word	0x0000b284
    b1ec:	0000b35c 	.word	0x0000b35c
    b1f0:	0000b35c 	.word	0x0000b35c
    b1f4:	0000b35c 	.word	0x0000b35c
    b1f8:	0000b35c 	.word	0x0000b35c
    b1fc:	0000b35c 	.word	0x0000b35c
    b200:	0000b35c 	.word	0x0000b35c
    b204:	0000b35c 	.word	0x0000b35c
    b208:	0000b550 	.word	0x0000b550
    b20c:	0000b35c 	.word	0x0000b35c
    b210:	0000b35c 	.word	0x0000b35c
    b214:	0000b35c 	.word	0x0000b35c
    b218:	0000b35c 	.word	0x0000b35c
    b21c:	0000b35c 	.word	0x0000b35c
    b220:	0000b35c 	.word	0x0000b35c
    b224:	0000b35c 	.word	0x0000b35c
    b228:	0000b35c 	.word	0x0000b35c
    b22c:	0000b35c 	.word	0x0000b35c
    b230:	0000b35c 	.word	0x0000b35c
    b234:	0000b35c 	.word	0x0000b35c
    b238:	0000b35c 	.word	0x0000b35c
    b23c:	0000b35c 	.word	0x0000b35c
    b240:	0000b35c 	.word	0x0000b35c
    b244:	0000b35c 	.word	0x0000b35c
    b248:	0000b4a4 	.word	0x0000b4a4
    b24c:	0000b35c 	.word	0x0000b35c
    b250:	0000b35c 	.word	0x0000b35c
    b254:	0000b35c 	.word	0x0000b35c
    b258:	0000b4a4 	.word	0x0000b4a4
    b25c:	0000b4d0 	.word	0x0000b4d0
    b260:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b264:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    b268:	e1520003 	cmp	r2, r3
    b26c:	9a000004 	bls	b284 <CScreenDevice::Write(char)+0x13c>
    b270:	e2800020 	add	r0, r0, #32
    b274:	eb001eeb 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    b278:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b27c:	e0433000 	sub	r3, r3, r0
    b280:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b284:	e3a03000 	mov	r3, #0
    b288:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b28c:	e59d4000 	ldr	r4, [sp]
    b290:	e28dd004 	add	sp, sp, #4
    b294:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b298:	e2413008 	sub	r3, r1, #8
    b29c:	e3530013 	cmp	r3, #19
    b2a0:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b2a4:	ea000063 	b	b438 <CScreenDevice::Write(char)+0x2f0>
    b2a8:	0000b494 	.word	0x0000b494
    b2ac:	0000b484 	.word	0x0000b484
    b2b0:	0000b46c 	.word	0x0000b46c
    b2b4:	0000b438 	.word	0x0000b438
    b2b8:	0000b438 	.word	0x0000b438
    b2bc:	0000b460 	.word	0x0000b460
    b2c0:	0000b438 	.word	0x0000b438
    b2c4:	0000b438 	.word	0x0000b438
    b2c8:	0000b438 	.word	0x0000b438
    b2cc:	0000b438 	.word	0x0000b438
    b2d0:	0000b438 	.word	0x0000b438
    b2d4:	0000b438 	.word	0x0000b438
    b2d8:	0000b438 	.word	0x0000b438
    b2dc:	0000b438 	.word	0x0000b438
    b2e0:	0000b438 	.word	0x0000b438
    b2e4:	0000b438 	.word	0x0000b438
    b2e8:	0000b438 	.word	0x0000b438
    b2ec:	0000b438 	.word	0x0000b438
    b2f0:	0000b438 	.word	0x0000b438
    b2f4:	0000b454 	.word	0x0000b454
    b2f8:	e241303f 	sub	r3, r1, #63	; 0x3f
    b2fc:	e3530011 	cmp	r3, #17
    b300:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b304:	ea000096 	b	b564 <CScreenDevice::Write(char)+0x41c>
    b308:	0000b584 	.word	0x0000b584
    b30c:	0000b564 	.word	0x0000b564
    b310:	0000b260 	.word	0x0000b260
    b314:	0000b5e8 	.word	0x0000b5e8
    b318:	0000b5d8 	.word	0x0000b5d8
    b31c:	0000b5c8 	.word	0x0000b5c8
    b320:	0000b564 	.word	0x0000b564
    b324:	0000b564 	.word	0x0000b564
    b328:	0000b564 	.word	0x0000b564
    b32c:	0000b5b0 	.word	0x0000b5b0
    b330:	0000b564 	.word	0x0000b564
    b334:	0000b5a0 	.word	0x0000b5a0
    b338:	0000b590 	.word	0x0000b590
    b33c:	0000b284 	.word	0x0000b284
    b340:	0000b284 	.word	0x0000b284
    b344:	0000b564 	.word	0x0000b564
    b348:	0000b564 	.word	0x0000b564
    b34c:	0000b284 	.word	0x0000b284
    b350:	e3c13004 	bic	r3, r1, #4
    b354:	e3530068 	cmp	r3, #104	; 0x68
    b358:	0a00002e 	beq	b418 <CScreenDevice::Write(char)+0x2d0>
    b35c:	e2411030 	sub	r1, r1, #48	; 0x30
    b360:	e6ef3071 	uxtb	r3, r1
    b364:	e3530009 	cmp	r3, #9
    b368:	8affffc5 	bhi	b284 <CScreenDevice::Write(char)+0x13c>
    b36c:	e5943058 	ldr	r3, [r4, #88]	; 0x58
    b370:	e0833103 	add	r3, r3, r3, lsl #2
    b374:	e0811083 	add	r1, r1, r3, lsl #1
    b378:	e3510063 	cmp	r1, #99	; 0x63
    b37c:	e5841058 	str	r1, [r4, #88]	; 0x58
    b380:	8affffbf 	bhi	b284 <CScreenDevice::Write(char)+0x13c>
    b384:	eaffffc0 	b	b28c <CScreenDevice::Write(char)+0x144>
    b388:	e351005b 	cmp	r1, #91	; 0x5b
    b38c:	1affffbc 	bne	b284 <CScreenDevice::Write(char)+0x13c>
    b390:	e3a03002 	mov	r3, #2
    b394:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b398:	eaffffbb 	b	b28c <CScreenDevice::Write(char)+0x144>
    b39c:	e2411030 	sub	r1, r1, #48	; 0x30
    b3a0:	e6ef3071 	uxtb	r3, r1
    b3a4:	e3530009 	cmp	r3, #9
    b3a8:	8affffb5 	bhi	b284 <CScreenDevice::Write(char)+0x13c>
    b3ac:	e3a03007 	mov	r3, #7
    b3b0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b3b4:	e5801058 	str	r1, [r0, #88]	; 0x58
    b3b8:	eaffffb3 	b	b28c <CScreenDevice::Write(char)+0x144>
    b3bc:	e2411030 	sub	r1, r1, #48	; 0x30
    b3c0:	e6ef3071 	uxtb	r3, r1
    b3c4:	e3530009 	cmp	r3, #9
    b3c8:	8affffad 	bhi	b284 <CScreenDevice::Write(char)+0x13c>
    b3cc:	e3a03006 	mov	r3, #6
    b3d0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b3d4:	e580105c 	str	r1, [r0, #92]	; 0x5c
    b3d8:	eaffffab 	b	b28c <CScreenDevice::Write(char)+0x144>
    b3dc:	e3510048 	cmp	r1, #72	; 0x48
    b3e0:	0a000092 	beq	b630 <CScreenDevice::Write(char)+0x4e8>
    b3e4:	e3510072 	cmp	r1, #114	; 0x72
    b3e8:	0a000096 	beq	b648 <CScreenDevice::Write(char)+0x500>
    b3ec:	e2411030 	sub	r1, r1, #48	; 0x30
    b3f0:	e6ef3071 	uxtb	r3, r1
    b3f4:	e3530009 	cmp	r3, #9
    b3f8:	8affffa1 	bhi	b284 <CScreenDevice::Write(char)+0x13c>
    b3fc:	e590305c 	ldr	r3, [r0, #92]	; 0x5c
    b400:	e0833103 	add	r3, r3, r3, lsl #2
    b404:	e0811083 	add	r1, r1, r3, lsl #1
    b408:	e35100c7 	cmp	r1, #199	; 0xc7
    b40c:	e580105c 	str	r1, [r0, #92]	; 0x5c
    b410:	8affff9b 	bhi	b284 <CScreenDevice::Write(char)+0x13c>
    b414:	eaffff9c 	b	b28c <CScreenDevice::Write(char)+0x144>
    b418:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    b41c:	e3530019 	cmp	r3, #25
    b420:	1affff97 	bne	b284 <CScreenDevice::Write(char)+0x13c>
    b424:	e2411068 	sub	r1, r1, #104	; 0x68
    b428:	e16f1f11 	clz	r1, r1
    b42c:	e1a012a1 	lsr	r1, r1, #5
    b430:	e5c01050 	strb	r1, [r0, #80]	; 0x50
    b434:	eaffff92 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b438:	e6ef3071 	uxtb	r3, r1
    b43c:	e353001f 	cmp	r3, #31
    b440:	9affff91 	bls	b28c <CScreenDevice::Write(char)+0x144>
    b444:	e59d4000 	ldr	r4, [sp]
    b448:	e59de004 	ldr	lr, [sp, #4]
    b44c:	e28dd008 	add	sp, sp, #8
    b450:	ea0002ff 	b	c054 <CScreenDevice::DisplayChar(char) [clone .part.0]>
    b454:	e3a03001 	mov	r3, #1
    b458:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b45c:	eaffff8a 	b	b28c <CScreenDevice::Write(char)+0x144>
    b460:	e3a03000 	mov	r3, #0
    b464:	e5803048 	str	r3, [r0, #72]	; 0x48
    b468:	eaffff87 	b	b28c <CScreenDevice::Write(char)+0x144>
    b46c:	e3a03000 	mov	r3, #0
    b470:	e59d4000 	ldr	r4, [sp]
    b474:	e59de004 	ldr	lr, [sp, #4]
    b478:	e28dd008 	add	sp, sp, #8
    b47c:	e5803048 	str	r3, [r0, #72]	; 0x48
    b480:	ea0000ee 	b	b840 <CScreenDevice::CursorDown()>
    b484:	e59d4000 	ldr	r4, [sp]
    b488:	e59de004 	ldr	lr, [sp, #4]
    b48c:	e28dd008 	add	sp, sp, #8
    b490:	ea0001e8 	b	bc38 <CScreenDevice::Tabulator()>
    b494:	e59d4000 	ldr	r4, [sp]
    b498:	e59de004 	ldr	lr, [sp, #4]
    b49c:	e28dd008 	add	sp, sp, #8
    b4a0:	ea000106 	b	b8c0 <CScreenDevice::CursorLeft()>
    b4a4:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    b4a8:	e3530004 	cmp	r3, #4
    b4ac:	1affff74 	bne	b284 <CScreenDevice::Write(char)+0x13c>
    b4b0:	e2411068 	sub	r1, r1, #104	; 0x68
    b4b4:	e16f1f11 	clz	r1, r1
    b4b8:	e1a012a1 	lsr	r1, r1, #5
    b4bc:	e5c01057 	strb	r1, [r0, #87]	; 0x57
    b4c0:	eaffff6f 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b4c4:	e3a03005 	mov	r3, #5
    b4c8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b4cc:	eaffff6e 	b	b28c <CScreenDevice::Write(char)+0x144>
    b4d0:	e5903058 	ldr	r3, [r0, #88]	; 0x58
    b4d4:	e353001b 	cmp	r3, #27
    b4d8:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    b4dc:	eaffff68 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b4e0:	0000b5f8 	.word	0x0000b5f8
    b4e4:	0000b60c 	.word	0x0000b60c
    b4e8:	0000b624 	.word	0x0000b624
    b4ec:	0000b284 	.word	0x0000b284
    b4f0:	0000b284 	.word	0x0000b284
    b4f4:	0000b284 	.word	0x0000b284
    b4f8:	0000b284 	.word	0x0000b284
    b4fc:	0000b618 	.word	0x0000b618
    b500:	0000b284 	.word	0x0000b284
    b504:	0000b284 	.word	0x0000b284
    b508:	0000b284 	.word	0x0000b284
    b50c:	0000b284 	.word	0x0000b284
    b510:	0000b284 	.word	0x0000b284
    b514:	0000b284 	.word	0x0000b284
    b518:	0000b284 	.word	0x0000b284
    b51c:	0000b284 	.word	0x0000b284
    b520:	0000b284 	.word	0x0000b284
    b524:	0000b284 	.word	0x0000b284
    b528:	0000b284 	.word	0x0000b284
    b52c:	0000b284 	.word	0x0000b284
    b530:	0000b284 	.word	0x0000b284
    b534:	0000b284 	.word	0x0000b284
    b538:	0000b284 	.word	0x0000b284
    b53c:	0000b284 	.word	0x0000b284
    b540:	0000b284 	.word	0x0000b284
    b544:	0000b284 	.word	0x0000b284
    b548:	0000b284 	.word	0x0000b284
    b54c:	0000b5f8 	.word	0x0000b5f8
    b550:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    b554:	e3510000 	cmp	r1, #0
    b558:	0affff49 	beq	b284 <CScreenDevice::Write(char)+0x13c>
    b55c:	eb0002ce 	bl	c09c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>
    b560:	eaffff47 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b564:	e2411030 	sub	r1, r1, #48	; 0x30
    b568:	e6ef3071 	uxtb	r3, r1
    b56c:	e3530009 	cmp	r3, #9
    b570:	8affff43 	bhi	b284 <CScreenDevice::Write(char)+0x13c>
    b574:	e3a03003 	mov	r3, #3
    b578:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b57c:	e5801058 	str	r1, [r0, #88]	; 0x58
    b580:	eaffff41 	b	b28c <CScreenDevice::Write(char)+0x144>
    b584:	e3a03004 	mov	r3, #4
    b588:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b58c:	eaffff3e 	b	b28c <CScreenDevice::Write(char)+0x144>
    b590:	eb000093 	bl	b7e4 <CScreenDevice::ClearLineEnd()>
    b594:	e3a03000 	mov	r3, #0
    b598:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b59c:	eaffff3a 	b	b28c <CScreenDevice::Write(char)+0x144>
    b5a0:	eb00002f 	bl	b664 <CScreenDevice::ClearDisplayEnd()>
    b5a4:	e3a03000 	mov	r3, #0
    b5a8:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b5ac:	eaffff36 	b	b28c <CScreenDevice::Write(char)+0x144>
    b5b0:	e5902040 	ldr	r2, [r0, #64]	; 0x40
    b5b4:	e3a03000 	mov	r3, #0
    b5b8:	e580303c 	str	r3, [r0, #60]	; 0x3c
    b5bc:	e5803048 	str	r3, [r0, #72]	; 0x48
    b5c0:	e580204c 	str	r2, [r0, #76]	; 0x4c
    b5c4:	eaffff30 	b	b28c <CScreenDevice::Write(char)+0x144>
    b5c8:	eb0000bc 	bl	b8c0 <CScreenDevice::CursorLeft()>
    b5cc:	e3a03000 	mov	r3, #0
    b5d0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b5d4:	eaffff2c 	b	b28c <CScreenDevice::Write(char)+0x144>
    b5d8:	eb0000ff 	bl	b9dc <CScreenDevice::CursorRight()>
    b5dc:	e3a03000 	mov	r3, #0
    b5e0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b5e4:	eaffff28 	b	b28c <CScreenDevice::Write(char)+0x144>
    b5e8:	eb000094 	bl	b840 <CScreenDevice::CursorDown()>
    b5ec:	e3a03000 	mov	r3, #0
    b5f0:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b5f4:	eaffff24 	b	b28c <CScreenDevice::Write(char)+0x144>
    b5f8:	e3a03000 	mov	r3, #0
    b5fc:	e3e02020 	mvn	r2, #32
    b600:	e1c025b2 	strh	r2, [r0, #82]	; 0x52
    b604:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    b608:	eaffff1d 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b60c:	e3a03b3e 	mov	r3, #63488	; 0xf800
    b610:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b614:	eaffff1a 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b618:	e3a03001 	mov	r3, #1
    b61c:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    b620:	eaffff17 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b624:	e3a0301f 	mov	r3, #31
    b628:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    b62c:	eaffff14 	b	b284 <CScreenDevice::Write(char)+0x13c>
    b630:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    b634:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    b638:	eb0000c8 	bl	b960 <CScreenDevice::CursorMove(unsigned int, unsigned int)>
    b63c:	e3a03000 	mov	r3, #0
    b640:	e584303c 	str	r3, [r4, #60]	; 0x3c
    b644:	eaffff10 	b	b28c <CScreenDevice::Write(char)+0x144>
    b648:	e5901058 	ldr	r1, [r0, #88]	; 0x58
    b64c:	e590205c 	ldr	r2, [r0, #92]	; 0x5c
    b650:	eb000123 	bl	bae4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>
    b654:	eaffff0a 	b	b284 <CScreenDevice::Write(char)+0x13c>

0000b658 <CScreenDevice::CarriageReturn()>:
    b658:	e3a03000 	mov	r3, #0
    b65c:	e5803048 	str	r3, [r0, #72]	; 0x48
    b660:	e12fff1e 	bx	lr

0000b664 <CScreenDevice::ClearDisplayEnd()>:
    b664:	e16d41f0 	strd	r4, [sp, #-16]!
    b668:	e1a04000 	mov	r4, r0
    b66c:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b670:	e5905048 	ldr	r5, [r0, #72]	; 0x48
    b674:	e58d6008 	str	r6, [sp, #8]
    b678:	e2806020 	add	r6, r0, #32
    b67c:	e58de00c 	str	lr, [sp, #12]
    b680:	e1550003 	cmp	r5, r3
    b684:	2a000009 	bcs	b6b0 <CScreenDevice::ClearDisplayEnd()+0x4c>
    b688:	e1a01005 	mov	r1, r5
    b68c:	e1a00004 	mov	r0, r4
    b690:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    b694:	eb000206 	bl	beb4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b698:	e1a00006 	mov	r0, r6
    b69c:	eb001ddf 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    b6a0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    b6a4:	e0855000 	add	r5, r5, r0
    b6a8:	e1530005 	cmp	r3, r5
    b6ac:	8afffff5 	bhi	b688 <CScreenDevice::ClearDisplayEnd()+0x24>
    b6b0:	e594504c 	ldr	r5, [r4, #76]	; 0x4c
    b6b4:	e1a00006 	mov	r0, r6
    b6b8:	eb001dda 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    b6bc:	e594c024 	ldr	ip, [r4, #36]	; 0x24
    b6c0:	e594202c 	ldr	r2, [r4, #44]	; 0x2c
    b6c4:	e0855000 	add	r5, r5, r0
    b6c8:	e5943028 	ldr	r3, [r4, #40]	; 0x28
    b6cc:	e0020592 	mul	r2, r2, r5
    b6d0:	e1a030a3 	lsr	r3, r3, #1
    b6d4:	e043e002 	sub	lr, r3, r2
    b6d8:	e08c2082 	add	r2, ip, r2, lsl #1
    b6dc:	e35e0000 	cmp	lr, #0
    b6e0:	e24e1001 	sub	r1, lr, #1
    b6e4:	0a000034 	beq	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>
    b6e8:	e08cc083 	add	ip, ip, r3, lsl #1
    b6ec:	e2840056 	add	r0, r4, #86	; 0x56
    b6f0:	e2843054 	add	r3, r4, #84	; 0x54
    b6f4:	e1520000 	cmp	r2, r0
    b6f8:	3153000c 	cmpcc	r3, ip
    b6fc:	23a03001 	movcs	r3, #1
    b700:	33a03000 	movcc	r3, #0
    b704:	e3510008 	cmp	r1, #8
    b708:	93a03000 	movls	r3, #0
    b70c:	82033001 	andhi	r3, r3, #1
    b710:	e3530000 	cmp	r3, #0
    b714:	0a00002c 	beq	b7cc <CScreenDevice::ClearDisplayEnd()+0x168>
    b718:	e1d4c5b4 	ldrh	ip, [r4, #84]	; 0x54
    b71c:	e1a051ae 	lsr	r5, lr, #3
    b720:	e1a00002 	mov	r0, r2
    b724:	e3a03000 	mov	r3, #0
    b728:	eea0cbb0 	vdup.16	q8, ip
    b72c:	e2833001 	add	r3, r3, #1
    b730:	f4400a4d 	vst1.16	{d16-d17}, [r0]!
    b734:	e1550003 	cmp	r5, r3
    b738:	1afffffb 	bne	b72c <CScreenDevice::ClearDisplayEnd()+0xc8>
    b73c:	e3ce3007 	bic	r3, lr, #7
    b740:	e1a00083 	lsl	r0, r3, #1
    b744:	e15e0003 	cmp	lr, r3
    b748:	e0411003 	sub	r1, r1, r3
    b74c:	e0823000 	add	r3, r2, r0
    b750:	0a000019 	beq	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>
    b754:	e1d4c5b4 	ldrh	ip, [r4, #84]	; 0x54
    b758:	e3510000 	cmp	r1, #0
    b75c:	e182c0b0 	strh	ip, [r2, r0]
    b760:	0a000015 	beq	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>
    b764:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
    b768:	e3510001 	cmp	r1, #1
    b76c:	e1c320b2 	strh	r2, [r3, #2]
    b770:	0a000011 	beq	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>
    b774:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
    b778:	e3510002 	cmp	r1, #2
    b77c:	e1c320b4 	strh	r2, [r3, #4]
    b780:	0a00000d 	beq	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>
    b784:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
    b788:	e3510003 	cmp	r1, #3
    b78c:	e1c320b6 	strh	r2, [r3, #6]
    b790:	0a000009 	beq	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>
    b794:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
    b798:	e3510004 	cmp	r1, #4
    b79c:	e1c320b8 	strh	r2, [r3, #8]
    b7a0:	0a000005 	beq	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>
    b7a4:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
    b7a8:	e3510005 	cmp	r1, #5
    b7ac:	e1c320ba 	strh	r2, [r3, #10]
    b7b0:	0a000001 	beq	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>
    b7b4:	e1d425b4 	ldrh	r2, [r4, #84]	; 0x54
    b7b8:	e1c320bc 	strh	r2, [r3, #12]
    b7bc:	e1cd40d0 	ldrd	r4, [sp]
    b7c0:	e59d6008 	ldr	r6, [sp, #8]
    b7c4:	e28dd00c 	add	sp, sp, #12
    b7c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b7cc:	e1d435b4 	ldrh	r3, [r4, #84]	; 0x54
    b7d0:	e2411001 	sub	r1, r1, #1
    b7d4:	e3710001 	cmn	r1, #1
    b7d8:	e0c230b2 	strh	r3, [r2], #2
    b7dc:	1afffffa 	bne	b7cc <CScreenDevice::ClearDisplayEnd()+0x168>
    b7e0:	eafffff5 	b	b7bc <CScreenDevice::ClearDisplayEnd()+0x158>

0000b7e4 <CScreenDevice::ClearLineEnd()>:
    b7e4:	e16d41f0 	strd	r4, [sp, #-16]!
    b7e8:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    b7ec:	e5904048 	ldr	r4, [r0, #72]	; 0x48
    b7f0:	e58d6008 	str	r6, [sp, #8]
    b7f4:	e58de00c 	str	lr, [sp, #12]
    b7f8:	e1540003 	cmp	r4, r3
    b7fc:	2a00000b 	bcs	b830 <CScreenDevice::ClearLineEnd()+0x4c>
    b800:	e1a05000 	mov	r5, r0
    b804:	e2806020 	add	r6, r0, #32
    b808:	e1a01004 	mov	r1, r4
    b80c:	e1a00005 	mov	r0, r5
    b810:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    b814:	eb0001a6 	bl	beb4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    b818:	e1a00006 	mov	r0, r6
    b81c:	eb001d7f 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    b820:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    b824:	e0844000 	add	r4, r4, r0
    b828:	e1530004 	cmp	r3, r4
    b82c:	8afffff5 	bhi	b808 <CScreenDevice::ClearLineEnd()+0x24>
    b830:	e1cd40d0 	ldrd	r4, [sp]
    b834:	e59d6008 	ldr	r6, [sp, #8]
    b838:	e28dd00c 	add	sp, sp, #12
    b83c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b840 <CScreenDevice::CursorDown()>:
    b840:	e16d41f0 	strd	r4, [sp, #-16]!
    b844:	e2805020 	add	r5, r0, #32
    b848:	e1a04000 	mov	r4, r0
    b84c:	e1a00005 	mov	r0, r5
    b850:	e58d6008 	str	r6, [sp, #8]
    b854:	e58de00c 	str	lr, [sp, #12]
    b858:	eb001d72 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    b85c:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    b860:	e594204c 	ldr	r2, [r4, #76]	; 0x4c
    b864:	e0800002 	add	r0, r0, r2
    b868:	e1500003 	cmp	r0, r3
    b86c:	e584004c 	str	r0, [r4, #76]	; 0x4c
    b870:	2a000003 	bcs	b884 <CScreenDevice::CursorDown()+0x44>
    b874:	e1cd40d0 	ldrd	r4, [sp]
    b878:	e59d6008 	ldr	r6, [sp, #8]
    b87c:	e28dd00c 	add	sp, sp, #12
    b880:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b884:	e1a00004 	mov	r0, r4
    b888:	eb000102 	bl	bc98 <CScreenDevice::Scroll()>
    b88c:	e1a00005 	mov	r0, r5
    b890:	eb001d64 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    b894:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b898:	e59d6008 	ldr	r6, [sp, #8]
    b89c:	e0433000 	sub	r3, r3, r0
    b8a0:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b8a4:	e1cd40d0 	ldrd	r4, [sp]
    b8a8:	e28dd00c 	add	sp, sp, #12
    b8ac:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b8b0 <CScreenDevice::CursorHome()>:
    b8b0:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b8b4:	e3a02000 	mov	r2, #0
    b8b8:	e1c024f8 	strd	r2, [r0, #72]	; 0x48
    b8bc:	e12fff1e 	bx	lr

0000b8c0 <CScreenDevice::CursorLeft()>:
    b8c0:	e5903048 	ldr	r3, [r0, #72]	; 0x48
    b8c4:	e16d41f0 	strd	r4, [sp, #-16]!
    b8c8:	e1a04000 	mov	r4, r0
    b8cc:	e58d6008 	str	r6, [sp, #8]
    b8d0:	e58de00c 	str	lr, [sp, #12]
    b8d4:	e3530000 	cmp	r3, #0
    b8d8:	1a000017 	bne	b93c <CScreenDevice::CursorLeft()+0x7c>
    b8dc:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    b8e0:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    b8e4:	e1520003 	cmp	r2, r3
    b8e8:	8a000003 	bhi	b8fc <CScreenDevice::CursorLeft()+0x3c>
    b8ec:	e1cd40d0 	ldrd	r4, [sp]
    b8f0:	e59d6008 	ldr	r6, [sp, #8]
    b8f4:	e28dd00c 	add	sp, sp, #12
    b8f8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b8fc:	e5945030 	ldr	r5, [r4, #48]	; 0x30
    b900:	e2806020 	add	r6, r0, #32
    b904:	e1a00006 	mov	r0, r6
    b908:	eb001d44 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    b90c:	e1a03000 	mov	r3, r0
    b910:	e1a00006 	mov	r0, r6
    b914:	e0455003 	sub	r5, r5, r3
    b918:	e5845048 	str	r5, [r4, #72]	; 0x48
    b91c:	eb001d41 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    b920:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    b924:	e59d6008 	ldr	r6, [sp, #8]
    b928:	e0433000 	sub	r3, r3, r0
    b92c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    b930:	e1cd40d0 	ldrd	r4, [sp]
    b934:	e28dd00c 	add	sp, sp, #12
    b938:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    b93c:	e2800020 	add	r0, r0, #32
    b940:	eb001d36 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    b944:	e5943048 	ldr	r3, [r4, #72]	; 0x48
    b948:	e59d6008 	ldr	r6, [sp, #8]
    b94c:	e0433000 	sub	r3, r3, r0
    b950:	e5843048 	str	r3, [r4, #72]	; 0x48
    b954:	e1cd40d0 	ldrd	r4, [sp]
    b958:	e28dd00c 	add	sp, sp, #12
    b95c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b960 <CScreenDevice::CursorMove(unsigned int, unsigned int)>:
    b960:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    b964:	e1a04000 	mov	r4, r0
    b968:	e2425001 	sub	r5, r2, #1
    b96c:	e1cd60f8 	strd	r6, [sp, #8]
    b970:	e2807020 	add	r7, r0, #32
    b974:	e1a06001 	mov	r6, r1
    b978:	e1a00007 	mov	r0, r7
    b97c:	e58d8010 	str	r8, [sp, #16]
    b980:	e58de014 	str	lr, [sp, #20]
    b984:	eb001d25 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    b988:	e1a02000 	mov	r2, r0
    b98c:	e1a00007 	mov	r0, r7
    b990:	e0050592 	mul	r5, r2, r5
    b994:	eb001d23 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    b998:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    b99c:	e1530005 	cmp	r3, r5
    b9a0:	9a000008 	bls	b9c8 <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x68>
    b9a4:	e2466001 	sub	r6, r6, #1
    b9a8:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    b9ac:	e0000690 	mul	r0, r0, r6
    b9b0:	e1530000 	cmp	r3, r0
    b9b4:	8a000003 	bhi	b9c8 <CScreenDevice::CursorMove(unsigned int, unsigned int)+0x68>
    b9b8:	e5943044 	ldr	r3, [r4, #68]	; 0x44
    b9bc:	e1530000 	cmp	r3, r0
    b9c0:	85845048 	strhi	r5, [r4, #72]	; 0x48
    b9c4:	8584004c 	strhi	r0, [r4, #76]	; 0x4c
    b9c8:	e1cd40d0 	ldrd	r4, [sp]
    b9cc:	e1cd60d8 	ldrd	r6, [sp, #8]
    b9d0:	e59d8010 	ldr	r8, [sp, #16]
    b9d4:	e28dd014 	add	sp, sp, #20
    b9d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000b9dc <CScreenDevice::CursorRight()>:
    b9dc:	e52d4008 	str	r4, [sp, #-8]!
    b9e0:	e1a04000 	mov	r4, r0
    b9e4:	e2800020 	add	r0, r0, #32
    b9e8:	e58de004 	str	lr, [sp, #4]
    b9ec:	eb001d0b 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    b9f0:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    b9f4:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    b9f8:	e0800002 	add	r0, r0, r2
    b9fc:	e1500003 	cmp	r0, r3
    ba00:	e5840048 	str	r0, [r4, #72]	; 0x48
    ba04:	2a000002 	bcs	ba14 <CScreenDevice::CursorRight()+0x38>
    ba08:	e59d4000 	ldr	r4, [sp]
    ba0c:	e28dd004 	add	sp, sp, #4
    ba10:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ba14:	e3a03000 	mov	r3, #0
    ba18:	e1a00004 	mov	r0, r4
    ba1c:	e59de004 	ldr	lr, [sp, #4]
    ba20:	e5843048 	str	r3, [r4, #72]	; 0x48
    ba24:	e59d4000 	ldr	r4, [sp]
    ba28:	e28dd008 	add	sp, sp, #8
    ba2c:	eaffff83 	b	b840 <CScreenDevice::CursorDown()>

0000ba30 <CScreenDevice::CursorUp()>:
    ba30:	e5903040 	ldr	r3, [r0, #64]	; 0x40
    ba34:	e590204c 	ldr	r2, [r0, #76]	; 0x4c
    ba38:	e1520003 	cmp	r2, r3
    ba3c:	912fff1e 	bxls	lr
    ba40:	e52d4008 	str	r4, [sp, #-8]!
    ba44:	e1a04000 	mov	r4, r0
    ba48:	e2800020 	add	r0, r0, #32
    ba4c:	e58de004 	str	lr, [sp, #4]
    ba50:	eb001cf4 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    ba54:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
    ba58:	e0433000 	sub	r3, r3, r0
    ba5c:	e584304c 	str	r3, [r4, #76]	; 0x4c
    ba60:	e59d4000 	ldr	r4, [sp]
    ba64:	e28dd004 	add	sp, sp, #4
    ba68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ba6c <CScreenDevice::DeleteChars(unsigned int)>:
    ba6c:	e12fff1e 	bx	lr

0000ba70 <CScreenDevice::DeleteLines(unsigned int)>:
    ba70:	e12fff1e 	bx	lr

0000ba74 <CScreenDevice::DisplayChar(char)>:
    ba74:	e6ef3071 	uxtb	r3, r1
    ba78:	e353001f 	cmp	r3, #31
    ba7c:	9a000000 	bls	ba84 <CScreenDevice::DisplayChar(char)+0x10>
    ba80:	ea000173 	b	c054 <CScreenDevice::DisplayChar(char) [clone .part.0]>
    ba84:	e12fff1e 	bx	lr

0000ba88 <CScreenDevice::EraseChars(unsigned int)>:
    ba88:	e3510000 	cmp	r1, #0
    ba8c:	1a000000 	bne	ba94 <CScreenDevice::EraseChars(unsigned int)+0xc>
    ba90:	e12fff1e 	bx	lr
    ba94:	ea000180 	b	c09c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>

0000ba98 <CScreenDevice::GetTextBackgroundColor()>:
    ba98:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    ba9c:	e3530000 	cmp	r3, #0
    baa0:	11d005b2 	ldrhne	r0, [r0, #82]	; 0x52
    baa4:	01d005b4 	ldrheq	r0, [r0, #84]	; 0x54
    baa8:	e12fff1e 	bx	lr

0000baac <CScreenDevice::GetTextColor()>:
    baac:	e5d03056 	ldrb	r3, [r0, #86]	; 0x56
    bab0:	e3530000 	cmp	r3, #0
    bab4:	11d005b4 	ldrhne	r0, [r0, #84]	; 0x54
    bab8:	01d005b2 	ldrheq	r0, [r0, #82]	; 0x52
    babc:	e12fff1e 	bx	lr

0000bac0 <CScreenDevice::InsertLines(unsigned int)>:
    bac0:	e12fff1e 	bx	lr

0000bac4 <CScreenDevice::InsertMode(bool)>:
    bac4:	e5c01057 	strb	r1, [r0, #87]	; 0x57
    bac8:	e12fff1e 	bx	lr

0000bacc <CScreenDevice::NewLine()>:
    bacc:	e3a02000 	mov	r2, #0
    bad0:	e5802048 	str	r2, [r0, #72]	; 0x48
    bad4:	eaffff59 	b	b840 <CScreenDevice::CursorDown()>

0000bad8 <CScreenDevice::ReverseScroll()>:
    bad8:	e12fff1e 	bx	lr

0000badc <CScreenDevice::SetCursorMode(bool)>:
    badc:	e5c01050 	strb	r1, [r0, #80]	; 0x50
    bae0:	e12fff1e 	bx	lr

0000bae4 <CScreenDevice::SetScrollRegion(unsigned int, unsigned int)>:
    bae4:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    bae8:	e1a05000 	mov	r5, r0
    baec:	e1a04002 	mov	r4, r2
    baf0:	e1cd60f8 	strd	r6, [sp, #8]
    baf4:	e1a07001 	mov	r7, r1
    baf8:	e58d8010 	str	r8, [sp, #16]
    bafc:	e2808020 	add	r8, r0, #32
    bb00:	e2477001 	sub	r7, r7, #1
    bb04:	e1a00008 	mov	r0, r8
    bb08:	e58de014 	str	lr, [sp, #20]
    bb0c:	eb001cc5 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    bb10:	e1a06000 	mov	r6, r0
    bb14:	e1a00008 	mov	r0, r8
    bb18:	eb001cc2 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    bb1c:	e5951038 	ldr	r1, [r5, #56]	; 0x38
    bb20:	e0060796 	mul	r6, r6, r7
    bb24:	e0020094 	mul	r2, r4, r0
    bb28:	e59d8010 	ldr	r8, [sp, #16]
    bb2c:	e1510006 	cmp	r1, r6
    bb30:	93a03000 	movls	r3, #0
    bb34:	83a03001 	movhi	r3, #1
    bb38:	e3520000 	cmp	r2, #0
    bb3c:	03a03000 	moveq	r3, #0
    bb40:	e1510002 	cmp	r1, r2
    bb44:	33a03000 	movcc	r3, #0
    bb48:	22033001 	andcs	r3, r3, #1
    bb4c:	e1560002 	cmp	r6, r2
    bb50:	23a03000 	movcs	r3, #0
    bb54:	32033001 	andcc	r3, r3, #1
    bb58:	e3530000 	cmp	r3, #0
    bb5c:	e3a03000 	mov	r3, #0
    bb60:	05956040 	ldreq	r6, [r5, #64]	; 0x40
    bb64:	15856040 	strne	r6, [r5, #64]	; 0x40
    bb68:	15852044 	strne	r2, [r5, #68]	; 0x44
    bb6c:	e5853048 	str	r3, [r5, #72]	; 0x48
    bb70:	e585604c 	str	r6, [r5, #76]	; 0x4c
    bb74:	e1cd40d0 	ldrd	r4, [sp]
    bb78:	e1cd60d8 	ldrd	r6, [sp, #8]
    bb7c:	e28dd014 	add	sp, sp, #20
    bb80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000bb84 <CScreenDevice::SetStandoutMode(unsigned int)>:
    bb84:	e351001b 	cmp	r1, #27
    bb88:	979ff101 	ldrls	pc, [pc, r1, lsl #2]
    bb8c:	ea00001d 	b	bc08 <CScreenDevice::SetStandoutMode(unsigned int)+0x84>
    bb90:	0000bc0c 	.word	0x0000bc0c
    bb94:	0000bc20 	.word	0x0000bc20
    bb98:	0000bc2c 	.word	0x0000bc2c
    bb9c:	0000bc08 	.word	0x0000bc08
    bba0:	0000bc08 	.word	0x0000bc08
    bba4:	0000bc08 	.word	0x0000bc08
    bba8:	0000bc08 	.word	0x0000bc08
    bbac:	0000bc00 	.word	0x0000bc00
    bbb0:	0000bc08 	.word	0x0000bc08
    bbb4:	0000bc08 	.word	0x0000bc08
    bbb8:	0000bc08 	.word	0x0000bc08
    bbbc:	0000bc08 	.word	0x0000bc08
    bbc0:	0000bc08 	.word	0x0000bc08
    bbc4:	0000bc08 	.word	0x0000bc08
    bbc8:	0000bc08 	.word	0x0000bc08
    bbcc:	0000bc08 	.word	0x0000bc08
    bbd0:	0000bc08 	.word	0x0000bc08
    bbd4:	0000bc08 	.word	0x0000bc08
    bbd8:	0000bc08 	.word	0x0000bc08
    bbdc:	0000bc08 	.word	0x0000bc08
    bbe0:	0000bc08 	.word	0x0000bc08
    bbe4:	0000bc08 	.word	0x0000bc08
    bbe8:	0000bc08 	.word	0x0000bc08
    bbec:	0000bc08 	.word	0x0000bc08
    bbf0:	0000bc08 	.word	0x0000bc08
    bbf4:	0000bc08 	.word	0x0000bc08
    bbf8:	0000bc08 	.word	0x0000bc08
    bbfc:	0000bc0c 	.word	0x0000bc0c
    bc00:	e3a03001 	mov	r3, #1
    bc04:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    bc08:	e12fff1e 	bx	lr
    bc0c:	e3a03000 	mov	r3, #0
    bc10:	e3e02020 	mvn	r2, #32
    bc14:	e1c025b2 	strh	r2, [r0, #82]	; 0x52
    bc18:	e5c03056 	strb	r3, [r0, #86]	; 0x56
    bc1c:	e12fff1e 	bx	lr
    bc20:	e3a03b3e 	mov	r3, #63488	; 0xf800
    bc24:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    bc28:	e12fff1e 	bx	lr
    bc2c:	e3a0301f 	mov	r3, #31
    bc30:	e1c035b2 	strh	r3, [r0, #82]	; 0x52
    bc34:	e12fff1e 	bx	lr

0000bc38 <CScreenDevice::Tabulator()>:
    bc38:	e52d4008 	str	r4, [sp, #-8]!
    bc3c:	e1a04000 	mov	r4, r0
    bc40:	e2800020 	add	r0, r0, #32
    bc44:	e58de004 	str	lr, [sp, #4]
    bc48:	eb001c74 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    bc4c:	e1a03180 	lsl	r3, r0, #3
    bc50:	e5941030 	ldr	r1, [r4, #48]	; 0x30
    bc54:	e5942048 	ldr	r2, [r4, #72]	; 0x48
    bc58:	e0832002 	add	r2, r3, r2
    bc5c:	e732f312 	udiv	r2, r2, r3
    bc60:	e0030293 	mul	r3, r3, r2
    bc64:	e1530001 	cmp	r3, r1
    bc68:	e5843048 	str	r3, [r4, #72]	; 0x48
    bc6c:	2a000002 	bcs	bc7c <CScreenDevice::Tabulator()+0x44>
    bc70:	e59d4000 	ldr	r4, [sp]
    bc74:	e28dd004 	add	sp, sp, #4
    bc78:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    bc7c:	e3a03000 	mov	r3, #0
    bc80:	e1a00004 	mov	r0, r4
    bc84:	e59de004 	ldr	lr, [sp, #4]
    bc88:	e5843048 	str	r3, [r4, #72]	; 0x48
    bc8c:	e59d4000 	ldr	r4, [sp]
    bc90:	e28dd008 	add	sp, sp, #8
    bc94:	eafffee9 	b	b840 <CScreenDevice::CursorDown()>

0000bc98 <CScreenDevice::Scroll()>:
    bc98:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    bc9c:	e1a04000 	mov	r4, r0
    bca0:	e2800020 	add	r0, r0, #32
    bca4:	e1cd60f8 	strd	r6, [sp, #8]
    bca8:	e58d8010 	str	r8, [sp, #16]
    bcac:	e58de014 	str	lr, [sp, #20]
    bcb0:	e24dd008 	sub	sp, sp, #8
    bcb4:	eb001c5b 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    bcb8:	e5942024 	ldr	r2, [r4, #36]	; 0x24
    bcbc:	e1a07000 	mov	r7, r0
    bcc0:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    bcc4:	e5943040 	ldr	r3, [r4, #64]	; 0x40
    bcc8:	e5945044 	ldr	r5, [r4, #68]	; 0x44
    bccc:	e1a0e08c 	lsl	lr, ip, #1
    bcd0:	e006039c 	mul	r6, ip, r3
    bcd4:	e0455003 	sub	r5, r5, r3
    bcd8:	e0455000 	sub	r5, r5, r0
    bcdc:	e0826086 	add	r6, r2, r6, lsl #1
    bce0:	e005059e 	mul	r5, lr, r5
    bce4:	e3550000 	cmp	r5, #0
    bce8:	1a000021 	bne	bd74 <CScreenDevice::Scroll()+0xdc>
    bcec:	e00c079c 	mul	ip, ip, r7
    bcf0:	e7fd00dc 	ubfx	r0, ip, #1, #30
    bcf4:	e1a0c08c 	lsl	ip, ip, #1
    bcf8:	e3500000 	cmp	r0, #0
    bcfc:	e2401001 	sub	r1, r0, #1
    bd00:	0a000015 	beq	bd5c <CScreenDevice::Scroll()+0xc4>
    bd04:	e3510002 	cmp	r1, #2
    bd08:	e1d4e5b4 	ldrh	lr, [r4, #84]	; 0x54
    bd0c:	9a00000c 	bls	bd44 <CScreenDevice::Scroll()+0xac>
    bd10:	eea0eb90 	vdup.32	q8, lr
    bd14:	e3cc400f 	bic	r4, ip, #15
    bd18:	e1a0c22c 	lsr	ip, ip, #4
    bd1c:	e0862004 	add	r2, r6, r4
    bd20:	e1a03006 	mov	r3, r6
    bd24:	f4430a8d 	vst1.32	{d16-d17}, [r3]!
    bd28:	e1530002 	cmp	r3, r2
    bd2c:	1afffffc 	bne	bd24 <CScreenDevice::Scroll()+0x8c>
    bd30:	e1a0c10c 	lsl	ip, ip, #2
    bd34:	e0866004 	add	r6, r6, r4
    bd38:	e150000c 	cmp	r0, ip
    bd3c:	e041100c 	sub	r1, r1, ip
    bd40:	0a000005 	beq	bd5c <CScreenDevice::Scroll()+0xc4>
    bd44:	e3510000 	cmp	r1, #0
    bd48:	e586e000 	str	lr, [r6]
    bd4c:	0a000002 	beq	bd5c <CScreenDevice::Scroll()+0xc4>
    bd50:	e3510001 	cmp	r1, #1
    bd54:	e586e004 	str	lr, [r6, #4]
    bd58:	1586e008 	strne	lr, [r6, #8]
    bd5c:	e28dd008 	add	sp, sp, #8
    bd60:	e1cd40d0 	ldrd	r4, [sp]
    bd64:	e1cd60d8 	ldrd	r6, [sp, #8]
    bd68:	e59d8010 	ldr	r8, [sp, #16]
    bd6c:	e28dd014 	add	sp, sp, #20
    bd70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    bd74:	e3a0c000 	mov	ip, #0
    bd78:	e0833000 	add	r3, r3, r0
    bd7c:	e3a01002 	mov	r1, #2
    bd80:	e2848064 	add	r8, r4, #100	; 0x64
    bd84:	e022239e 	mla	r2, lr, r3, r2
    bd88:	e1a00008 	mov	r0, r8
    bd8c:	e1a03005 	mov	r3, r5
    bd90:	e88d1002 	stm	sp, {r1, ip}
    bd94:	e1a01006 	mov	r1, r6
    bd98:	e3c55003 	bic	r5, r5, #3
    bd9c:	eb001d24 	bl	13234 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
    bda0:	e1a00008 	mov	r0, r8
    bda4:	e0866005 	add	r6, r6, r5
    bda8:	eb001f02 	bl	139b8 <CDMAChannel::Start()>
    bdac:	e1a00008 	mov	r0, r8
    bdb0:	eb001f54 	bl	13b08 <CDMAChannel::Wait()>
    bdb4:	e594c02c 	ldr	ip, [r4, #44]	; 0x2c
    bdb8:	eaffffcb 	b	bcec <CScreenDevice::Scroll()+0x54>

0000bdbc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>:
    bdbc:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
    bdc0:	e1a05000 	mov	r5, r0
    bdc4:	e1cd60f8 	strd	r6, [sp, #8]
    bdc8:	e2806020 	add	r6, r0, #32
    bdcc:	e3a07000 	mov	r7, #0
    bdd0:	e1a00006 	mov	r0, r6
    bdd4:	e1cd81f0 	strd	r8, [sp, #16]
    bdd8:	e1a08001 	mov	r8, r1
    bddc:	e1cda1f8 	strd	sl, [sp, #24]
    bde0:	e1a09002 	mov	r9, r2
    bde4:	e1a0a003 	mov	sl, r3
    bde8:	e58de020 	str	lr, [sp, #32]
    bdec:	e24dd004 	sub	sp, sp, #4
    bdf0:	e1ddb2b8 	ldrh	fp, [sp, #40]	; 0x28
    bdf4:	eb001c0b 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    bdf8:	e1500007 	cmp	r0, r7
    bdfc:	9a000025 	bls	be98 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xdc>
    be00:	e3a04000 	mov	r4, #0
    be04:	e1a00006 	mov	r0, r6
    be08:	eb001c04 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    be0c:	e1a0c000 	mov	ip, r0
    be10:	e1a02004 	mov	r2, r4
    be14:	e15c0004 	cmp	ip, r4
    be18:	e1a03007 	mov	r3, r7
    be1c:	e1a01008 	mov	r1, r8
    be20:	e1a00006 	mov	r0, r6
    be24:	9a000015 	bls	be80 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0xc4>
    be28:	eb001c02 	bl	12e38 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>
    be2c:	e3500000 	cmp	r0, #0
    be30:	e1a0100b 	mov	r1, fp
    be34:	1a000003 	bne	be48 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x8c>
    be38:	e5d53056 	ldrb	r3, [r5, #86]	; 0x56
    be3c:	e3530000 	cmp	r3, #0
    be40:	11d515b2 	ldrhne	r1, [r5, #82]	; 0x52
    be44:	01d515b4 	ldrheq	r1, [r5, #84]	; 0x54
    be48:	e0843009 	add	r3, r4, r9
    be4c:	e2844001 	add	r4, r4, #1
    be50:	e5952030 	ldr	r2, [r5, #48]	; 0x30
    be54:	e1520003 	cmp	r2, r3
    be58:	9affffe9 	bls	be04 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    be5c:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    be60:	e15a0002 	cmp	sl, r2
    be64:	2affffe6 	bcs	be04 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    be68:	e5950024 	ldr	r0, [r5, #36]	; 0x24
    be6c:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
    be70:	e0233a92 	mla	r3, r2, sl, r3
    be74:	e1a03083 	lsl	r3, r3, #1
    be78:	e18010b3 	strh	r1, [r0, r3]
    be7c:	eaffffe0 	b	be04 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x48>
    be80:	e1a00006 	mov	r0, r6
    be84:	e2877001 	add	r7, r7, #1
    be88:	eb001be6 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    be8c:	e1500007 	cmp	r0, r7
    be90:	e28aa001 	add	sl, sl, #1
    be94:	8affffd9 	bhi	be00 <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)+0x44>
    be98:	e28dd004 	add	sp, sp, #4
    be9c:	e1cd40d0 	ldrd	r4, [sp]
    bea0:	e1cd60d8 	ldrd	r6, [sp, #8]
    bea4:	e1cd81d0 	ldrd	r8, [sp, #16]
    bea8:	e1cda1d8 	ldrd	sl, [sp, #24]
    beac:	e28dd020 	add	sp, sp, #32
    beb0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000beb4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>:
    beb4:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    beb8:	e1a05000 	mov	r5, r0
    bebc:	e1cd60f8 	strd	r6, [sp, #8]
    bec0:	e2806020 	add	r6, r0, #32
    bec4:	e1a07001 	mov	r7, r1
    bec8:	e1a00006 	mov	r0, r6
    becc:	e1cd81f0 	strd	r8, [sp, #16]
    bed0:	e1a08002 	mov	r8, r2
    bed4:	e3a09000 	mov	r9, #0
    bed8:	e58da018 	str	sl, [sp, #24]
    bedc:	e58de01c 	str	lr, [sp, #28]
    bee0:	eb001bd0 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    bee4:	e1500009 	cmp	r0, r9
    bee8:	9a000019 	bls	bf54 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0xa0>
    beec:	e3a04000 	mov	r4, #0
    bef0:	e1a00006 	mov	r0, r6
    bef4:	eb001bc9 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    bef8:	e1500004 	cmp	r0, r4
    befc:	e0843007 	add	r3, r4, r7
    bf00:	e2844001 	add	r4, r4, #1
    bf04:	9a00000c 	bls	bf3c <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x88>
    bf08:	e5952030 	ldr	r2, [r5, #48]	; 0x30
    bf0c:	e1520003 	cmp	r2, r3
    bf10:	9afffff6 	bls	bef0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x3c>
    bf14:	e5952034 	ldr	r2, [r5, #52]	; 0x34
    bf18:	e1580002 	cmp	r8, r2
    bf1c:	2afffff3 	bcs	bef0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x3c>
    bf20:	e1d505b4 	ldrh	r0, [r5, #84]	; 0x54
    bf24:	e595202c 	ldr	r2, [r5, #44]	; 0x2c
    bf28:	e5951024 	ldr	r1, [r5, #36]	; 0x24
    bf2c:	e0233892 	mla	r3, r2, r8, r3
    bf30:	e1a03083 	lsl	r3, r3, #1
    bf34:	e18100b3 	strh	r0, [r1, r3]
    bf38:	eaffffec 	b	bef0 <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x3c>
    bf3c:	e1a00006 	mov	r0, r6
    bf40:	e2899001 	add	r9, r9, #1
    bf44:	eb001bb7 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    bf48:	e1500009 	cmp	r0, r9
    bf4c:	e2888001 	add	r8, r8, #1
    bf50:	8affffe5 	bhi	beec <CScreenDevice::EraseChar(unsigned int, unsigned int)+0x38>
    bf54:	e1cd40d0 	ldrd	r4, [sp]
    bf58:	e1cd60d8 	ldrd	r6, [sp, #8]
    bf5c:	e1cd81d0 	ldrd	r8, [sp, #16]
    bf60:	e59da018 	ldr	sl, [sp, #24]
    bf64:	e28dd01c 	add	sp, sp, #28
    bf68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000bf6c <CScreenDevice::InvertCursor()>:
    bf6c:	e5d03050 	ldrb	r3, [r0, #80]	; 0x50
    bf70:	e3530000 	cmp	r3, #0
    bf74:	1a000000 	bne	bf7c <CScreenDevice::InvertCursor()+0x10>
    bf78:	e12fff1e 	bx	lr
    bf7c:	ea000065 	b	c118 <CScreenDevice::InvertCursor() [clone .part.0]>

0000bf80 <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)>:
    bf80:	e590c030 	ldr	ip, [r0, #48]	; 0x30
    bf84:	e15c0001 	cmp	ip, r1
    bf88:	9a000007 	bls	bfac <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x2c>
    bf8c:	e590c034 	ldr	ip, [r0, #52]	; 0x34
    bf90:	e15c0002 	cmp	ip, r2
    bf94:	9a000004 	bls	bfac <CScreenDevice::SetPixel(unsigned int, unsigned int, unsigned short)+0x2c>
    bf98:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    bf9c:	e5900024 	ldr	r0, [r0, #36]	; 0x24
    bfa0:	e022129c 	mla	r2, ip, r2, r1
    bfa4:	e1a02082 	lsl	r2, r2, #1
    bfa8:	e18030b2 	strh	r3, [r0, r2]
    bfac:	e12fff1e 	bx	lr

0000bfb0 <CScreenDevice::GetPixel(unsigned int, unsigned int)>:
    bfb0:	e5903030 	ldr	r3, [r0, #48]	; 0x30
    bfb4:	e1530001 	cmp	r3, r1
    bfb8:	9a000002 	bls	bfc8 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x18>
    bfbc:	e5903034 	ldr	r3, [r0, #52]	; 0x34
    bfc0:	e1530002 	cmp	r3, r2
    bfc4:	8a000001 	bhi	bfd0 <CScreenDevice::GetPixel(unsigned int, unsigned int)+0x20>
    bfc8:	e1d005b4 	ldrh	r0, [r0, #84]	; 0x54
    bfcc:	e12fff1e 	bx	lr
    bfd0:	e5903024 	ldr	r3, [r0, #36]	; 0x24
    bfd4:	e590c02c 	ldr	ip, [r0, #44]	; 0x2c
    bfd8:	e022129c 	mla	r2, ip, r2, r1
    bfdc:	e1a02082 	lsl	r2, r2, #1
    bfe0:	e19300b2 	ldrh	r0, [r3, r2]
    bfe4:	e12fff1e 	bx	lr

0000bfe8 <CScreenDevice::Rotor(unsigned int, unsigned int)>:
    bfe8:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
    bfec:	e2015003 	and	r5, r1, #3
    bff0:	e2024003 	and	r4, r2, #3
    bff4:	e1cd60f8 	strd	r6, [sp, #8]
    bff8:	e1a06000 	mov	r6, r0
    bffc:	e2800020 	add	r0, r0, #32
    c000:	e58de010 	str	lr, [sp, #16]
    c004:	e24dd00c 	sub	sp, sp, #12
    c008:	e5967030 	ldr	r7, [r6, #48]	; 0x30
    c00c:	eb001b83 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    c010:	e1a02000 	mov	r2, r0
    c014:	e3053a40 	movw	r3, #23104	; 0x5a40
    c018:	e3403001 	movt	r3, #1
    c01c:	e3a0cb3e 	mov	ip, #63488	; 0xf800
    c020:	e0833004 	add	r3, r3, r4
    c024:	e0222295 	mla	r2, r5, r2, r2
    c028:	e1a00006 	mov	r0, r6
    c02c:	e1d312d4 	ldrsb	r1, [r3, #36]	; 0x24
    c030:	e3a03000 	mov	r3, #0
    c034:	e58dc000 	str	ip, [sp]
    c038:	e0472002 	sub	r2, r7, r2
    c03c:	ebffff5e 	bl	bdbc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c040:	e28dd00c 	add	sp, sp, #12
    c044:	e1cd40d0 	ldrd	r4, [sp]
    c048:	e1cd60d8 	ldrd	r6, [sp, #8]
    c04c:	e28dd010 	add	sp, sp, #16
    c050:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000c054 <CScreenDevice::DisplayChar(char) [clone .part.0]>:
    c054:	e52d4008 	str	r4, [sp, #-8]!
    c058:	e1a04000 	mov	r4, r0
    c05c:	e5d00056 	ldrb	r0, [r0, #86]	; 0x56
    c060:	e1c424d8 	ldrd	r2, [r4, #72]	; 0x48
    c064:	e58de004 	str	lr, [sp, #4]
    c068:	e24dd008 	sub	sp, sp, #8
    c06c:	e3500000 	cmp	r0, #0
    c070:	11d405b4 	ldrhne	r0, [r4, #84]	; 0x54
    c074:	01d405b2 	ldrheq	r0, [r4, #82]	; 0x52
    c078:	e58d0000 	str	r0, [sp]
    c07c:	e1a00004 	mov	r0, r4
    c080:	ebffff4d 	bl	bdbc <CScreenDevice::DisplayChar(char, unsigned int, unsigned int, unsigned short)>
    c084:	e1a00004 	mov	r0, r4
    c088:	e28dd008 	add	sp, sp, #8
    c08c:	e59d4000 	ldr	r4, [sp]
    c090:	e59de004 	ldr	lr, [sp, #4]
    c094:	e28dd008 	add	sp, sp, #8
    c098:	eafffe4f 	b	b9dc <CScreenDevice::CursorRight()>

0000c09c <CScreenDevice::EraseChars(unsigned int) [clone .part.0]>:
    c09c:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    c0a0:	e1a05000 	mov	r5, r0
    c0a4:	e5904048 	ldr	r4, [r0, #72]	; 0x48
    c0a8:	e1cd60f8 	strd	r6, [sp, #8]
    c0ac:	e2807020 	add	r7, r0, #32
    c0b0:	e1a06001 	mov	r6, r1
    c0b4:	e1a00007 	mov	r0, r7
    c0b8:	e58d8010 	str	r8, [sp, #16]
    c0bc:	e58de014 	str	lr, [sp, #20]
    c0c0:	eb001b56 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    c0c4:	e5953030 	ldr	r3, [r5, #48]	; 0x30
    c0c8:	e0264096 	mla	r6, r6, r0, r4
    c0cc:	e5954048 	ldr	r4, [r5, #72]	; 0x48
    c0d0:	e1560003 	cmp	r6, r3
    c0d4:	21a06003 	movcs	r6, r3
    c0d8:	e1560004 	cmp	r6, r4
    c0dc:	9a000008 	bls	c104 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x68>
    c0e0:	e1a01004 	mov	r1, r4
    c0e4:	e1a00005 	mov	r0, r5
    c0e8:	e595204c 	ldr	r2, [r5, #76]	; 0x4c
    c0ec:	ebffff70 	bl	beb4 <CScreenDevice::EraseChar(unsigned int, unsigned int)>
    c0f0:	e1a00007 	mov	r0, r7
    c0f4:	eb001b49 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    c0f8:	e0844000 	add	r4, r4, r0
    c0fc:	e1560004 	cmp	r6, r4
    c100:	8afffff6 	bhi	c0e0 <CScreenDevice::EraseChars(unsigned int) [clone .part.0]+0x44>
    c104:	e1cd40d0 	ldrd	r4, [sp]
    c108:	e1cd60d8 	ldrd	r6, [sp, #8]
    c10c:	e59d8010 	ldr	r8, [sp, #16]
    c110:	e28dd014 	add	sp, sp, #20
    c114:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000c118 <CScreenDevice::InvertCursor() [clone .part.0]>:
    c118:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    c11c:	e1cd60f8 	strd	r6, [sp, #8]
    c120:	e2806020 	add	r6, r0, #32
    c124:	e1a07000 	mov	r7, r0
    c128:	e1a00006 	mov	r0, r6
    c12c:	e58d8010 	str	r8, [sp, #16]
    c130:	e58de014 	str	lr, [sp, #20]
    c134:	eb001b3d 	bl	12e30 <CCharGenerator::GetUnderline() const>
    c138:	e1a05000 	mov	r5, r0
    c13c:	e1a00006 	mov	r0, r6
    c140:	eb001b38 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    c144:	e1500005 	cmp	r0, r5
    c148:	9a00001e 	bls	c1c8 <CScreenDevice::InvertCursor() [clone .part.0]+0xb0>
    c14c:	e3a04000 	mov	r4, #0
    c150:	ea000000 	b	c158 <CScreenDevice::InvertCursor() [clone .part.0]+0x40>
    c154:	e2844001 	add	r4, r4, #1
    c158:	e1a00006 	mov	r0, r6
    c15c:	eb001b2f 	bl	12e20 <CCharGenerator::GetCharWidth() const>
    c160:	e1500004 	cmp	r0, r4
    c164:	9a000012 	bls	c1b4 <CScreenDevice::InvertCursor() [clone .part.0]+0x9c>
    c168:	e5971030 	ldr	r1, [r7, #48]	; 0x30
    c16c:	e1c724d8 	ldrd	r2, [r7, #72]	; 0x48
    c170:	e0842002 	add	r2, r4, r2
    c174:	e0853003 	add	r3, r5, r3
    c178:	e1520001 	cmp	r2, r1
    c17c:	2afffff4 	bcs	c154 <CScreenDevice::InvertCursor() [clone .part.0]+0x3c>
    c180:	e5971034 	ldr	r1, [r7, #52]	; 0x34
    c184:	e1530001 	cmp	r3, r1
    c188:	2afffff1 	bcs	c154 <CScreenDevice::InvertCursor() [clone .part.0]+0x3c>
    c18c:	e5971024 	ldr	r1, [r7, #36]	; 0x24
    c190:	e597c02c 	ldr	ip, [r7, #44]	; 0x2c
    c194:	e1d705b4 	ldrh	r0, [r7, #84]	; 0x54
    c198:	e023239c 	mla	r3, ip, r3, r2
    c19c:	e1a03083 	lsl	r3, r3, #1
    c1a0:	e19120b3 	ldrh	r2, [r1, r3]
    c1a4:	e1520000 	cmp	r2, r0
    c1a8:	0a00000b 	beq	c1dc <CScreenDevice::InvertCursor() [clone .part.0]+0xc4>
    c1ac:	e18100b3 	strh	r0, [r1, r3]
    c1b0:	eaffffe7 	b	c154 <CScreenDevice::InvertCursor() [clone .part.0]+0x3c>
    c1b4:	e1a00006 	mov	r0, r6
    c1b8:	e2855001 	add	r5, r5, #1
    c1bc:	eb001b19 	bl	12e28 <CCharGenerator::GetCharHeight() const>
    c1c0:	e1500005 	cmp	r0, r5
    c1c4:	8affffe0 	bhi	c14c <CScreenDevice::InvertCursor() [clone .part.0]+0x34>
    c1c8:	e1cd40d0 	ldrd	r4, [sp]
    c1cc:	e1cd60d8 	ldrd	r6, [sp, #8]
    c1d0:	e59d8010 	ldr	r8, [sp, #16]
    c1d4:	e28dd014 	add	sp, sp, #20
    c1d8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c1dc:	e1d725b2 	ldrh	r2, [r7, #82]	; 0x52
    c1e0:	e18120b3 	strh	r2, [r1, r3]
    c1e4:	eaffffda 	b	c154 <CScreenDevice::InvertCursor() [clone .part.0]+0x3c>

0000c1e8 <CString::CString()>:
    c1e8:	e59f100c 	ldr	r1, [pc, #12]	; c1fc <CString::CString()+0x14>
    c1ec:	e3a02000 	mov	r2, #0
    c1f0:	e8800006 	stm	r0, {r1, r2}
    c1f4:	e5802008 	str	r2, [r0, #8]
    c1f8:	e12fff1e 	bx	lr
    c1fc:	00015a74 	.word	0x00015a74

0000c200 <CString::CString(char const*)>:
    c200:	e59f3048 	ldr	r3, [pc, #72]	; c250 <CString::CString(char const*)+0x50>
    c204:	e16d41f0 	strd	r4, [sp, #-16]!
    c208:	e1a04000 	mov	r4, r0
    c20c:	e1a00001 	mov	r0, r1
    c210:	e58d6008 	str	r6, [sp, #8]
    c214:	e1a05001 	mov	r5, r1
    c218:	e58de00c 	str	lr, [sp, #12]
    c21c:	e5843000 	str	r3, [r4]
    c220:	eb000a5e 	bl	eba0 <strlen>
    c224:	e2800001 	add	r0, r0, #1
    c228:	e5840008 	str	r0, [r4, #8]
    c22c:	eb000d21 	bl	f6b8 <operator new[](unsigned int)>
    c230:	e1a01005 	mov	r1, r5
    c234:	e5840004 	str	r0, [r4, #4]
    c238:	eb000b00 	bl	ee40 <strcpy>
    c23c:	e1a00004 	mov	r0, r4
    c240:	e1cd40d0 	ldrd	r4, [sp]
    c244:	e59d6008 	ldr	r6, [sp, #8]
    c248:	e28dd00c 	add	sp, sp, #12
    c24c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c250:	00015a74 	.word	0x00015a74

0000c254 <CString::CString(CString const&)>:
    c254:	e16d41f0 	strd	r4, [sp, #-16]!
    c258:	e3053a6c 	movw	r3, #23148	; 0x5a6c
    c25c:	e3403001 	movt	r3, #1
    c260:	e58d6008 	str	r6, [sp, #8]
    c264:	e1a06001 	mov	r6, r1
    c268:	e1a05000 	mov	r5, r0
    c26c:	e5962004 	ldr	r2, [r6, #4]
    c270:	e2831008 	add	r1, r3, #8
    c274:	e2834010 	add	r4, r3, #16
    c278:	e58de00c 	str	lr, [sp, #12]
    c27c:	e5851000 	str	r1, [r5]
    c280:	e3520000 	cmp	r2, #0
    c284:	11a00002 	movne	r0, r2
    c288:	01a00004 	moveq	r0, r4
    c28c:	eb000a43 	bl	eba0 <strlen>
    c290:	e2800001 	add	r0, r0, #1
    c294:	e5850008 	str	r0, [r5, #8]
    c298:	eb000d06 	bl	f6b8 <operator new[](unsigned int)>
    c29c:	e5961004 	ldr	r1, [r6, #4]
    c2a0:	e5850004 	str	r0, [r5, #4]
    c2a4:	e3510000 	cmp	r1, #0
    c2a8:	01a01004 	moveq	r1, r4
    c2ac:	eb000ae3 	bl	ee40 <strcpy>
    c2b0:	e1a00005 	mov	r0, r5
    c2b4:	e1cd40d0 	ldrd	r4, [sp]
    c2b8:	e59d6008 	ldr	r6, [sp, #8]
    c2bc:	e28dd00c 	add	sp, sp, #12
    c2c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000c2c4 <CString::CString(CString&&)>:
    c2c4:	e52d4008 	str	r4, [sp, #-8]!
    c2c8:	e3a02000 	mov	r2, #0
    c2cc:	e59f4024 	ldr	r4, [pc, #36]	; c2f8 <CString::CString(CString&&)+0x34>
    c2d0:	e58de004 	str	lr, [sp, #4]
    c2d4:	e591c004 	ldr	ip, [r1, #4]
    c2d8:	e5812004 	str	r2, [r1, #4]
    c2dc:	e591e008 	ldr	lr, [r1, #8]
    c2e0:	e5812008 	str	r2, [r1, #8]
    c2e4:	e8801010 	stm	r0, {r4, ip}
    c2e8:	e59d4000 	ldr	r4, [sp]
    c2ec:	e28dd004 	add	sp, sp, #4
    c2f0:	e580e008 	str	lr, [r0, #8]
    c2f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c2f8:	00015a74 	.word	0x00015a74

0000c2fc <CString::~CString()>:
    c2fc:	e52d4008 	str	r4, [sp, #-8]!
    c300:	e1a04000 	mov	r4, r0
    c304:	e5900004 	ldr	r0, [r0, #4]
    c308:	e58de004 	str	lr, [sp, #4]
    c30c:	e59f301c 	ldr	r3, [pc, #28]	; c330 <CString::~CString()+0x34>
    c310:	e3500000 	cmp	r0, #0
    c314:	e5843000 	str	r3, [r4]
    c318:	0a000000 	beq	c320 <CString::~CString()+0x24>
    c31c:	eb000cf0 	bl	f6e4 <operator delete[](void*)>
    c320:	e1a00004 	mov	r0, r4
    c324:	e59d4000 	ldr	r4, [sp]
    c328:	e28dd004 	add	sp, sp, #4
    c32c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c330:	00015a74 	.word	0x00015a74

0000c334 <CString::~CString()>:
    c334:	e52d4008 	str	r4, [sp, #-8]!
    c338:	e1a04000 	mov	r4, r0
    c33c:	e5900004 	ldr	r0, [r0, #4]
    c340:	e58de004 	str	lr, [sp, #4]
    c344:	e59f3028 	ldr	r3, [pc, #40]	; c374 <CString::~CString()+0x40>
    c348:	e3500000 	cmp	r0, #0
    c34c:	e5843000 	str	r3, [r4]
    c350:	0a000000 	beq	c358 <CString::~CString()+0x24>
    c354:	eb000ce2 	bl	f6e4 <operator delete[](void*)>
    c358:	e1a00004 	mov	r0, r4
    c35c:	e3a01010 	mov	r1, #16
    c360:	eb000ce9 	bl	f70c <operator delete(void*, unsigned int)>
    c364:	e1a00004 	mov	r0, r4
    c368:	e59d4000 	ldr	r4, [sp]
    c36c:	e28dd004 	add	sp, sp, #4
    c370:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c374:	00015a74 	.word	0x00015a74

0000c378 <CString::operator char const*() const>:
    c378:	e5900004 	ldr	r0, [r0, #4]
    c37c:	e59f3008 	ldr	r3, [pc, #8]	; c38c <CString::operator char const*() const+0x14>
    c380:	e3500000 	cmp	r0, #0
    c384:	01a00003 	moveq	r0, r3
    c388:	e12fff1e 	bx	lr
    c38c:	00015a7c 	.word	0x00015a7c

0000c390 <CString::operator=(char const*)>:
    c390:	e16d41f0 	strd	r4, [sp, #-16]!
    c394:	e1a04000 	mov	r4, r0
    c398:	e1a05001 	mov	r5, r1
    c39c:	e5900004 	ldr	r0, [r0, #4]
    c3a0:	e58d6008 	str	r6, [sp, #8]
    c3a4:	e58de00c 	str	lr, [sp, #12]
    c3a8:	e3500000 	cmp	r0, #0
    c3ac:	0a000000 	beq	c3b4 <CString::operator=(char const*)+0x24>
    c3b0:	eb000ccb 	bl	f6e4 <operator delete[](void*)>
    c3b4:	e1a00005 	mov	r0, r5
    c3b8:	eb0009f8 	bl	eba0 <strlen>
    c3bc:	e2800001 	add	r0, r0, #1
    c3c0:	e5840008 	str	r0, [r4, #8]
    c3c4:	eb000cbb 	bl	f6b8 <operator new[](unsigned int)>
    c3c8:	e1a01005 	mov	r1, r5
    c3cc:	e5840004 	str	r0, [r4, #4]
    c3d0:	eb000a9a 	bl	ee40 <strcpy>
    c3d4:	e5940004 	ldr	r0, [r4, #4]
    c3d8:	e1cd40d0 	ldrd	r4, [sp]
    c3dc:	e59d6008 	ldr	r6, [sp, #8]
    c3e0:	e28dd00c 	add	sp, sp, #12
    c3e4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000c3e8 <CString::operator=(CString const&)>:
    c3e8:	e16d41f0 	strd	r4, [sp, #-16]!
    c3ec:	e1a04000 	mov	r4, r0
    c3f0:	e1a05001 	mov	r5, r1
    c3f4:	e5900004 	ldr	r0, [r0, #4]
    c3f8:	e58d6008 	str	r6, [sp, #8]
    c3fc:	e58de00c 	str	lr, [sp, #12]
    c400:	e3500000 	cmp	r0, #0
    c404:	0a000000 	beq	c40c <CString::operator=(CString const&)+0x24>
    c408:	eb000cb5 	bl	f6e4 <operator delete[](void*)>
    c40c:	e5950004 	ldr	r0, [r5, #4]
    c410:	e59f603c 	ldr	r6, [pc, #60]	; c454 <CString::operator=(CString const&)+0x6c>
    c414:	e3500000 	cmp	r0, #0
    c418:	01a00006 	moveq	r0, r6
    c41c:	eb0009df 	bl	eba0 <strlen>
    c420:	e2800001 	add	r0, r0, #1
    c424:	e5840008 	str	r0, [r4, #8]
    c428:	eb000ca2 	bl	f6b8 <operator new[](unsigned int)>
    c42c:	e5840004 	str	r0, [r4, #4]
    c430:	e5951004 	ldr	r1, [r5, #4]
    c434:	e3510000 	cmp	r1, #0
    c438:	01a01006 	moveq	r1, r6
    c43c:	eb000a7f 	bl	ee40 <strcpy>
    c440:	e1a00004 	mov	r0, r4
    c444:	e1cd40d0 	ldrd	r4, [sp]
    c448:	e59d6008 	ldr	r6, [sp, #8]
    c44c:	e28dd00c 	add	sp, sp, #12
    c450:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c454:	00015a7c 	.word	0x00015a7c

0000c458 <CString::operator=(CString&&)>:
    c458:	e16d41f0 	strd	r4, [sp, #-16]!
    c45c:	e1a05000 	mov	r5, r0
    c460:	e1a04001 	mov	r4, r1
    c464:	e5900004 	ldr	r0, [r0, #4]
    c468:	e58d6008 	str	r6, [sp, #8]
    c46c:	e58de00c 	str	lr, [sp, #12]
    c470:	e3500000 	cmp	r0, #0
    c474:	0a000000 	beq	c47c <CString::operator=(CString&&)+0x24>
    c478:	eb000c99 	bl	f6e4 <operator delete[](void*)>
    c47c:	e9940006 	ldmib	r4, {r1, r2}
    c480:	e3a03000 	mov	r3, #0
    c484:	e1a00005 	mov	r0, r5
    c488:	e59d6008 	ldr	r6, [sp, #8]
    c48c:	e9850006 	stmib	r5, {r1, r2}
    c490:	e5843004 	str	r3, [r4, #4]
    c494:	e5843008 	str	r3, [r4, #8]
    c498:	e1cd40d0 	ldrd	r4, [sp]
    c49c:	e28dd00c 	add	sp, sp, #12
    c4a0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000c4a4 <CString::GetLength() const>:
    c4a4:	e5900004 	ldr	r0, [r0, #4]
    c4a8:	e3500000 	cmp	r0, #0
    c4ac:	0a000000 	beq	c4b4 <CString::GetLength() const+0x10>
    c4b0:	ea0009ba 	b	eba0 <strlen>
    c4b4:	e12fff1e 	bx	lr

0000c4b8 <CString::Append(char const*)>:
    c4b8:	e16d41f0 	strd	r4, [sp, #-16]!
    c4bc:	e1a04000 	mov	r4, r0
    c4c0:	e3a03001 	mov	r3, #1
    c4c4:	e5900004 	ldr	r0, [r0, #4]
    c4c8:	e58d6008 	str	r6, [sp, #8]
    c4cc:	e1a06001 	mov	r6, r1
    c4d0:	e58de00c 	str	lr, [sp, #12]
    c4d4:	e5843008 	str	r3, [r4, #8]
    c4d8:	e3500000 	cmp	r0, #0
    c4dc:	0a000003 	beq	c4f0 <CString::Append(char const*)+0x38>
    c4e0:	eb0009ae 	bl	eba0 <strlen>
    c4e4:	e5943008 	ldr	r3, [r4, #8]
    c4e8:	e0833000 	add	r3, r3, r0
    c4ec:	e5843008 	str	r3, [r4, #8]
    c4f0:	e1a00006 	mov	r0, r6
    c4f4:	eb0009a9 	bl	eba0 <strlen>
    c4f8:	e5943008 	ldr	r3, [r4, #8]
    c4fc:	e0800003 	add	r0, r0, r3
    c500:	e5840008 	str	r0, [r4, #8]
    c504:	eb000c6b 	bl	f6b8 <operator new[](unsigned int)>
    c508:	e5941004 	ldr	r1, [r4, #4]
    c50c:	e1a05000 	mov	r5, r0
    c510:	e3510000 	cmp	r1, #0
    c514:	05c01000 	strbeq	r1, [r0]
    c518:	0a000004 	beq	c530 <CString::Append(char const*)+0x78>
    c51c:	eb000a47 	bl	ee40 <strcpy>
    c520:	e5940004 	ldr	r0, [r4, #4]
    c524:	e3500000 	cmp	r0, #0
    c528:	0a000000 	beq	c530 <CString::Append(char const*)+0x78>
    c52c:	eb000c6c 	bl	f6e4 <operator delete[](void*)>
    c530:	e1a01006 	mov	r1, r6
    c534:	e1a00005 	mov	r0, r5
    c538:	eb000a5a 	bl	eea8 <strcat>
    c53c:	e59d6008 	ldr	r6, [sp, #8]
    c540:	e5845004 	str	r5, [r4, #4]
    c544:	e1cd40d0 	ldrd	r4, [sp]
    c548:	e28dd00c 	add	sp, sp, #12
    c54c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000c550 <CString::Compare(char const*) const>:
    c550:	e5900004 	ldr	r0, [r0, #4]
    c554:	ea00099b 	b	ebc8 <strcmp>

0000c558 <CString::Find(char) const>:
    c558:	e5902004 	ldr	r2, [r0, #4]
    c55c:	e1d230d0 	ldrsb	r3, [r2]
    c560:	e3530000 	cmp	r3, #0
    c564:	0a000008 	beq	c58c <CString::Find(char) const+0x34>
    c568:	e3a00000 	mov	r0, #0
    c56c:	ea000003 	b	c580 <CString::Find(char) const+0x28>
    c570:	e1f230d1 	ldrsb	r3, [r2, #1]!
    c574:	e2800001 	add	r0, r0, #1
    c578:	e3530000 	cmp	r3, #0
    c57c:	0a000002 	beq	c58c <CString::Find(char) const+0x34>
    c580:	e1510003 	cmp	r1, r3
    c584:	1afffff9 	bne	c570 <CString::Find(char) const+0x18>
    c588:	e12fff1e 	bx	lr
    c58c:	e3e00000 	mvn	r0, #0
    c590:	e12fff1e 	bx	lr

0000c594 <CString::Replace(char const*, char const*)>:
    c594:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    c598:	e1cd60f8 	strd	r6, [sp, #8]
    c59c:	e1cd81f0 	strd	r8, [sp, #16]
    c5a0:	e58da018 	str	sl, [sp, #24]
    c5a4:	e58de01c 	str	lr, [sp, #28]
    c5a8:	e24dd010 	sub	sp, sp, #16
    c5ac:	e1d170d0 	ldrsb	r7, [r1]
    c5b0:	e3570000 	cmp	r7, #0
    c5b4:	1a000007 	bne	c5d8 <CString::Replace(char const*, char const*)+0x44>
    c5b8:	e1a00007 	mov	r0, r7
    c5bc:	e28dd010 	add	sp, sp, #16
    c5c0:	e1cd40d0 	ldrd	r4, [sp]
    c5c4:	e1cd60d8 	ldrd	r6, [sp, #8]
    c5c8:	e1cd81d0 	ldrd	r8, [sp, #16]
    c5cc:	e59da018 	ldr	sl, [sp, #24]
    c5d0:	e28dd01c 	add	sp, sp, #28
    c5d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c5d8:	e1a05000 	mov	r5, r0
    c5dc:	e1a06001 	mov	r6, r1
    c5e0:	e1a0000d 	mov	r0, sp
    c5e4:	e5951004 	ldr	r1, [r5, #4]
    c5e8:	e1a08002 	mov	r8, r2
    c5ec:	ebffff03 	bl	c200 <CString::CString(char const*)>
    c5f0:	e5950004 	ldr	r0, [r5, #4]
    c5f4:	e3500000 	cmp	r0, #0
    c5f8:	0a000000 	beq	c600 <CString::Replace(char const*, char const*)+0x6c>
    c5fc:	eb000c38 	bl	f6e4 <operator delete[](void*)>
    c600:	e3a00040 	mov	r0, #64	; 0x40
    c604:	e3a07000 	mov	r7, #0
    c608:	e5850008 	str	r0, [r5, #8]
    c60c:	eb000c29 	bl	f6b8 <operator new[](unsigned int)>
    c610:	e59d9004 	ldr	r9, [sp, #4]
    c614:	e5850004 	str	r0, [r5, #4]
    c618:	e585000c 	str	r0, [r5, #12]
    c61c:	e1d610d0 	ldrsb	r1, [r6]
    c620:	e1a00009 	mov	r0, r9
    c624:	eb000a30 	bl	eeec <strchr>
    c628:	e2504000 	subs	r4, r0, #0
    c62c:	0a00002a 	beq	c6dc <CString::Replace(char const*, char const*)+0x148>
    c630:	e1590004 	cmp	r9, r4
    c634:	3a000016 	bcc	c694 <CString::Replace(char const*, char const*)+0x100>
    c638:	e1d630d1 	ldrsb	r3, [r6, #1]
    c63c:	e2842001 	add	r2, r4, #1
    c640:	e286e001 	add	lr, r6, #1
    c644:	e3530000 	cmp	r3, #0
    c648:	0a00001d 	beq	c6c4 <CString::Replace(char const*, char const*)+0x130>
    c64c:	e1a0c002 	mov	ip, r2
    c650:	ea000002 	b	c660 <CString::Replace(char const*, char const*)+0xcc>
    c654:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    c658:	e3530000 	cmp	r3, #0
    c65c:	0a000018 	beq	c6c4 <CString::Replace(char const*, char const*)+0x130>
    c660:	e0dc40d1 	ldrsb	r4, [ip], #1
    c664:	e1540003 	cmp	r4, r3
    c668:	e1a0200c 	mov	r2, ip
    c66c:	0afffff8 	beq	c654 <CString::Replace(char const*, char const*)+0xc0>
    c670:	e3a01001 	mov	r1, #1
    c674:	e1a00005 	mov	r0, r5
    c678:	e0d940d1 	ldrsb	r4, [r9], #1
    c67c:	eb00048a 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c680:	e595300c 	ldr	r3, [r5, #12]
    c684:	e2832001 	add	r2, r3, #1
    c688:	e585200c 	str	r2, [r5, #12]
    c68c:	e5c34000 	strb	r4, [r3]
    c690:	eaffffe1 	b	c61c <CString::Replace(char const*, char const*)+0x88>
    c694:	e3a01001 	mov	r1, #1
    c698:	e1a00005 	mov	r0, r5
    c69c:	e0d9a0d1 	ldrsb	sl, [r9], #1
    c6a0:	eb000481 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c6a4:	e595300c 	ldr	r3, [r5, #12]
    c6a8:	e1540009 	cmp	r4, r9
    c6ac:	e2832001 	add	r2, r3, #1
    c6b0:	e585200c 	str	r2, [r5, #12]
    c6b4:	e5c3a000 	strb	sl, [r3]
    c6b8:	1afffff5 	bne	c694 <CString::Replace(char const*, char const*)+0x100>
    c6bc:	e1a09004 	mov	r9, r4
    c6c0:	eaffffdc 	b	c638 <CString::Replace(char const*, char const*)+0xa4>
    c6c4:	e1a01008 	mov	r1, r8
    c6c8:	e1a00005 	mov	r0, r5
    c6cc:	e2877001 	add	r7, r7, #1
    c6d0:	e1a09002 	mov	r9, r2
    c6d4:	eb000342 	bl	d3e4 <CString::PutString(char const*)>
    c6d8:	eaffffcf 	b	c61c <CString::Replace(char const*, char const*)+0x88>
    c6dc:	e1a00005 	mov	r0, r5
    c6e0:	e1a01009 	mov	r1, r9
    c6e4:	eb00033e 	bl	d3e4 <CString::PutString(char const*)>
    c6e8:	e595200c 	ldr	r2, [r5, #12]
    c6ec:	e59f3018 	ldr	r3, [pc, #24]	; c70c <CString::Replace(char const*, char const*)+0x178>
    c6f0:	e5c24000 	strb	r4, [r2]
    c6f4:	e59d0004 	ldr	r0, [sp, #4]
    c6f8:	e58d3000 	str	r3, [sp]
    c6fc:	e3500000 	cmp	r0, #0
    c700:	0affffac 	beq	c5b8 <CString::Replace(char const*, char const*)+0x24>
    c704:	eb000bf6 	bl	f6e4 <operator delete[](void*)>
    c708:	eaffffaa 	b	c5b8 <CString::Replace(char const*, char const*)+0x24>
    c70c:	00015a74 	.word	0x00015a74

0000c710 <CString::Format(char const*, ...)>:
    c710:	e92d000e 	push	{r1, r2, r3}
    c714:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    c718:	e24dd008 	sub	sp, sp, #8
    c71c:	e59d100c 	ldr	r1, [sp, #12]
    c720:	e28d2010 	add	r2, sp, #16
    c724:	e58d2004 	str	r2, [sp, #4]
    c728:	eb000003 	bl	c73c <CString::FormatV(char const*, std::__va_list)>
    c72c:	e28dd008 	add	sp, sp, #8
    c730:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
    c734:	e28dd00c 	add	sp, sp, #12
    c738:	e12fff1e 	bx	lr

0000c73c <CString::FormatV(char const*, std::__va_list)>:
    c73c:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
    c740:	e1cd60f8 	strd	r6, [sp, #8]
    c744:	e1cd81f0 	strd	r8, [sp, #16]
    c748:	e1a08001 	mov	r8, r1
    c74c:	e1cda1f8 	strd	sl, [sp, #24]
    c750:	e58de020 	str	lr, [sp, #32]
    c754:	e24dd06c 	sub	sp, sp, #108	; 0x6c
    c758:	e58d2018 	str	r2, [sp, #24]
    c75c:	e58d002c 	str	r0, [sp, #44]	; 0x2c
    c760:	e5900004 	ldr	r0, [r0, #4]
    c764:	e3500000 	cmp	r0, #0
    c768:	0a000000 	beq	c770 <CString::FormatV(char const*, std::__va_list)+0x34>
    c76c:	eb000bdc 	bl	f6e4 <operator delete[](void*)>
    c770:	e59d502c 	ldr	r5, [sp, #44]	; 0x2c
    c774:	e3a00040 	mov	r0, #64	; 0x40
    c778:	e5850008 	str	r0, [r5, #8]
    c77c:	eb000bcd 	bl	f6b8 <operator new[](unsigned int)>
    c780:	e5850004 	str	r0, [r5, #4]
    c784:	e585000c 	str	r0, [r5, #12]
    c788:	e1d840d0 	ldrsb	r4, [r8]
    c78c:	e3540000 	cmp	r4, #0
    c790:	0a000066 	beq	c930 <CString::FormatV(char const*, std::__va_list)+0x1f4>
    c794:	e30c3ccd 	movw	r3, #52429	; 0xcccd
    c798:	e34c3ccc 	movt	r3, #52428	; 0xcccc
    c79c:	e58d303c 	str	r3, [sp, #60]	; 0x3c
    c7a0:	e3540025 	cmp	r4, #37	; 0x25
    c7a4:	1a000054 	bne	c8fc <CString::FormatV(char const*, std::__va_list)+0x1c0>
    c7a8:	e1d830d1 	ldrsb	r3, [r8, #1]
    c7ac:	e3530025 	cmp	r3, #37	; 0x25
    c7b0:	0a000067 	beq	c954 <CString::FormatV(char const*, std::__va_list)+0x218>
    c7b4:	e3530023 	cmp	r3, #35	; 0x23
    c7b8:	0a00006e 	beq	c978 <CString::FormatV(char const*, std::__va_list)+0x23c>
    c7bc:	e2888001 	add	r8, r8, #1
    c7c0:	e3a00000 	mov	r0, #0
    c7c4:	e353002d 	cmp	r3, #45	; 0x2d
    c7c8:	e3a04000 	mov	r4, #0
    c7cc:	01d830d1 	ldrsbeq	r3, [r8, #1]
    c7d0:	03a02001 	moveq	r2, #1
    c7d4:	13a02000 	movne	r2, #0
    c7d8:	00888002 	addeq	r8, r8, r2
    c7dc:	e58d2020 	str	r2, [sp, #32]
    c7e0:	e3530030 	cmp	r3, #48	; 0x30
    c7e4:	01d830d1 	ldrsbeq	r3, [r8, #1]
    c7e8:	03a02001 	moveq	r2, #1
    c7ec:	13a02000 	movne	r2, #0
    c7f0:	00888002 	addeq	r8, r8, r2
    c7f4:	e58d2028 	str	r2, [sp, #40]	; 0x28
    c7f8:	e2432030 	sub	r2, r3, #48	; 0x30
    c7fc:	e6ef2072 	uxtb	r2, r2
    c800:	e3520009 	cmp	r2, #9
    c804:	8a000007 	bhi	c828 <CString::FormatV(char const*, std::__va_list)+0xec>
    c808:	e0844104 	add	r4, r4, r4, lsl #2
    c80c:	e0834084 	add	r4, r3, r4, lsl #1
    c810:	e1f830d1 	ldrsb	r3, [r8, #1]!
    c814:	e2444030 	sub	r4, r4, #48	; 0x30
    c818:	e2432030 	sub	r2, r3, #48	; 0x30
    c81c:	e6ef2072 	uxtb	r2, r2
    c820:	e3520009 	cmp	r2, #9
    c824:	9afffff7 	bls	c808 <CString::FormatV(char const*, std::__va_list)+0xcc>
    c828:	e353002e 	cmp	r3, #46	; 0x2e
    c82c:	0a000055 	beq	c988 <CString::FormatV(char const*, std::__va_list)+0x24c>
    c830:	e1d890d0 	ldrsb	r9, [r8]
    c834:	e3a01006 	mov	r1, #6
    c838:	e359006c 	cmp	r9, #108	; 0x6c
    c83c:	13a03000 	movne	r3, #0
    c840:	158d3004 	strne	r3, [sp, #4]
    c844:	1a000007 	bne	c868 <CString::FormatV(char const*, std::__va_list)+0x12c>
    c848:	e1d890d1 	ldrsb	r9, [r8, #1]
    c84c:	e359006c 	cmp	r9, #108	; 0x6c
    c850:	03a03001 	moveq	r3, #1
    c854:	01d890d2 	ldrsbeq	r9, [r8, #2]
    c858:	13a03000 	movne	r3, #0
    c85c:	00888003 	addeq	r8, r8, r3
    c860:	e2888001 	add	r8, r8, #1
    c864:	e58d3004 	str	r3, [sp, #4]
    c868:	e2493058 	sub	r3, r9, #88	; 0x58
    c86c:	e3530020 	cmp	r3, #32
    c870:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
    c874:	ea000053 	b	c9c8 <CString::FormatV(char const*, std::__va_list)+0x28c>
    c878:	0000c9f8 	.word	0x0000c9f8
    c87c:	0000c9c8 	.word	0x0000c9c8
    c880:	0000c9c8 	.word	0x0000c9c8
    c884:	0000c9c8 	.word	0x0000c9c8
    c888:	0000c9c8 	.word	0x0000c9c8
    c88c:	0000c9c8 	.word	0x0000c9c8
    c890:	0000c9c8 	.word	0x0000c9c8
    c894:	0000c9c8 	.word	0x0000c9c8
    c898:	0000c9c8 	.word	0x0000c9c8
    c89c:	0000c9c8 	.word	0x0000c9c8
    c8a0:	0000c9c8 	.word	0x0000c9c8
    c8a4:	0000ced4 	.word	0x0000ced4
    c8a8:	0000cbe0 	.word	0x0000cbe0
    c8ac:	0000c9c8 	.word	0x0000c9c8
    c8b0:	0000cf18 	.word	0x0000cf18
    c8b4:	0000c9c8 	.word	0x0000c9c8
    c8b8:	0000c9c8 	.word	0x0000c9c8
    c8bc:	0000cbe0 	.word	0x0000cbe0
    c8c0:	0000c9c8 	.word	0x0000c9c8
    c8c4:	0000c9c8 	.word	0x0000c9c8
    c8c8:	0000c9c8 	.word	0x0000c9c8
    c8cc:	0000c9c8 	.word	0x0000c9c8
    c8d0:	0000c9c8 	.word	0x0000c9c8
    c8d4:	0000ce0c 	.word	0x0000ce0c
    c8d8:	0000c9f8 	.word	0x0000c9f8
    c8dc:	0000c9c8 	.word	0x0000c9c8
    c8e0:	0000c9c8 	.word	0x0000c9c8
    c8e4:	0000cdd0 	.word	0x0000cdd0
    c8e8:	0000c9c8 	.word	0x0000c9c8
    c8ec:	0000d130 	.word	0x0000d130
    c8f0:	0000c9c8 	.word	0x0000c9c8
    c8f4:	0000c9c8 	.word	0x0000c9c8
    c8f8:	0000c9f8 	.word	0x0000c9f8
    c8fc:	e3a01001 	mov	r1, #1
    c900:	e1a00005 	mov	r0, r5
    c904:	eb0003e8 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c908:	e595300c 	ldr	r3, [r5, #12]
    c90c:	e2832001 	add	r2, r3, #1
    c910:	e585200c 	str	r2, [r5, #12]
    c914:	e5c34000 	strb	r4, [r3]
    c918:	e2888001 	add	r8, r8, #1
    c91c:	e1d840d0 	ldrsb	r4, [r8]
    c920:	e3540000 	cmp	r4, #0
    c924:	1affff9d 	bne	c7a0 <CString::FormatV(char const*, std::__va_list)+0x64>
    c928:	e59d302c 	ldr	r3, [sp, #44]	; 0x2c
    c92c:	e593000c 	ldr	r0, [r3, #12]
    c930:	e3a03000 	mov	r3, #0
    c934:	e5c03000 	strb	r3, [r0]
    c938:	e28dd06c 	add	sp, sp, #108	; 0x6c
    c93c:	e1cd40d0 	ldrd	r4, [sp]
    c940:	e1cd60d8 	ldrd	r6, [sp, #8]
    c944:	e1cd81d0 	ldrd	r8, [sp, #16]
    c948:	e1cda1d8 	ldrd	sl, [sp, #24]
    c94c:	e28dd020 	add	sp, sp, #32
    c950:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    c954:	e3a01001 	mov	r1, #1
    c958:	e1a00005 	mov	r0, r5
    c95c:	eb0003d2 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c960:	e595300c 	ldr	r3, [r5, #12]
    c964:	e2888002 	add	r8, r8, #2
    c968:	e2832001 	add	r2, r3, #1
    c96c:	e585200c 	str	r2, [r5, #12]
    c970:	e5c34000 	strb	r4, [r3]
    c974:	eaffffe8 	b	c91c <CString::FormatV(char const*, std::__va_list)+0x1e0>
    c978:	e1d830d2 	ldrsb	r3, [r8, #2]
    c97c:	e3a00001 	mov	r0, #1
    c980:	e2888002 	add	r8, r8, #2
    c984:	eaffff8e 	b	c7c4 <CString::FormatV(char const*, std::__va_list)+0x88>
    c988:	e1d890d1 	ldrsb	r9, [r8, #1]
    c98c:	e3a01000 	mov	r1, #0
    c990:	e2888001 	add	r8, r8, #1
    c994:	e2493030 	sub	r3, r9, #48	; 0x30
    c998:	e6ef3073 	uxtb	r3, r3
    c99c:	e3530009 	cmp	r3, #9
    c9a0:	8affffa4 	bhi	c838 <CString::FormatV(char const*, std::__va_list)+0xfc>
    c9a4:	e0811101 	add	r1, r1, r1, lsl #2
    c9a8:	e0891081 	add	r1, r9, r1, lsl #1
    c9ac:	e1f890d1 	ldrsb	r9, [r8, #1]!
    c9b0:	e2411030 	sub	r1, r1, #48	; 0x30
    c9b4:	e2493030 	sub	r3, r9, #48	; 0x30
    c9b8:	e6ef3073 	uxtb	r3, r3
    c9bc:	e3530009 	cmp	r3, #9
    c9c0:	9afffff7 	bls	c9a4 <CString::FormatV(char const*, std::__va_list)+0x268>
    c9c4:	eaffff9b 	b	c838 <CString::FormatV(char const*, std::__va_list)+0xfc>
    c9c8:	e3a01001 	mov	r1, #1
    c9cc:	e1a00005 	mov	r0, r5
    c9d0:	eb0003b5 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    c9d4:	e595300c 	ldr	r3, [r5, #12]
    c9d8:	e3a01001 	mov	r1, #1
    c9dc:	e3a02025 	mov	r2, #37	; 0x25
    c9e0:	e1a00005 	mov	r0, r5
    c9e4:	e083c001 	add	ip, r3, r1
    c9e8:	e585c00c 	str	ip, [r5, #12]
    c9ec:	e5c32000 	strb	r2, [r3]
    c9f0:	e1d840d0 	ldrsb	r4, [r8]
    c9f4:	eaffffc2 	b	c904 <CString::FormatV(char const*, std::__va_list)+0x1c8>
    c9f8:	e3500000 	cmp	r0, #0
    c9fc:	03a0c010 	moveq	ip, #16
    ca00:	0a000007 	beq	ca24 <CString::FormatV(char const*, std::__va_list)+0x2e8>
    ca04:	e59f1980 	ldr	r1, [pc, #2432]	; d38c <CString::FormatV(char const*, std::__va_list)+0xc50>
    ca08:	e3590058 	cmp	r9, #88	; 0x58
    ca0c:	e1a00005 	mov	r0, r5
    ca10:	e2813004 	add	r3, r1, #4
    ca14:	01a01003 	moveq	r1, r3
    ca18:	eb000271 	bl	d3e4 <CString::PutString(char const*)>
    ca1c:	e1d890d0 	ldrsb	r9, [r8]
    ca20:	e3a0c010 	mov	ip, #16
    ca24:	e59d3004 	ldr	r3, [sp, #4]
    ca28:	e3530000 	cmp	r3, #0
    ca2c:	e59d3018 	ldr	r3, [sp, #24]
    ca30:	0a000106 	beq	ce50 <CString::FormatV(char const*, std::__va_list)+0x714>
    ca34:	ee80cb90 	vdup.32	d16, ip
    ca38:	e2833007 	add	r3, r3, #7
    ca3c:	e3c31007 	bic	r1, r3, #7
    ca40:	e0c120d8 	ldrd	r2, [r1], #8
    ca44:	e1cd21f0 	strd	r2, [sp, #16]
    ca48:	e58d1018 	str	r1, [sp, #24]
    ca4c:	f3e000b0 	vshr.u64	d16, d16, #32
    ca50:	ec510b30 	vmov	r0, r1, d16
    ca54:	edcd0b02 	vstr	d16, [sp, #8]
    ca58:	e1530001 	cmp	r3, r1
    ca5c:	01520000 	cmpeq	r2, r0
    ca60:	3a000224 	bcc	d2f8 <CString::FormatV(char const*, std::__va_list)+0xbbc>
    ca64:	e3a06001 	mov	r6, #1
    ca68:	e3a07000 	mov	r7, #0
    ca6c:	e58d9004 	str	r9, [sp, #4]
    ca70:	e1a09003 	mov	r9, r3
    ca74:	e58d401c 	str	r4, [sp, #28]
    ca78:	e1a04000 	mov	r4, r0
    ca7c:	e58d5024 	str	r5, [sp, #36]	; 0x24
    ca80:	e1a05001 	mov	r5, r1
    ca84:	e58d8030 	str	r8, [sp, #48]	; 0x30
    ca88:	e1a08002 	mov	r8, r2
    ca8c:	e0030596 	mul	r3, r6, r5
    ca90:	e1a00008 	mov	r0, r8
    ca94:	e1a01009 	mov	r1, r9
    ca98:	e0233794 	mla	r3, r4, r7, r3
    ca9c:	e0876496 	umull	r6, r7, r6, r4
    caa0:	e0837007 	add	r7, r3, r7
    caa4:	e1a02006 	mov	r2, r6
    caa8:	e1a03007 	mov	r3, r7
    caac:	fa0021ff 	blx	152b0 <__aeabi_uldivmod>
    cab0:	e1510005 	cmp	r1, r5
    cab4:	e1a0a000 	mov	sl, r0
    cab8:	01500004 	cmpeq	r0, r4
    cabc:	e1a0b001 	mov	fp, r1
    cac0:	2afffff1 	bcs	ca8c <CString::FormatV(char const*, std::__va_list)+0x350>
    cac4:	e59d9004 	ldr	r9, [sp, #4]
    cac8:	e59d401c 	ldr	r4, [sp, #28]
    cacc:	e59d5024 	ldr	r5, [sp, #36]	; 0x24
    cad0:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
    cad4:	e3590058 	cmp	r9, #88	; 0x58
    cad8:	e28d9044 	add	r9, sp, #68	; 0x44
    cadc:	13a03057 	movne	r3, #87	; 0x57
    cae0:	03a03037 	moveq	r3, #55	; 0x37
    cae4:	e58d9004 	str	r9, [sp, #4]
    cae8:	e58d301c 	str	r3, [sp, #28]
    caec:	e58d9024 	str	r9, [sp, #36]	; 0x24
    caf0:	e1cd43f0 	strd	r4, [sp, #48]	; 0x30
    caf4:	e58d8038 	str	r8, [sp, #56]	; 0x38
    caf8:	e1cd80d8 	ldrd	r8, [sp, #8]
    cafc:	e1cd41d0 	ldrd	r4, [sp, #16]
    cb00:	ea000008 	b	cb28 <CString::FormatV(char const*, std::__va_list)+0x3ec>
    cb04:	e58d3008 	str	r3, [sp, #8]
    cb08:	e58d2010 	str	r2, [sp, #16]
    cb0c:	fa0021e7 	blx	152b0 <__aeabi_uldivmod>
    cb10:	e59d3008 	ldr	r3, [sp, #8]
    cb14:	e1a0a000 	mov	sl, r0
    cb18:	e1a0b001 	mov	fp, r1
    cb1c:	e59d2010 	ldr	r2, [sp, #16]
    cb20:	e1a07003 	mov	r7, r3
    cb24:	e1a06002 	mov	r6, r2
    cb28:	e1a00004 	mov	r0, r4
    cb2c:	e1a01005 	mov	r1, r5
    cb30:	e1a02006 	mov	r2, r6
    cb34:	e1a03007 	mov	r3, r7
    cb38:	fa0021dc 	blx	152b0 <__aeabi_uldivmod>
    cb3c:	e59de004 	ldr	lr, [sp, #4]
    cb40:	e35b0000 	cmp	fp, #0
    cb44:	e1a04002 	mov	r4, r2
    cb48:	035a0009 	cmpeq	sl, #9
    cb4c:	e1a05003 	mov	r5, r3
    cb50:	e59d101c 	ldr	r1, [sp, #28]
    cb54:	e1a02008 	mov	r2, r8
    cb58:	e1a03009 	mov	r3, r9
    cb5c:	e1a00006 	mov	r0, r6
    cb60:	e081c00a 	add	ip, r1, sl
    cb64:	e28aa030 	add	sl, sl, #48	; 0x30
    cb68:	e6afc07c 	sxtb	ip, ip
    cb6c:	96afc07a 	sxtbls	ip, sl
    cb70:	e1a01007 	mov	r1, r7
    cb74:	e4cec001 	strb	ip, [lr], #1
    cb78:	e58de004 	str	lr, [sp, #4]
    cb7c:	fa0021cb 	blx	152b0 <__aeabi_uldivmod>
    cb80:	e1570009 	cmp	r7, r9
    cb84:	e1a02000 	mov	r2, r0
    cb88:	01560008 	cmpeq	r6, r8
    cb8c:	e1a03001 	mov	r3, r1
    cb90:	e1a00004 	mov	r0, r4
    cb94:	e1a01005 	mov	r1, r5
    cb98:	2affffd9 	bcs	cb04 <CString::FormatV(char const*, std::__va_list)+0x3c8>
    cb9c:	e59d9004 	ldr	r9, [sp, #4]
    cba0:	e3a03000 	mov	r3, #0
    cba4:	e1cd43d0 	ldrd	r4, [sp, #48]	; 0x30
    cba8:	e59d8038 	ldr	r8, [sp, #56]	; 0x38
    cbac:	e5c93000 	strb	r3, [r9]
    cbb0:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    cbb4:	eb0007f9 	bl	eba0 <strlen>
    cbb8:	e59d3020 	ldr	r3, [sp, #32]
    cbbc:	e1a06000 	mov	r6, r0
    cbc0:	e3530000 	cmp	r3, #0
    cbc4:	1a0000f2 	bne	cf94 <CString::FormatV(char const*, std::__va_list)+0x858>
    cbc8:	e1500004 	cmp	r0, r4
    cbcc:	3a000103 	bcc	cfe0 <CString::FormatV(char const*, std::__va_list)+0x8a4>
    cbd0:	e1a00005 	mov	r0, r5
    cbd4:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    cbd8:	eb000201 	bl	d3e4 <CString::PutString(char const*)>
    cbdc:	eaffff4d 	b	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    cbe0:	e59d3004 	ldr	r3, [sp, #4]
    cbe4:	e3530000 	cmp	r3, #0
    cbe8:	e59d3018 	ldr	r3, [sp, #24]
    cbec:	0a00012d 	beq	d0a8 <CString::FormatV(char const*, std::__va_list)+0x96c>
    cbf0:	e2833007 	add	r3, r3, #7
    cbf4:	e3c31007 	bic	r1, r3, #7
    cbf8:	e0c120d8 	ldrd	r2, [r1], #8
    cbfc:	e3520000 	cmp	r2, #0
    cc00:	e1a07003 	mov	r7, r3
    cc04:	e58d1018 	str	r1, [sp, #24]
    cc08:	e2d33000 	sbcs	r3, r3, #0
    cc0c:	e1a06002 	mov	r6, r2
    cc10:	a3a03000 	movge	r3, #0
    cc14:	a58d3004 	strge	r3, [sp, #4]
    cc18:	aa000003 	bge	cc2c <CString::FormatV(char const*, std::__va_list)+0x4f0>
    cc1c:	e2762000 	rsbs	r2, r6, #0
    cc20:	e2e73000 	rsc	r3, r7, #0
    cc24:	e1a06002 	mov	r6, r2
    cc28:	e1a07003 	mov	r7, r3
    cc2c:	e356000a 	cmp	r6, #10
    cc30:	e1a02006 	mov	r2, r6
    cc34:	e2d71000 	sbcs	r1, r7, #0
    cc38:	e1a03007 	mov	r3, r7
    cc3c:	e1a09006 	mov	r9, r6
    cc40:	e1a0a007 	mov	sl, r7
    cc44:	ba0001c5 	blt	d360 <CString::FormatV(char const*, std::__va_list)+0xc24>
    cc48:	e3a06001 	mov	r6, #1
    cc4c:	e3a07000 	mov	r7, #0
    cc50:	e58d3008 	str	r3, [sp, #8]
    cc54:	e1a0b003 	mov	fp, r3
    cc58:	e1a0a002 	mov	sl, r2
    cc5c:	e1a03107 	lsl	r3, r7, #2
    cc60:	e1a0000a 	mov	r0, sl
    cc64:	e1a0100b 	mov	r1, fp
    cc68:	e1a02106 	lsl	r2, r6, #2
    cc6c:	e1833f26 	orr	r3, r3, r6, lsr #30
    cc70:	e0966002 	adds	r6, r6, r2
    cc74:	e0a77003 	adc	r7, r7, r3
    cc78:	e0966006 	adds	r6, r6, r6
    cc7c:	e0a77007 	adc	r7, r7, r7
    cc80:	e1a02006 	mov	r2, r6
    cc84:	e1a03007 	mov	r3, r7
    cc88:	fa002188 	blx	152b0 <__aeabi_uldivmod>
    cc8c:	e3510000 	cmp	r1, #0
    cc90:	03500009 	cmpeq	r0, #9
    cc94:	8afffff0 	bhi	cc5c <CString::FormatV(char const*, std::__va_list)+0x520>
    cc98:	e59da008 	ldr	sl, [sp, #8]
    cc9c:	e28d3044 	add	r3, sp, #68	; 0x44
    cca0:	e58d4010 	str	r4, [sp, #16]
    cca4:	e1a04000 	mov	r4, r0
    cca8:	e58d501c 	str	r5, [sp, #28]
    ccac:	e1a05001 	mov	r5, r1
    ccb0:	e58d3024 	str	r3, [sp, #36]	; 0x24
    ccb4:	e58d8030 	str	r8, [sp, #48]	; 0x30
    ccb8:	e1a08003 	mov	r8, r3
    ccbc:	ea000006 	b	ccdc <CString::FormatV(char const*, std::__va_list)+0x5a0>
    ccc0:	e58d3008 	str	r3, [sp, #8]
    ccc4:	e1a0600b 	mov	r6, fp
    ccc8:	fa002178 	blx	152b0 <__aeabi_uldivmod>
    cccc:	e59d3008 	ldr	r3, [sp, #8]
    ccd0:	e1a04000 	mov	r4, r0
    ccd4:	e1a05001 	mov	r5, r1
    ccd8:	e1a07003 	mov	r7, r3
    ccdc:	e1a00009 	mov	r0, r9
    cce0:	e1a0100a 	mov	r1, sl
    cce4:	e1a02006 	mov	r2, r6
    cce8:	e1a03007 	mov	r3, r7
    ccec:	fa00216f 	blx	152b0 <__aeabi_uldivmod>
    ccf0:	e3550000 	cmp	r5, #0
    ccf4:	e284c057 	add	ip, r4, #87	; 0x57
    ccf8:	03540009 	cmpeq	r4, #9
    ccfc:	e2844030 	add	r4, r4, #48	; 0x30
    cd00:	e6afc07c 	sxtb	ip, ip
    cd04:	96afc074 	sxtbls	ip, r4
    cd08:	e1a09002 	mov	r9, r2
    cd0c:	e1a0a003 	mov	sl, r3
    cd10:	e3a0200a 	mov	r2, #10
    cd14:	e3a03000 	mov	r3, #0
    cd18:	e4c8c001 	strb	ip, [r8], #1
    cd1c:	e1a00006 	mov	r0, r6
    cd20:	e1a01007 	mov	r1, r7
    cd24:	fa002161 	blx	152b0 <__aeabi_uldivmod>
    cd28:	e3570000 	cmp	r7, #0
    cd2c:	e1a0b000 	mov	fp, r0
    cd30:	03560009 	cmpeq	r6, #9
    cd34:	e1a03001 	mov	r3, r1
    cd38:	e1a00009 	mov	r0, r9
    cd3c:	e1a0100a 	mov	r1, sl
    cd40:	e1a0200b 	mov	r2, fp
    cd44:	8affffdd 	bhi	ccc0 <CString::FormatV(char const*, std::__va_list)+0x584>
    cd48:	e1a02008 	mov	r2, r8
    cd4c:	e59d4010 	ldr	r4, [sp, #16]
    cd50:	e3a03000 	mov	r3, #0
    cd54:	e59d501c 	ldr	r5, [sp, #28]
    cd58:	e5c23000 	strb	r3, [r2]
    cd5c:	e59d8030 	ldr	r8, [sp, #48]	; 0x30
    cd60:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
    cd64:	eb00078d 	bl	eba0 <strlen>
    cd68:	e59d3004 	ldr	r3, [sp, #4]
    cd6c:	e1a06000 	mov	r6, r0
    cd70:	e3530000 	cmp	r3, #0
    cd74:	e59d3020 	ldr	r3, [sp, #32]
    cd78:	1a0000a9 	bne	d024 <CString::FormatV(char const*, std::__va_list)+0x8e8>
    cd7c:	e3530000 	cmp	r3, #0
    cd80:	0a000106 	beq	d1a0 <CString::FormatV(char const*, std::__va_list)+0xa64>
    cd84:	e1a00005 	mov	r0, r5
    cd88:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    cd8c:	eb000194 	bl	d3e4 <CString::PutString(char const*)>
    cd90:	e1540006 	cmp	r4, r6
    cd94:	9afffedf 	bls	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    cd98:	e0444006 	sub	r4, r4, r6
    cd9c:	e1a00005 	mov	r0, r5
    cda0:	e1a01004 	mov	r1, r4
    cda4:	eb0002c0 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cda8:	e2443001 	sub	r3, r4, #1
    cdac:	e3a00020 	mov	r0, #32
    cdb0:	e595200c 	ldr	r2, [r5, #12]
    cdb4:	e2433001 	sub	r3, r3, #1
    cdb8:	e3730001 	cmn	r3, #1
    cdbc:	e2821001 	add	r1, r2, #1
    cdc0:	e585100c 	str	r1, [r5, #12]
    cdc4:	e5c20000 	strb	r0, [r2]
    cdc8:	1afffff8 	bne	cdb0 <CString::FormatV(char const*, std::__va_list)+0x674>
    cdcc:	eafffed1 	b	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    cdd0:	e59d7018 	ldr	r7, [sp, #24]
    cdd4:	e4979004 	ldr	r9, [r7], #4
    cdd8:	e1a00009 	mov	r0, r9
    cddc:	eb00076f 	bl	eba0 <strlen>
    cde0:	e59d3020 	ldr	r3, [sp, #32]
    cde4:	e1a06000 	mov	r6, r0
    cde8:	e3530000 	cmp	r3, #0
    cdec:	1a00011c 	bne	d264 <CString::FormatV(char const*, std::__va_list)+0xb28>
    cdf0:	e1500004 	cmp	r0, r4
    cdf4:	3a00012d 	bcc	d2b0 <CString::FormatV(char const*, std::__va_list)+0xb74>
    cdf8:	e1a01009 	mov	r1, r9
    cdfc:	e1a00005 	mov	r0, r5
    ce00:	e58d7018 	str	r7, [sp, #24]
    ce04:	eb000176 	bl	d3e4 <CString::PutString(char const*)>
    ce08:	eafffec2 	b	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    ce0c:	e3500000 	cmp	r0, #0
    ce10:	03a0c008 	moveq	ip, #8
    ce14:	0affff02 	beq	ca24 <CString::FormatV(char const*, std::__va_list)+0x2e8>
    ce18:	e3a01001 	mov	r1, #1
    ce1c:	e1a00005 	mov	r0, r5
    ce20:	eb0002a1 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    ce24:	e595300c 	ldr	r3, [r5, #12]
    ce28:	e3a02030 	mov	r2, #48	; 0x30
    ce2c:	e3a0c008 	mov	ip, #8
    ce30:	e2831001 	add	r1, r3, #1
    ce34:	e585100c 	str	r1, [r5, #12]
    ce38:	e5c32000 	strb	r2, [r3]
    ce3c:	e59d3004 	ldr	r3, [sp, #4]
    ce40:	e1d890d0 	ldrsb	r9, [r8]
    ce44:	e3530000 	cmp	r3, #0
    ce48:	e59d3018 	ldr	r3, [sp, #24]
    ce4c:	1afffef8 	bne	ca34 <CString::FormatV(char const*, std::__va_list)+0x2f8>
    ce50:	e493e004 	ldr	lr, [r3], #4
    ce54:	e15c000e 	cmp	ip, lr
    ce58:	e58d3018 	str	r3, [sp, #24]
    ce5c:	8a000121 	bhi	d2e8 <CString::FormatV(char const*, std::__va_list)+0xbac>
    ce60:	e3a03001 	mov	r3, #1
    ce64:	e003039c 	mul	r3, ip, r3
    ce68:	e731f31e 	udiv	r1, lr, r3
    ce6c:	e15c0001 	cmp	ip, r1
    ce70:	e1a02001 	mov	r2, r1
    ce74:	9afffffa 	bls	ce64 <CString::FormatV(char const*, std::__va_list)+0x728>
    ce78:	e28d0044 	add	r0, sp, #68	; 0x44
    ce7c:	e3590058 	cmp	r9, #88	; 0x58
    ce80:	e1a06000 	mov	r6, r0
    ce84:	13a07057 	movne	r7, #87	; 0x57
    ce88:	03a07037 	moveq	r7, #55	; 0x37
    ce8c:	e58d0024 	str	r0, [sp, #36]	; 0x24
    ce90:	e1a00001 	mov	r0, r1
    ce94:	ea000001 	b	cea0 <CString::FormatV(char const*, std::__va_list)+0x764>
    ce98:	e732f31e 	udiv	r2, lr, r3
    ce9c:	e1a00002 	mov	r0, r2
    cea0:	e3520009 	cmp	r2, #9
    cea4:	e0871002 	add	r1, r7, r2
    cea8:	e06ee093 	mls	lr, r3, r0, lr
    ceac:	e2822030 	add	r2, r2, #48	; 0x30
    ceb0:	e6af1071 	sxtb	r1, r1
    ceb4:	96af1072 	sxtbls	r1, r2
    ceb8:	e15c0003 	cmp	ip, r3
    cebc:	e733fc13 	udiv	r3, r3, ip
    cec0:	e4c61001 	strb	r1, [r6], #1
    cec4:	9afffff3 	bls	ce98 <CString::FormatV(char const*, std::__va_list)+0x75c>
    cec8:	e3a03000 	mov	r3, #0
    cecc:	e5c63000 	strb	r3, [r6]
    ced0:	eaffff36 	b	cbb0 <CString::FormatV(char const*, std::__va_list)+0x474>
    ced4:	e59d7018 	ldr	r7, [sp, #24]
    ced8:	e59d3020 	ldr	r3, [sp, #32]
    cedc:	e4976004 	ldr	r6, [r7], #4
    cee0:	e3530000 	cmp	r3, #0
    cee4:	e6af6076 	sxtb	r6, r6
    cee8:	1a0000bf 	bne	d1ec <CString::FormatV(char const*, std::__va_list)+0xab0>
    ceec:	e3540001 	cmp	r4, #1
    cef0:	8a000090 	bhi	d138 <CString::FormatV(char const*, std::__va_list)+0x9fc>
    cef4:	e3a01001 	mov	r1, #1
    cef8:	e1a00005 	mov	r0, r5
    cefc:	eb00026a 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cf00:	e595300c 	ldr	r3, [r5, #12]
    cf04:	e58d7018 	str	r7, [sp, #24]
    cf08:	e2832001 	add	r2, r3, #1
    cf0c:	e585200c 	str	r2, [r5, #12]
    cf10:	e5c36000 	strb	r6, [r3]
    cf14:	eafffe7f 	b	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    cf18:	e59d3018 	ldr	r3, [sp, #24]
    cf1c:	e28d6044 	add	r6, sp, #68	; 0x44
    cf20:	e1a00006 	mov	r0, r6
    cf24:	e58d6024 	str	r6, [sp, #36]	; 0x24
    cf28:	e2833007 	add	r3, r3, #7
    cf2c:	e3c33007 	bic	r3, r3, #7
    cf30:	ecb30b02 	vldmia	r3!, {d0}
    cf34:	e58d3018 	str	r3, [sp, #24]
    cf38:	eb0001c8 	bl	d660 <CString::ftoa(char*, double, unsigned int)>
    cf3c:	e1a00006 	mov	r0, r6
    cf40:	eb000716 	bl	eba0 <strlen>
    cf44:	e59d3020 	ldr	r3, [sp, #32]
    cf48:	e1a06000 	mov	r6, r0
    cf4c:	e3530000 	cmp	r3, #0
    cf50:	1a0000b0 	bne	d218 <CString::FormatV(char const*, std::__va_list)+0xadc>
    cf54:	e1500004 	cmp	r0, r4
    cf58:	2affff1c 	bcs	cbd0 <CString::FormatV(char const*, std::__va_list)+0x494>
    cf5c:	e0444000 	sub	r4, r4, r0
    cf60:	e1a00005 	mov	r0, r5
    cf64:	e1a01004 	mov	r1, r4
    cf68:	eb00024f 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cf6c:	e2443001 	sub	r3, r4, #1
    cf70:	e3a00020 	mov	r0, #32
    cf74:	e595200c 	ldr	r2, [r5, #12]
    cf78:	e2433001 	sub	r3, r3, #1
    cf7c:	e3730001 	cmn	r3, #1
    cf80:	e2821001 	add	r1, r2, #1
    cf84:	e585100c 	str	r1, [r5, #12]
    cf88:	e5c20000 	strb	r0, [r2]
    cf8c:	1afffff8 	bne	cf74 <CString::FormatV(char const*, std::__va_list)+0x838>
    cf90:	eaffff0e 	b	cbd0 <CString::FormatV(char const*, std::__va_list)+0x494>
    cf94:	e1a00005 	mov	r0, r5
    cf98:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    cf9c:	eb000110 	bl	d3e4 <CString::PutString(char const*)>
    cfa0:	e1560004 	cmp	r6, r4
    cfa4:	2afffe5b 	bcs	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    cfa8:	e0444006 	sub	r4, r4, r6
    cfac:	e1a00005 	mov	r0, r5
    cfb0:	e1a01004 	mov	r1, r4
    cfb4:	eb00023c 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    cfb8:	e2443001 	sub	r3, r4, #1
    cfbc:	e3a00020 	mov	r0, #32
    cfc0:	e595200c 	ldr	r2, [r5, #12]
    cfc4:	e2433001 	sub	r3, r3, #1
    cfc8:	e3730001 	cmn	r3, #1
    cfcc:	e2821001 	add	r1, r2, #1
    cfd0:	e585100c 	str	r1, [r5, #12]
    cfd4:	e5c20000 	strb	r0, [r2]
    cfd8:	1afffff8 	bne	cfc0 <CString::FormatV(char const*, std::__va_list)+0x884>
    cfdc:	eafffe4d 	b	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    cfe0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    cfe4:	e0444000 	sub	r4, r4, r0
    cfe8:	e1a00005 	mov	r0, r5
    cfec:	e1a01004 	mov	r1, r4
    cff0:	e3530000 	cmp	r3, #0
    cff4:	13a06030 	movne	r6, #48	; 0x30
    cff8:	03a06020 	moveq	r6, #32
    cffc:	eb00022a 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d000:	e2443001 	sub	r3, r4, #1
    d004:	e595200c 	ldr	r2, [r5, #12]
    d008:	e2433001 	sub	r3, r3, #1
    d00c:	e3730001 	cmn	r3, #1
    d010:	e2821001 	add	r1, r2, #1
    d014:	e585100c 	str	r1, [r5, #12]
    d018:	e5c26000 	strb	r6, [r2]
    d01c:	1afffff8 	bne	d004 <CString::FormatV(char const*, std::__va_list)+0x8c8>
    d020:	eafffeea 	b	cbd0 <CString::FormatV(char const*, std::__va_list)+0x494>
    d024:	e3530000 	cmp	r3, #0
    d028:	e2806001 	add	r6, r0, #1
    d02c:	1a000052 	bne	d17c <CString::FormatV(char const*, std::__va_list)+0xa40>
    d030:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    d034:	e3530000 	cmp	r3, #0
    d038:	1a0000bf 	bne	d33c <CString::FormatV(char const*, std::__va_list)+0xc00>
    d03c:	e1540006 	cmp	r4, r6
    d040:	9a00000f 	bls	d084 <CString::FormatV(char const*, std::__va_list)+0x948>
    d044:	e0444006 	sub	r4, r4, r6
    d048:	e1a00005 	mov	r0, r5
    d04c:	e1a01004 	mov	r1, r4
    d050:	eb000215 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d054:	e2443001 	sub	r3, r4, #1
    d058:	e3a00020 	mov	r0, #32
    d05c:	e595200c 	ldr	r2, [r5, #12]
    d060:	e2433001 	sub	r3, r3, #1
    d064:	e3730001 	cmn	r3, #1
    d068:	e2821001 	add	r1, r2, #1
    d06c:	e585100c 	str	r1, [r5, #12]
    d070:	e5c20000 	strb	r0, [r2]
    d074:	1afffff8 	bne	d05c <CString::FormatV(char const*, std::__va_list)+0x920>
    d078:	e59d3004 	ldr	r3, [sp, #4]
    d07c:	e3530000 	cmp	r3, #0
    d080:	0afffed2 	beq	cbd0 <CString::FormatV(char const*, std::__va_list)+0x494>
    d084:	e3a01001 	mov	r1, #1
    d088:	e1a00005 	mov	r0, r5
    d08c:	eb000206 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d090:	e595300c 	ldr	r3, [r5, #12]
    d094:	e3a0202d 	mov	r2, #45	; 0x2d
    d098:	e2831001 	add	r1, r3, #1
    d09c:	e585100c 	str	r1, [r5, #12]
    d0a0:	e5c32000 	strb	r2, [r3]
    d0a4:	eafffec9 	b	cbd0 <CString::FormatV(char const*, std::__va_list)+0x494>
    d0a8:	e4930004 	ldr	r0, [r3], #4
    d0ac:	e3500000 	cmp	r0, #0
    d0b0:	e58d3018 	str	r3, [sp, #24]
    d0b4:	ba00002c 	blt	d16c <CString::FormatV(char const*, std::__va_list)+0xa30>
    d0b8:	e3500009 	cmp	r0, #9
    d0bc:	e1a01000 	mov	r1, r0
    d0c0:	da0000ab 	ble	d374 <CString::FormatV(char const*, std::__va_list)+0xc38>
    d0c4:	e3a02001 	mov	r2, #1
    d0c8:	e0822102 	add	r2, r2, r2, lsl #2
    d0cc:	e1a02082 	lsl	r2, r2, #1
    d0d0:	e733f210 	udiv	r3, r0, r2
    d0d4:	e3530009 	cmp	r3, #9
    d0d8:	8afffffa 	bhi	d0c8 <CString::FormatV(char const*, std::__va_list)+0x98c>
    d0dc:	e28d0044 	add	r0, sp, #68	; 0x44
    d0e0:	e59d603c 	ldr	r6, [sp, #60]	; 0x3c
    d0e4:	e58d0024 	str	r0, [sp, #36]	; 0x24
    d0e8:	ea000001 	b	d0f4 <CString::FormatV(char const*, std::__va_list)+0x9b8>
    d0ec:	e1a02003 	mov	r2, r3
    d0f0:	e733f311 	udiv	r3, r1, r3
    d0f4:	e3530009 	cmp	r3, #9
    d0f8:	e283c057 	add	ip, r3, #87	; 0x57
    d0fc:	e2833030 	add	r3, r3, #48	; 0x30
    d100:	e6afc07c 	sxtb	ip, ip
    d104:	96afc073 	sxtbls	ip, r3
    d108:	e3520009 	cmp	r2, #9
    d10c:	e73ef211 	udiv	lr, r1, r2
    d110:	e4c0c001 	strb	ip, [r0], #1
    d114:	e0611e92 	mls	r1, r2, lr, r1
    d118:	e083e296 	umull	lr, r3, r6, r2
    d11c:	e1a031a3 	lsr	r3, r3, #3
    d120:	8afffff1 	bhi	d0ec <CString::FormatV(char const*, std::__va_list)+0x9b0>
    d124:	e3a03000 	mov	r3, #0
    d128:	e5c03000 	strb	r3, [r0]
    d12c:	eaffff0b 	b	cd60 <CString::FormatV(char const*, std::__va_list)+0x624>
    d130:	e3a0c00a 	mov	ip, #10
    d134:	eafffe3a 	b	ca24 <CString::FormatV(char const*, std::__va_list)+0x2e8>
    d138:	e2441001 	sub	r1, r4, #1
    d13c:	e1a00005 	mov	r0, r5
    d140:	eb0001d9 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d144:	e2444002 	sub	r4, r4, #2
    d148:	e3a01020 	mov	r1, #32
    d14c:	e595300c 	ldr	r3, [r5, #12]
    d150:	e2444001 	sub	r4, r4, #1
    d154:	e3740001 	cmn	r4, #1
    d158:	e2832001 	add	r2, r3, #1
    d15c:	e585200c 	str	r2, [r5, #12]
    d160:	e5c31000 	strb	r1, [r3]
    d164:	1afffff8 	bne	d14c <CString::FormatV(char const*, std::__va_list)+0xa10>
    d168:	eaffff61 	b	cef4 <CString::FormatV(char const*, std::__va_list)+0x7b8>
    d16c:	e3a03001 	mov	r3, #1
    d170:	e2600000 	rsb	r0, r0, #0
    d174:	e58d3004 	str	r3, [sp, #4]
    d178:	eaffffce 	b	d0b8 <CString::FormatV(char const*, std::__va_list)+0x97c>
    d17c:	e3a01001 	mov	r1, #1
    d180:	e1a00005 	mov	r0, r5
    d184:	eb0001c8 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d188:	e595300c 	ldr	r3, [r5, #12]
    d18c:	e3a0202d 	mov	r2, #45	; 0x2d
    d190:	e2831001 	add	r1, r3, #1
    d194:	e585100c 	str	r1, [r5, #12]
    d198:	e5c32000 	strb	r2, [r3]
    d19c:	eafffef8 	b	cd84 <CString::FormatV(char const*, std::__va_list)+0x648>
    d1a0:	e59d3028 	ldr	r3, [sp, #40]	; 0x28
    d1a4:	e3530000 	cmp	r3, #0
    d1a8:	0a000074 	beq	d380 <CString::FormatV(char const*, std::__va_list)+0xc44>
    d1ac:	e1560004 	cmp	r6, r4
    d1b0:	2afffe86 	bcs	cbd0 <CString::FormatV(char const*, std::__va_list)+0x494>
    d1b4:	e0444006 	sub	r4, r4, r6
    d1b8:	e1a00005 	mov	r0, r5
    d1bc:	e1a01004 	mov	r1, r4
    d1c0:	eb0001b9 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d1c4:	e2443001 	sub	r3, r4, #1
    d1c8:	e3a00030 	mov	r0, #48	; 0x30
    d1cc:	e595200c 	ldr	r2, [r5, #12]
    d1d0:	e2433001 	sub	r3, r3, #1
    d1d4:	e3730001 	cmn	r3, #1
    d1d8:	e2821001 	add	r1, r2, #1
    d1dc:	e585100c 	str	r1, [r5, #12]
    d1e0:	e5c20000 	strb	r0, [r2]
    d1e4:	1afffff8 	bne	d1cc <CString::FormatV(char const*, std::__va_list)+0xa90>
    d1e8:	eafffe78 	b	cbd0 <CString::FormatV(char const*, std::__va_list)+0x494>
    d1ec:	e3a01001 	mov	r1, #1
    d1f0:	e1a00005 	mov	r0, r5
    d1f4:	eb0001ac 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d1f8:	e595300c 	ldr	r3, [r5, #12]
    d1fc:	e3540001 	cmp	r4, #1
    d200:	e2832001 	add	r2, r3, #1
    d204:	e585200c 	str	r2, [r5, #12]
    d208:	e5c36000 	strb	r6, [r3]
    d20c:	8a00003d 	bhi	d308 <CString::FormatV(char const*, std::__va_list)+0xbcc>
    d210:	e58d7018 	str	r7, [sp, #24]
    d214:	eafffdbf 	b	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    d218:	e1a00005 	mov	r0, r5
    d21c:	e59d1024 	ldr	r1, [sp, #36]	; 0x24
    d220:	eb00006f 	bl	d3e4 <CString::PutString(char const*)>
    d224:	e1560004 	cmp	r6, r4
    d228:	2afffdba 	bcs	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    d22c:	e0444006 	sub	r4, r4, r6
    d230:	e1a00005 	mov	r0, r5
    d234:	e1a01004 	mov	r1, r4
    d238:	eb00019b 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d23c:	e2443001 	sub	r3, r4, #1
    d240:	e3a00020 	mov	r0, #32
    d244:	e595200c 	ldr	r2, [r5, #12]
    d248:	e2433001 	sub	r3, r3, #1
    d24c:	e3730001 	cmn	r3, #1
    d250:	e2821001 	add	r1, r2, #1
    d254:	e585100c 	str	r1, [r5, #12]
    d258:	e5c20000 	strb	r0, [r2]
    d25c:	1afffff8 	bne	d244 <CString::FormatV(char const*, std::__va_list)+0xb08>
    d260:	eafffdac 	b	c918 <CString::FormatV(char const*, std::__va_list)+0x1dc>
    d264:	e1a01009 	mov	r1, r9
    d268:	e1a00005 	mov	r0, r5
    d26c:	eb00005c 	bl	d3e4 <CString::PutString(char const*)>
    d270:	e1560004 	cmp	r6, r4
    d274:	2affffe5 	bcs	d210 <CString::FormatV(char const*, std::__va_list)+0xad4>
    d278:	e0444006 	sub	r4, r4, r6
    d27c:	e1a00005 	mov	r0, r5
    d280:	e1a01004 	mov	r1, r4
    d284:	eb000188 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d288:	e2443001 	sub	r3, r4, #1
    d28c:	e3a00020 	mov	r0, #32
    d290:	e595200c 	ldr	r2, [r5, #12]
    d294:	e2433001 	sub	r3, r3, #1
    d298:	e3730001 	cmn	r3, #1
    d29c:	e2821001 	add	r1, r2, #1
    d2a0:	e585100c 	str	r1, [r5, #12]
    d2a4:	e5c20000 	strb	r0, [r2]
    d2a8:	1afffff8 	bne	d290 <CString::FormatV(char const*, std::__va_list)+0xb54>
    d2ac:	eaffffd7 	b	d210 <CString::FormatV(char const*, std::__va_list)+0xad4>
    d2b0:	e0444000 	sub	r4, r4, r0
    d2b4:	e1a00005 	mov	r0, r5
    d2b8:	e1a01004 	mov	r1, r4
    d2bc:	eb00017a 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d2c0:	e2443001 	sub	r3, r4, #1
    d2c4:	e3a00020 	mov	r0, #32
    d2c8:	e595200c 	ldr	r2, [r5, #12]
    d2cc:	e2433001 	sub	r3, r3, #1
    d2d0:	e3730001 	cmn	r3, #1
    d2d4:	e2821001 	add	r1, r2, #1
    d2d8:	e585100c 	str	r1, [r5, #12]
    d2dc:	e5c20000 	strb	r0, [r2]
    d2e0:	1afffff8 	bne	d2c8 <CString::FormatV(char const*, std::__va_list)+0xb8c>
    d2e4:	eafffec3 	b	cdf8 <CString::FormatV(char const*, std::__va_list)+0x6bc>
    d2e8:	e1a0200e 	mov	r2, lr
    d2ec:	e3a03001 	mov	r3, #1
    d2f0:	e1a0100e 	mov	r1, lr
    d2f4:	eafffedf 	b	ce78 <CString::FormatV(char const*, std::__va_list)+0x73c>
    d2f8:	e3a06001 	mov	r6, #1
    d2fc:	e3a07000 	mov	r7, #0
    d300:	e1cda1d0 	ldrd	sl, [sp, #16]
    d304:	eafffdf2 	b	cad4 <CString::FormatV(char const*, std::__va_list)+0x398>
    d308:	e2441001 	sub	r1, r4, #1
    d30c:	e1a00005 	mov	r0, r5
    d310:	eb000165 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d314:	e2444002 	sub	r4, r4, #2
    d318:	e3a01020 	mov	r1, #32
    d31c:	e595300c 	ldr	r3, [r5, #12]
    d320:	e2444001 	sub	r4, r4, #1
    d324:	e3740001 	cmn	r4, #1
    d328:	e2832001 	add	r2, r3, #1
    d32c:	e585200c 	str	r2, [r5, #12]
    d330:	e5c31000 	strb	r1, [r3]
    d334:	1afffff8 	bne	d31c <CString::FormatV(char const*, std::__va_list)+0xbe0>
    d338:	eaffffb4 	b	d210 <CString::FormatV(char const*, std::__va_list)+0xad4>
    d33c:	e3a01001 	mov	r1, #1
    d340:	e1a00005 	mov	r0, r5
    d344:	eb000158 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d348:	e595300c 	ldr	r3, [r5, #12]
    d34c:	e3a0202d 	mov	r2, #45	; 0x2d
    d350:	e2831001 	add	r1, r3, #1
    d354:	e585100c 	str	r1, [r5, #12]
    d358:	e5c32000 	strb	r2, [r3]
    d35c:	eaffff92 	b	d1ac <CString::FormatV(char const*, std::__va_list)+0xa70>
    d360:	e1a00009 	mov	r0, r9
    d364:	e3a06001 	mov	r6, #1
    d368:	e3a07000 	mov	r7, #0
    d36c:	e1a0100a 	mov	r1, sl
    d370:	eafffe49 	b	cc9c <CString::FormatV(char const*, std::__va_list)+0x560>
    d374:	e1a03001 	mov	r3, r1
    d378:	e3a02001 	mov	r2, #1
    d37c:	eaffff56 	b	d0dc <CString::FormatV(char const*, std::__va_list)+0x9a0>
    d380:	e1500004 	cmp	r0, r4
    d384:	2afffe11 	bcs	cbd0 <CString::FormatV(char const*, std::__va_list)+0x494>
    d388:	eaffff2d 	b	d044 <CString::FormatV(char const*, std::__va_list)+0x908>
    d38c:	00015a80 	.word	0x00015a80

0000d390 <CString::PutChar(char, unsigned int)>:
    d390:	e16d41f0 	strd	r4, [sp, #-16]!
    d394:	e2524000 	subs	r4, r2, #0
    d398:	e58d6008 	str	r6, [sp, #8]
    d39c:	e58de00c 	str	lr, [sp, #12]
    d3a0:	0a00000b 	beq	d3d4 <CString::PutChar(char, unsigned int)+0x44>
    d3a4:	e1a06001 	mov	r6, r1
    d3a8:	e1a01004 	mov	r1, r4
    d3ac:	e1a05000 	mov	r5, r0
    d3b0:	eb00013d 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d3b4:	e2442001 	sub	r2, r4, #1
    d3b8:	e595300c 	ldr	r3, [r5, #12]
    d3bc:	e2422001 	sub	r2, r2, #1
    d3c0:	e3720001 	cmn	r2, #1
    d3c4:	e2830001 	add	r0, r3, #1
    d3c8:	e585000c 	str	r0, [r5, #12]
    d3cc:	e5c36000 	strb	r6, [r3]
    d3d0:	1afffff8 	bne	d3b8 <CString::PutChar(char, unsigned int)+0x28>
    d3d4:	e1cd40d0 	ldrd	r4, [sp]
    d3d8:	e59d6008 	ldr	r6, [sp, #8]
    d3dc:	e28dd00c 	add	sp, sp, #12
    d3e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000d3e4 <CString::PutString(char const*)>:
    d3e4:	e16d41f0 	strd	r4, [sp, #-16]!
    d3e8:	e1a04000 	mov	r4, r0
    d3ec:	e1a00001 	mov	r0, r1
    d3f0:	e58d6008 	str	r6, [sp, #8]
    d3f4:	e1a06001 	mov	r6, r1
    d3f8:	e58de00c 	str	lr, [sp, #12]
    d3fc:	eb0005e7 	bl	eba0 <strlen>
    d400:	e2505000 	subs	r5, r0, #0
    d404:	0a000002 	beq	d414 <CString::PutString(char const*)+0x30>
    d408:	e1a01005 	mov	r1, r5
    d40c:	e1a00004 	mov	r0, r4
    d410:	eb000125 	bl	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d414:	e1a01006 	mov	r1, r6
    d418:	e594000c 	ldr	r0, [r4, #12]
    d41c:	eb000687 	bl	ee40 <strcpy>
    d420:	e594000c 	ldr	r0, [r4, #12]
    d424:	e59d6008 	ldr	r6, [sp, #8]
    d428:	e0800005 	add	r0, r0, r5
    d42c:	e584000c 	str	r0, [r4, #12]
    d430:	e1cd40d0 	ldrd	r4, [sp]
    d434:	e28dd00c 	add	sp, sp, #12
    d438:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000d43c <CString::ReserveSpace(unsigned int)>:
    d43c:	e3510000 	cmp	r1, #0
    d440:	0a000000 	beq	d448 <CString::ReserveSpace(unsigned int)+0xc>
    d444:	ea000118 	b	d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>
    d448:	e12fff1e 	bx	lr

0000d44c <CString::ntoa(char*, unsigned long, unsigned int, bool)>:
    d44c:	e1510002 	cmp	r1, r2
    d450:	e16d41f0 	strd	r4, [sp, #-16]!
    d454:	23a0c001 	movcs	ip, #1
    d458:	e58d6008 	str	r6, [sp, #8]
    d45c:	e58de00c 	str	lr, [sp, #12]
    d460:	3a00001b 	bcc	d4d4 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x88>
    d464:	e00c0c92 	mul	ip, r2, ip
    d468:	e734fc11 	udiv	r4, r1, ip
    d46c:	e1540002 	cmp	r4, r2
    d470:	e1a0e004 	mov	lr, r4
    d474:	2afffffa 	bcs	d464 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x18>
    d478:	e3530000 	cmp	r3, #0
    d47c:	e1a05000 	mov	r5, r0
    d480:	13a06037 	movne	r6, #55	; 0x37
    d484:	03a06057 	moveq	r6, #87	; 0x57
    d488:	ea000001 	b	d494 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x48>
    d48c:	e73efc11 	udiv	lr, r1, ip
    d490:	e1a0400e 	mov	r4, lr
    d494:	e35e0009 	cmp	lr, #9
    d498:	e086300e 	add	r3, r6, lr
    d49c:	e061149c 	mls	r1, ip, r4, r1
    d4a0:	e28ee030 	add	lr, lr, #48	; 0x30
    d4a4:	e6af3073 	sxtb	r3, r3
    d4a8:	96af307e 	sxtbls	r3, lr
    d4ac:	e15c0002 	cmp	ip, r2
    d4b0:	e73cf21c 	udiv	ip, ip, r2
    d4b4:	e4c53001 	strb	r3, [r5], #1
    d4b8:	2afffff3 	bcs	d48c <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x40>
    d4bc:	e3a03000 	mov	r3, #0
    d4c0:	e5c53000 	strb	r3, [r5]
    d4c4:	e1cd40d0 	ldrd	r4, [sp]
    d4c8:	e59d6008 	ldr	r6, [sp, #8]
    d4cc:	e28dd00c 	add	sp, sp, #12
    d4d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    d4d4:	e1a0e001 	mov	lr, r1
    d4d8:	e3a0c001 	mov	ip, #1
    d4dc:	e1a04001 	mov	r4, r1
    d4e0:	eaffffe4 	b	d478 <CString::ntoa(char*, unsigned long, unsigned int, bool)+0x2c>

0000d4e4 <CString::lltoa(char*, unsigned long long, unsigned int, bool)>:
    d4e4:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
    d4e8:	e1cd60f8 	strd	r6, [sp, #8]
    d4ec:	e1cd81f0 	strd	r8, [sp, #16]
    d4f0:	e1a09003 	mov	r9, r3
    d4f4:	e1a08002 	mov	r8, r2
    d4f8:	e1cda1f8 	strd	sl, [sp, #24]
    d4fc:	e3a0b000 	mov	fp, #0
    d500:	e58de020 	str	lr, [sp, #32]
    d504:	e24dd01c 	sub	sp, sp, #28
    d508:	e15b0009 	cmp	fp, r9
    d50c:	e59d1040 	ldr	r1, [sp, #64]	; 0x40
    d510:	e58d0014 	str	r0, [sp, #20]
    d514:	e5dd3044 	ldrb	r3, [sp, #68]	; 0x44
    d518:	01510002 	cmpeq	r1, r2
    d51c:	e1a0a001 	mov	sl, r1
    d520:	93a04001 	movls	r4, #1
    d524:	93a05000 	movls	r5, #0
    d528:	e58d3004 	str	r3, [sp, #4]
    d52c:	8a000046 	bhi	d64c <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x168>
    d530:	e0030b94 	mul	r3, r4, fp
    d534:	e1a00008 	mov	r0, r8
    d538:	e1a01009 	mov	r1, r9
    d53c:	e023359a 	mla	r3, sl, r5, r3
    d540:	e0854a94 	umull	r4, r5, r4, sl
    d544:	e0835005 	add	r5, r3, r5
    d548:	e1a02004 	mov	r2, r4
    d54c:	e1a03005 	mov	r3, r5
    d550:	fa001f56 	blx	152b0 <__aeabi_uldivmod>
    d554:	e15b0001 	cmp	fp, r1
    d558:	e1a06000 	mov	r6, r0
    d55c:	015a0000 	cmpeq	sl, r0
    d560:	e1a07001 	mov	r7, r1
    d564:	9afffff1 	bls	d530 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x4c>
    d568:	e59d3004 	ldr	r3, [sp, #4]
    d56c:	e3530000 	cmp	r3, #0
    d570:	e59d3014 	ldr	r3, [sp, #20]
    d574:	e58d3004 	str	r3, [sp, #4]
    d578:	13a03037 	movne	r3, #55	; 0x37
    d57c:	03a03057 	moveq	r3, #87	; 0x57
    d580:	e58d3010 	str	r3, [sp, #16]
    d584:	ea000008 	b	d5ac <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xc8>
    d588:	e58d3008 	str	r3, [sp, #8]
    d58c:	e58d200c 	str	r2, [sp, #12]
    d590:	fa001f46 	blx	152b0 <__aeabi_uldivmod>
    d594:	e59d3008 	ldr	r3, [sp, #8]
    d598:	e1a06000 	mov	r6, r0
    d59c:	e1a07001 	mov	r7, r1
    d5a0:	e59d200c 	ldr	r2, [sp, #12]
    d5a4:	e1a05003 	mov	r5, r3
    d5a8:	e1a04002 	mov	r4, r2
    d5ac:	e1a00008 	mov	r0, r8
    d5b0:	e1a01009 	mov	r1, r9
    d5b4:	e1a02004 	mov	r2, r4
    d5b8:	e1a03005 	mov	r3, r5
    d5bc:	fa001f3b 	blx	152b0 <__aeabi_uldivmod>
    d5c0:	e59d0004 	ldr	r0, [sp, #4]
    d5c4:	e3570000 	cmp	r7, #0
    d5c8:	e1a08002 	mov	r8, r2
    d5cc:	03560009 	cmpeq	r6, #9
    d5d0:	e1a09003 	mov	r9, r3
    d5d4:	e59d1010 	ldr	r1, [sp, #16]
    d5d8:	e1a0200a 	mov	r2, sl
    d5dc:	e1a0300b 	mov	r3, fp
    d5e0:	e0811006 	add	r1, r1, r6
    d5e4:	e2866030 	add	r6, r6, #48	; 0x30
    d5e8:	e6af1071 	sxtb	r1, r1
    d5ec:	96af1076 	sxtbls	r1, r6
    d5f0:	e4c01001 	strb	r1, [r0], #1
    d5f4:	e1a01005 	mov	r1, r5
    d5f8:	e58d0004 	str	r0, [sp, #4]
    d5fc:	e1a00004 	mov	r0, r4
    d600:	fa001f2a 	blx	152b0 <__aeabi_uldivmod>
    d604:	e15b0005 	cmp	fp, r5
    d608:	e1a02000 	mov	r2, r0
    d60c:	015a0004 	cmpeq	sl, r4
    d610:	e1a03001 	mov	r3, r1
    d614:	e1a00008 	mov	r0, r8
    d618:	e1a01009 	mov	r1, r9
    d61c:	9affffd9 	bls	d588 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0xa4>
    d620:	e59d2004 	ldr	r2, [sp, #4]
    d624:	e3a03000 	mov	r3, #0
    d628:	e59d0014 	ldr	r0, [sp, #20]
    d62c:	e5c23000 	strb	r3, [r2]
    d630:	e28dd01c 	add	sp, sp, #28
    d634:	e1cd40d0 	ldrd	r4, [sp]
    d638:	e1cd60d8 	ldrd	r6, [sp, #8]
    d63c:	e1cd81d0 	ldrd	r8, [sp, #16]
    d640:	e1cda1d8 	ldrd	sl, [sp, #24]
    d644:	e28dd020 	add	sp, sp, #32
    d648:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    d64c:	e1a06002 	mov	r6, r2
    d650:	e1a07009 	mov	r7, r9
    d654:	e3a04001 	mov	r4, #1
    d658:	e3a05000 	mov	r5, #0
    d65c:	eaffffc1 	b	d568 <CString::lltoa(char*, unsigned long long, unsigned int, bool)+0x84>

0000d660 <CString::ftoa(char*, double, unsigned int)>:
    d660:	eeb50bc0 	vcmpe.f64	d0, #0.0
    d664:	e16d41fc 	strd	r4, [sp, #-28]!	; 0xffffffe4
    d668:	e1a04000 	mov	r4, r0
    d66c:	e1cd60f8 	strd	r6, [sp, #8]
    d670:	e1a06001 	mov	r6, r1
    d674:	e1a07000 	mov	r7, r0
    d678:	e1cd81f0 	strd	r8, [sp, #16]
    d67c:	e58de018 	str	lr, [sp, #24]
    d680:	ed2d8b02 	vpush	{d8}
    d684:	eeb08b40 	vmov.f64	d8, d0
    d688:	e24dd014 	sub	sp, sp, #20
    d68c:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d690:	5a000002 	bpl	d6a0 <CString::ftoa(char*, double, unsigned int)+0x40>
    d694:	eeb18b40 	vneg.f64	d8, d0
    d698:	e3a0302d 	mov	r3, #45	; 0x2d
    d69c:	e4c73001 	strb	r3, [r7], #1
    d6a0:	eddf0b7e 	vldr	d16, [pc, #504]	; d8a0 <CString::ftoa(char*, double, unsigned int)+0x240>
    d6a4:	eeb48be0 	vcmpe.f64	d8, d16
    d6a8:	eef1fa10 	vmrs	APSR_nzcv, fpscr
    d6ac:	ca00006e 	bgt	d86c <CString::ftoa(char*, double, unsigned int)+0x20c>
    d6b0:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d6b4:	ee175a90 	vmov	r5, s15
    d6b8:	e3550009 	cmp	r5, #9
    d6bc:	83a02001 	movhi	r2, #1
    d6c0:	9a00006d 	bls	d87c <CString::ftoa(char*, double, unsigned int)+0x21c>
    d6c4:	e0822102 	add	r2, r2, r2, lsl #2
    d6c8:	e1a02082 	lsl	r2, r2, #1
    d6cc:	e733f215 	udiv	r3, r5, r2
    d6d0:	e3530009 	cmp	r3, #9
    d6d4:	8afffffa 	bhi	d6c4 <CString::ftoa(char*, double, unsigned int)+0x64>
    d6d8:	e30ceccd 	movw	lr, #52429	; 0xcccd
    d6dc:	e34ceccc 	movt	lr, #52428	; 0xcccc
    d6e0:	e1a0c007 	mov	ip, r7
    d6e4:	e1a01005 	mov	r1, r5
    d6e8:	ea000001 	b	d6f4 <CString::ftoa(char*, double, unsigned int)+0x94>
    d6ec:	e1a02003 	mov	r2, r3
    d6f0:	e733f311 	udiv	r3, r1, r3
    d6f4:	e3530009 	cmp	r3, #9
    d6f8:	e2830057 	add	r0, r3, #87	; 0x57
    d6fc:	e2833030 	add	r3, r3, #48	; 0x30
    d700:	e6af0070 	sxtb	r0, r0
    d704:	96af0073 	sxtbls	r0, r3
    d708:	e3520009 	cmp	r2, #9
    d70c:	e738f211 	udiv	r8, r1, r2
    d710:	e4cc0001 	strb	r0, [ip], #1
    d714:	e0611892 	mls	r1, r2, r8, r1
    d718:	e083829e 	umull	r8, r3, lr, r2
    d71c:	e1a031a3 	lsr	r3, r3, #3
    d720:	8afffff1 	bhi	d6ec <CString::ftoa(char*, double, unsigned int)+0x8c>
    d724:	e3a03000 	mov	r3, #0
    d728:	e1560003 	cmp	r6, r3
    d72c:	e5cc3000 	strb	r3, [ip]
    d730:	1a000007 	bne	d754 <CString::ftoa(char*, double, unsigned int)+0xf4>
    d734:	e1a00004 	mov	r0, r4
    d738:	e28dd014 	add	sp, sp, #20
    d73c:	ecbd8b02 	vpop	{d8}
    d740:	e1cd40d0 	ldrd	r4, [sp]
    d744:	e1cd60d8 	ldrd	r6, [sp, #8]
    d748:	e1cd81d0 	ldrd	r8, [sp, #16]
    d74c:	e28dd018 	add	sp, sp, #24
    d750:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    d754:	e1a00007 	mov	r0, r7
    d758:	eb000510 	bl	eba0 <strlen>
    d75c:	e3560009 	cmp	r6, #9
    d760:	e3a0302e 	mov	r3, #46	; 0x2e
    d764:	31a08006 	movcc	r8, r6
    d768:	e0879000 	add	r9, r7, r0
    d76c:	23a08009 	movcs	r8, #9
    d770:	e3560001 	cmp	r6, #1
    d774:	e7c73000 	strb	r3, [r7, r0]
    d778:	e2896001 	add	r6, r9, #1
    d77c:	9a000044 	bls	d894 <CString::ftoa(char*, double, unsigned int)+0x234>
    d780:	e3a02002 	mov	r2, #2
    d784:	e3a0300a 	mov	r3, #10
    d788:	e0833103 	add	r3, r3, r3, lsl #2
    d78c:	e2822001 	add	r2, r2, #1
    d790:	e1520008 	cmp	r2, r8
    d794:	e1a03083 	lsl	r3, r3, #1
    d798:	9afffffa 	bls	d788 <CString::ftoa(char*, double, unsigned int)+0x128>
    d79c:	ee073a90 	vmov	s15, r3
    d7a0:	eef80b67 	vcvt.f64.u32	d16, s15
    d7a4:	ee075a90 	vmov	s15, r5
    d7a8:	eef81b67 	vcvt.f64.u32	d17, s15
    d7ac:	ee388b61 	vsub.f64	d8, d8, d17
    d7b0:	ee288b20 	vmul.f64	d8, d8, d16
    d7b4:	eefc7bc8 	vcvt.u32.f64	s15, d8
    d7b8:	ee170a90 	vmov	r0, s15
    d7bc:	e3500009 	cmp	r0, #9
    d7c0:	83a02001 	movhi	r2, #1
    d7c4:	9a00002f 	bls	d888 <CString::ftoa(char*, double, unsigned int)+0x228>
    d7c8:	e0822102 	add	r2, r2, r2, lsl #2
    d7cc:	e1a02082 	lsl	r2, r2, #1
    d7d0:	e733f210 	udiv	r3, r0, r2
    d7d4:	e3530009 	cmp	r3, #9
    d7d8:	8afffffa 	bhi	d7c8 <CString::ftoa(char*, double, unsigned int)+0x168>
    d7dc:	e30ceccd 	movw	lr, #52429	; 0xcccd
    d7e0:	e34ceccc 	movt	lr, #52428	; 0xcccc
    d7e4:	e28dc004 	add	ip, sp, #4
    d7e8:	ea000001 	b	d7f4 <CString::ftoa(char*, double, unsigned int)+0x194>
    d7ec:	e1a02003 	mov	r2, r3
    d7f0:	e733f310 	udiv	r3, r0, r3
    d7f4:	e3530009 	cmp	r3, #9
    d7f8:	e2831057 	add	r1, r3, #87	; 0x57
    d7fc:	e2833030 	add	r3, r3, #48	; 0x30
    d800:	e6af1071 	sxtb	r1, r1
    d804:	96af1073 	sxtbls	r1, r3
    d808:	e3520009 	cmp	r2, #9
    d80c:	e735f210 	udiv	r5, r0, r2
    d810:	e4cc1001 	strb	r1, [ip], #1
    d814:	e0600592 	mls	r0, r2, r5, r0
    d818:	e083529e 	umull	r5, r3, lr, r2
    d81c:	e1a031a3 	lsr	r3, r3, #3
    d820:	8afffff1 	bhi	d7ec <CString::ftoa(char*, double, unsigned int)+0x18c>
    d824:	e3a03000 	mov	r3, #0
    d828:	e28d0004 	add	r0, sp, #4
    d82c:	e5cc3000 	strb	r3, [ip]
    d830:	eb0004da 	bl	eba0 <strlen>
    d834:	e0588000 	subs	r8, r8, r0
    d838:	0a000007 	beq	d85c <CString::ftoa(char*, double, unsigned int)+0x1fc>
    d83c:	e2882001 	add	r2, r8, #1
    d840:	e1a03006 	mov	r3, r6
    d844:	e0899002 	add	r9, r9, r2
    d848:	e3a02030 	mov	r2, #48	; 0x30
    d84c:	e4c32001 	strb	r2, [r3], #1
    d850:	e1530009 	cmp	r3, r9
    d854:	1afffffc 	bne	d84c <CString::ftoa(char*, double, unsigned int)+0x1ec>
    d858:	e0866008 	add	r6, r6, r8
    d85c:	e28d1004 	add	r1, sp, #4
    d860:	e1a00006 	mov	r0, r6
    d864:	eb000575 	bl	ee40 <strcpy>
    d868:	eaffffb1 	b	d734 <CString::ftoa(char*, double, unsigned int)+0xd4>
    d86c:	e59f1034 	ldr	r1, [pc, #52]	; d8a8 <CString::ftoa(char*, double, unsigned int)+0x248>
    d870:	e1a00007 	mov	r0, r7
    d874:	eb000571 	bl	ee40 <strcpy>
    d878:	eaffffad 	b	d734 <CString::ftoa(char*, double, unsigned int)+0xd4>
    d87c:	ee173a90 	vmov	r3, s15
    d880:	e3a02001 	mov	r2, #1
    d884:	eaffff93 	b	d6d8 <CString::ftoa(char*, double, unsigned int)+0x78>
    d888:	ee173a90 	vmov	r3, s15
    d88c:	e3a02001 	mov	r2, #1
    d890:	eaffffd1 	b	d7dc <CString::ftoa(char*, double, unsigned int)+0x17c>
    d894:	eef20b04 	vmov.f64	d16, #36	; 0x41200000  10.0
    d898:	eaffffc1 	b	d7a4 <CString::ftoa(char*, double, unsigned int)+0x144>
    d89c:	e320f000 	nop	{0}
    d8a0:	ffe00000 	.word	0xffe00000
    d8a4:	41efffff 	.word	0x41efffff
    d8a8:	00015a88 	.word	0x00015a88

0000d8ac <CString::ReserveSpace(unsigned int) [clone .part.0]>:
    d8ac:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    d8b0:	e1c020d4 	ldrd	r2, [r0, #4]
    d8b4:	e1cd60f8 	strd	r6, [sp, #8]
    d8b8:	e590600c 	ldr	r6, [r0, #12]
    d8bc:	e58d8010 	str	r8, [sp, #16]
    d8c0:	e58de014 	str	lr, [sp, #20]
    d8c4:	e0466002 	sub	r6, r6, r2
    d8c8:	e0861001 	add	r1, r6, r1
    d8cc:	e2812001 	add	r2, r1, #1
    d8d0:	e1520003 	cmp	r2, r3
    d8d4:	8a000004 	bhi	d8ec <CString::ReserveSpace(unsigned int) [clone .part.0]+0x40>
    d8d8:	e1cd40d0 	ldrd	r4, [sp]
    d8dc:	e1cd60d8 	ldrd	r6, [sp, #8]
    d8e0:	e59d8010 	ldr	r8, [sp, #16]
    d8e4:	e28dd014 	add	sp, sp, #20
    d8e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    d8ec:	e2815041 	add	r5, r1, #65	; 0x41
    d8f0:	e1a04000 	mov	r4, r0
    d8f4:	e1a00005 	mov	r0, r5
    d8f8:	eb00076e 	bl	f6b8 <operator new[](unsigned int)>
    d8fc:	e594300c 	ldr	r3, [r4, #12]
    d900:	e3a02000 	mov	r2, #0
    d904:	e1a07000 	mov	r7, r0
    d908:	e5c32000 	strb	r2, [r3]
    d90c:	e5941004 	ldr	r1, [r4, #4]
    d910:	eb00054a 	bl	ee40 <strcpy>
    d914:	e5940004 	ldr	r0, [r4, #4]
    d918:	e3500000 	cmp	r0, #0
    d91c:	0a000000 	beq	d924 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x78>
    d920:	eb00076f 	bl	f6e4 <operator delete[](void*)>
    d924:	e0876006 	add	r6, r7, r6
    d928:	e5847004 	str	r7, [r4, #4]
    d92c:	e5845008 	str	r5, [r4, #8]
    d930:	e584600c 	str	r6, [r4, #12]
    d934:	eaffffe7 	b	d8d8 <CString::ReserveSpace(unsigned int) [clone .part.0]+0x2c>

0000d938 <__aeabi_atexit>:
    d938:	e12fff1e 	bx	lr

0000d93c <__errno>:
    d93c:	e59f0000 	ldr	r0, [pc]	; d944 <__errno+0x8>
    d940:	e12fff1e 	bx	lr
    d944:	00019464 	.word	0x00019464

0000d948 <set_qemu_exit_status>:
    d948:	e3093460 	movw	r3, #37984	; 0x9460
    d94c:	e3403001 	movt	r3, #1
    d950:	e5830008 	str	r0, [r3, #8]
    d954:	e12fff1e 	bx	lr

0000d958 <halt>:
    d958:	f10c0080 	cpsid	i
    d95c:	f10c0040 	cpsid	f
    d960:	f57ff04f 	dsb	sy
    d964:	e320f003 	wfi
    d968:	eafffffc 	b	d960 <halt+0x8>

0000d96c <reboot>:
    d96c:	e3a03000 	mov	r3, #0
    d970:	e34f3e10 	movt	r3, #65040	; 0xfe10
    d974:	e3a01001 	mov	r1, #1
    d978:	e3451a00 	movt	r1, #23040	; 0x5a00
    d97c:	e3a02020 	mov	r2, #32
    d980:	e3452a00 	movt	r2, #23040	; 0x5a00
    d984:	e5831024 	str	r1, [r3, #36]	; 0x24
    d988:	e583201c 	str	r2, [r3, #28]
    d98c:	eafffffe 	b	d98c <reboot+0x20>

0000d990 <vfpinit>:
    d990:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    d994:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    d998:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    d99c:	f57ff06f 	isb	sy
    d9a0:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    d9a4:	eee83a10 	vmsr	fpexc, r3
    d9a8:	e3a03403 	mov	r3, #50331648	; 0x3000000
    d9ac:	eee13a10 	vmsr	fpscr, r3
    d9b0:	e12fff1e 	bx	lr

0000d9b4 <sysinit>:
    d9b4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    d9b8:	e24ddf6f 	sub	sp, sp, #444	; 0x1bc
    d9bc:	f1080040 	cpsie	f
    d9c0:	f1080080 	cpsie	i
    d9c4:	eb000b8b 	bl	107f8 <InvalidateDataCacheL1Only>
    d9c8:	ee113f50 	mrc	15, 0, r3, cr1, cr0, {2}
    d9cc:	e383360f 	orr	r3, r3, #15728640	; 0xf00000
    d9d0:	ee013f50 	mcr	15, 0, r3, cr1, cr0, {2}
    d9d4:	f57ff06f 	isb	sy
    d9d8:	e3a03101 	mov	r3, #1073741824	; 0x40000000
    d9dc:	eee83a10 	vmsr	fpexc, r3
    d9e0:	e3a03403 	mov	r3, #50331648	; 0x3000000
    d9e4:	eee13a10 	vmsr	fpscr, r3
    d9e8:	e3a03000 	mov	r3, #0
    d9ec:	e34f3f80 	movt	r3, #65408	; 0xff80
    d9f0:	e30d1098 	movw	r1, #53400	; 0xd098
    d9f4:	e340125e 	movt	r1, #606	; 0x25e
    d9f8:	e309271c 	movw	r2, #38684	; 0x971c
    d9fc:	e3402001 	movt	r2, #1
    da00:	e308007c 	movw	r0, #32892	; 0x807c
    da04:	e3400001 	movt	r0, #1
    da08:	e5831008 	str	r1, [r3, #8]
    da0c:	e0422000 	sub	r2, r2, r0
    da10:	e3a01000 	mov	r1, #0
    da14:	eb0003f3 	bl	e9e8 <memset>
    da18:	e1a0000d 	mov	r0, sp
    da1c:	e3075d78 	movw	r5, #32120	; 0x7d78
    da20:	e3405001 	movt	r5, #1
    da24:	ebfff165 	bl	9fc0 <CMachineInfo::CMachineInfo()>
    da28:	e3a01001 	mov	r1, #1
    da2c:	e28d0020 	add	r0, sp, #32
    da30:	eb000d02 	bl	10e40 <CMemorySystem::CMemorySystem(bool)>
    da34:	e1a0000d 	mov	r0, sp
    da38:	ebfff3a3 	bl	a8cc <CMachineInfo::FetchDTB()>
    da3c:	e3073d80 	movw	r3, #32128	; 0x7d80
    da40:	e3403001 	movt	r3, #1
    da44:	e1550003 	cmp	r5, r3
    da48:	2a000009 	bcs	da74 <sysinit+0xc0>
    da4c:	e2433001 	sub	r3, r3, #1
    da50:	e1a04005 	mov	r4, r5
    da54:	e0433005 	sub	r3, r3, r5
    da58:	e3c33003 	bic	r3, r3, #3
    da5c:	e2833004 	add	r3, r3, #4
    da60:	e0855003 	add	r5, r5, r3
    da64:	e4943004 	ldr	r3, [r4], #4
    da68:	e12fff33 	blx	r3
    da6c:	e1540005 	cmp	r4, r5
    da70:	1afffffb 	bne	da64 <sysinit+0xb0>
    da74:	ebffe9dd 	bl	81f0 <main>
    da78:	e3500001 	cmp	r0, #1
    da7c:	0a000000 	beq	da84 <sysinit+0xd0>
    da80:	ebffffb4 	bl	d958 <halt>
    da84:	eb0006a4 	bl	f51c <IsChainBootEnabled>
    da88:	e3500000 	cmp	r0, #0
    da8c:	1a000000 	bne	da94 <sysinit+0xe0>
    da90:	ebffffb5 	bl	d96c <reboot>
    da94:	e28d0020 	add	r0, sp, #32
    da98:	eb000d6a 	bl	11048 <CMemorySystem::Destructor()>
    da9c:	f10c0040 	cpsid	f
    daa0:	eb0006a3 	bl	f534 <DoChainBoot>
    daa4:	eafffff9 	b	da90 <sysinit+0xdc>

0000daa8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>:
    daa8:	e2800001 	add	r0, r0, #1
    daac:	f57ff06f 	isb	sy
    dab0:	ec532f0e 	mrrc	15, 0, r2, r3, cr14
    dab4:	f57ff06f 	isb	sy
    dab8:	ec513f0e 	mrrc	15, 0, r3, r1, cr14
    dabc:	e0433002 	sub	r3, r3, r2
    dac0:	e1500003 	cmp	r0, r3
    dac4:	8afffffa 	bhi	dab4 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]+0xc>
    dac8:	e12fff1e 	bx	lr

0000dacc <CTimer::CTimer(CInterruptSystem*)>:
    dacc:	e16d41f0 	strd	r4, [sp, #-16]!
    dad0:	e1a04000 	mov	r4, r0
    dad4:	e3a05000 	mov	r5, #0
    dad8:	e58d6008 	str	r6, [sp, #8]
    dadc:	e3a06001 	mov	r6, #1
    dae0:	e2800018 	add	r0, r0, #24
    dae4:	e58de00c 	str	lr, [sp, #12]
    dae8:	e5841000 	str	r1, [r4]
    daec:	e5845004 	str	r5, [r4, #4]
    daf0:	e5845008 	str	r5, [r4, #8]
    daf4:	e584500c 	str	r5, [r4, #12]
    daf8:	e5846010 	str	r6, [r4, #16]
    dafc:	e5845014 	str	r5, [r4, #20]
    db00:	eb00189f 	bl	13d84 <CPtrList::CPtrList()>
    db04:	e309346c 	movw	r3, #37996	; 0x946c
    db08:	e3403001 	movt	r3, #1
    db0c:	e584601c 	str	r6, [r4, #28]
    db10:	e5931000 	ldr	r1, [r3]
    db14:	e3a02d35 	mov	r2, #3392	; 0xd40
    db18:	e3402003 	movt	r2, #3
    db1c:	e3a000c8 	mov	r0, #200	; 0xc8
    db20:	e5842020 	str	r2, [r4, #32]
    db24:	e5840024 	str	r0, [r4, #36]	; 0x24
    db28:	e5845028 	str	r5, [r4, #40]	; 0x28
    db2c:	e1510005 	cmp	r1, r5
    db30:	e584503c 	str	r5, [r4, #60]	; 0x3c
    db34:	1a000005 	bne	db50 <CTimer::CTimer(CInterruptSystem*)+0x84>
    db38:	e1a00004 	mov	r0, r4
    db3c:	e59d6008 	ldr	r6, [sp, #8]
    db40:	e5834000 	str	r4, [r3]
    db44:	e1cd40d0 	ldrd	r4, [sp]
    db48:	e28dd00c 	add	sp, sp, #12
    db4c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    db50:	e3051a94 	movw	r1, #23188	; 0x5a94
    db54:	e3401001 	movt	r1, #1
    db58:	e3050aa0 	movw	r0, #23200	; 0x5aa0
    db5c:	e3400001 	movt	r0, #1
    db60:	e3a02042 	mov	r2, #66	; 0x42
    db64:	ebffeaf0 	bl	872c <assertion_failed>

0000db68 <CTimer::~CTimer()>:
    db68:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    db6c:	e1cd60f8 	strd	r6, [sp, #8]
    db70:	e58d8010 	str	r8, [sp, #16]
    db74:	e1a08000 	mov	r8, r0
    db78:	e5900000 	ldr	r0, [r0]
    db7c:	e58de014 	str	lr, [sp, #20]
    db80:	e3500000 	cmp	r0, #0
    db84:	0a000033 	beq	dc58 <CTimer::~CTimer()+0xf0>
    db88:	e3a03000 	mov	r3, #0
    db8c:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    db90:	e3a0101e 	mov	r1, #30
    db94:	e2886018 	add	r6, r8, #24
    db98:	eb000f0f 	bl	117dc <CInterruptSystem::DisconnectIRQ(unsigned int)>
    db9c:	e1a00006 	mov	r0, r6
    dba0:	e3047d43 	movw	r7, #19779	; 0x4d43
    dba4:	e3447b54 	movt	r7, #19284	; 0x4b54
    dba8:	eb001883 	bl	13dbc <CPtrList::GetFirst()>
    dbac:	e2504000 	subs	r4, r0, #0
    dbb0:	0a000011 	beq	dbfc <CTimer::~CTimer()+0x94>
    dbb4:	e1a01004 	mov	r1, r4
    dbb8:	e1a00006 	mov	r0, r6
    dbbc:	eb001899 	bl	13e28 <CPtrList::GetPtr(TPtrListElement*)>
    dbc0:	e2505000 	subs	r5, r0, #0
    dbc4:	0a000017 	beq	dc28 <CTimer::~CTimer()+0xc0>
    dbc8:	e5953000 	ldr	r3, [r5]
    dbcc:	e1530007 	cmp	r3, r7
    dbd0:	1a00001a 	bne	dc40 <CTimer::~CTimer()+0xd8>
    dbd4:	e1a01004 	mov	r1, r4
    dbd8:	e1a00006 	mov	r0, r6
    dbdc:	eb00192e 	bl	1409c <CPtrList::Remove(TPtrListElement*)>
    dbe0:	e1a00005 	mov	r0, r5
    dbe4:	e3a01014 	mov	r1, #20
    dbe8:	eb0006c7 	bl	f70c <operator delete(void*, unsigned int)>
    dbec:	e1a00006 	mov	r0, r6
    dbf0:	eb001871 	bl	13dbc <CPtrList::GetFirst()>
    dbf4:	e2504000 	subs	r4, r0, #0
    dbf8:	1affffed 	bne	dbb4 <CTimer::~CTimer()+0x4c>
    dbfc:	e309346c 	movw	r3, #37996	; 0x946c
    dc00:	e3403001 	movt	r3, #1
    dc04:	e1a00006 	mov	r0, r6
    dc08:	e5834000 	str	r4, [r3]
    dc0c:	eb00185f 	bl	13d90 <CPtrList::~CPtrList()>
    dc10:	e1a00008 	mov	r0, r8
    dc14:	e1cd40d0 	ldrd	r4, [sp]
    dc18:	e1cd60d8 	ldrd	r6, [sp, #8]
    dc1c:	e59d8010 	ldr	r8, [sp, #16]
    dc20:	e28dd014 	add	sp, sp, #20
    dc24:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    dc28:	e3051a94 	movw	r1, #23188	; 0x5a94
    dc2c:	e3401001 	movt	r1, #1
    dc30:	e3050ac8 	movw	r0, #23240	; 0x5ac8
    dc34:	e3400001 	movt	r0, #1
    dc38:	e3a02059 	mov	r2, #89	; 0x59
    dc3c:	ebffeaba 	bl	872c <assertion_failed>
    dc40:	e3051a94 	movw	r1, #23188	; 0x5a94
    dc44:	e3401001 	movt	r1, #1
    dc48:	e3050ad4 	movw	r0, #23252	; 0x5ad4
    dc4c:	e3400001 	movt	r0, #1
    dc50:	e3a0205a 	mov	r2, #90	; 0x5a
    dc54:	ebffeab4 	bl	872c <assertion_failed>
    dc58:	e3051a94 	movw	r1, #23188	; 0x5a94
    dc5c:	e3401001 	movt	r1, #1
    dc60:	e3050ab0 	movw	r0, #23216	; 0x5ab0
    dc64:	e3400001 	movt	r0, #1
    dc68:	e3a02048 	mov	r2, #72	; 0x48
    dc6c:	ebffeaae 	bl	872c <assertion_failed>

0000dc70 <CTimer::SetTimeZone(int)>:
    dc70:	e2813e59 	add	r3, r1, #1424	; 0x590
    dc74:	e300cb3e 	movw	ip, #2878	; 0xb3e
    dc78:	e283300f 	add	r3, r3, #15
    dc7c:	e1a02000 	mov	r2, r0
    dc80:	e153000c 	cmp	r3, ip
    dc84:	93a00001 	movls	r0, #1
    dc88:	83a00000 	movhi	r0, #0
    dc8c:	95821014 	strls	r1, [r2, #20]
    dc90:	e12fff1e 	bx	lr

0000dc94 <CTimer::GetTimeZone() const>:
    dc94:	e5900014 	ldr	r0, [r0, #20]
    dc98:	e12fff1e 	bx	lr

0000dc9c <CTimer::SetTime(unsigned int, bool)>:
    dc9c:	e5903014 	ldr	r3, [r0, #20]
    dca0:	e3520000 	cmp	r2, #0
    dca4:	e16d41f0 	strd	r4, [sp, #-16]!
    dca8:	e1a04000 	mov	r4, r0
    dcac:	e1a05001 	mov	r5, r1
    dcb0:	e58d6008 	str	r6, [sp, #8]
    dcb4:	e58de00c 	str	lr, [sp, #12]
    dcb8:	e0633203 	rsb	r3, r3, r3, lsl #4
    dcbc:	e1a03103 	lsl	r3, r3, #2
    dcc0:	1a000002 	bne	dcd0 <CTimer::SetTime(unsigned int, bool)+0x34>
    dcc4:	e3530000 	cmp	r3, #0
    dcc8:	ba00001f 	blt	dd4c <CTimer::SetTime(unsigned int, bool)+0xb0>
    dccc:	e0855003 	add	r5, r5, r3
    dcd0:	e5942028 	ldr	r2, [r4, #40]	; 0x28
    dcd4:	e3520000 	cmp	r2, #0
    dcd8:	0a000007 	beq	dcfc <CTimer::SetTime(unsigned int, bool)+0x60>
    dcdc:	e594100c 	ldr	r1, [r4, #12]
    dce0:	e0450003 	sub	r0, r5, r3
    dce4:	e1530001 	cmp	r3, r1
    dce8:	d0411003 	suble	r1, r1, r3
    dcec:	c3a01000 	movgt	r1, #0
    dcf0:	e12fff32 	blx	r2
    dcf4:	e3500000 	cmp	r0, #0
    dcf8:	0a000016 	beq	dd58 <CTimer::SetTime(unsigned int, bool)+0xbc>
    dcfc:	e5940010 	ldr	r0, [r4, #16]
    dd00:	e3500000 	cmp	r0, #0
    dd04:	03a00001 	moveq	r0, #1
    dd08:	0584500c 	streq	r5, [r4, #12]
    dd0c:	1a000003 	bne	dd20 <CTimer::SetTime(unsigned int, bool)+0x84>
    dd10:	e1cd40d0 	ldrd	r4, [sp]
    dd14:	e59d6008 	ldr	r6, [sp, #8]
    dd18:	e28dd00c 	add	sp, sp, #12
    dd1c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    dd20:	eb000de0 	bl	114a8 <EnterCritical>
    dd24:	e5943010 	ldr	r3, [r4, #16]
    dd28:	e584500c 	str	r5, [r4, #12]
    dd2c:	e3530000 	cmp	r3, #0
    dd30:	0a00000d 	beq	dd6c <CTimer::SetTime(unsigned int, bool)+0xd0>
    dd34:	eb000e09 	bl	11560 <LeaveCritical>
    dd38:	e1cd40d0 	ldrd	r4, [sp]
    dd3c:	e3a00001 	mov	r0, #1
    dd40:	e59d6008 	ldr	r6, [sp, #8]
    dd44:	e28dd00c 	add	sp, sp, #12
    dd48:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    dd4c:	e2632000 	rsb	r2, r3, #0
    dd50:	e1520001 	cmp	r2, r1
    dd54:	daffffdc 	ble	dccc <CTimer::SetTime(unsigned int, bool)+0x30>
    dd58:	e1cd40d0 	ldrd	r4, [sp]
    dd5c:	e3a00000 	mov	r0, #0
    dd60:	e59d6008 	ldr	r6, [sp, #8]
    dd64:	e28dd00c 	add	sp, sp, #12
    dd68:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    dd6c:	e3a00001 	mov	r0, #1
    dd70:	eaffffe6 	b	dd10 <CTimer::SetTime(unsigned int, bool)+0x74>

0000dd74 <CTimer::GetClockTicks()>:
    dd74:	f57ff06f 	isb	sy
    dd78:	ec530f0e 	mrrc	15, 0, r0, r3, cr14
    dd7c:	e12fff1e 	bx	lr

0000dd80 <CTimer::GetTicks() const>:
    dd80:	e5900004 	ldr	r0, [r0, #4]
    dd84:	e12fff1e 	bx	lr

0000dd88 <CTimer::GetUptime() const>:
    dd88:	e5900008 	ldr	r0, [r0, #8]
    dd8c:	e12fff1e 	bx	lr

0000dd90 <CTimer::GetTime() const>:
    dd90:	e590000c 	ldr	r0, [r0, #12]
    dd94:	e12fff1e 	bx	lr

0000dd98 <CTimer::GetLocalTime(unsigned int*, unsigned int*)>:
    dd98:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    dd9c:	e1a04000 	mov	r4, r0
    dda0:	e1a05001 	mov	r5, r1
    dda4:	e5900010 	ldr	r0, [r0, #16]
    dda8:	e1cd60f8 	strd	r6, [sp, #8]
    ddac:	e1a06002 	mov	r6, r2
    ddb0:	e58d8010 	str	r8, [sp, #16]
    ddb4:	e58de014 	str	lr, [sp, #20]
    ddb8:	e3500000 	cmp	r0, #0
    ddbc:	1a000015 	bne	de18 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x80>
    ddc0:	e594700c 	ldr	r7, [r4, #12]
    ddc4:	e5944004 	ldr	r4, [r4, #4]
    ddc8:	e3550000 	cmp	r5, #0
    ddcc:	0a00001a 	beq	de3c <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xa4>
    ddd0:	e3560000 	cmp	r6, #0
    ddd4:	e5857000 	str	r7, [r5]
    ddd8:	0a00001d 	beq	de54 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0xbc>
    dddc:	e308351f 	movw	r3, #34079	; 0x851f
    dde0:	e34531eb 	movt	r3, #20971	; 0x51eb
    dde4:	e59d8010 	ldr	r8, [sp, #16]
    dde8:	e3a01064 	mov	r1, #100	; 0x64
    ddec:	e3022710 	movw	r2, #10000	; 0x2710
    ddf0:	e0830493 	umull	r0, r3, r3, r4
    ddf4:	e3a00001 	mov	r0, #1
    ddf8:	e1a032a3 	lsr	r3, r3, #5
    ddfc:	e0634391 	mls	r3, r1, r3, r4
    de00:	e1cd40d0 	ldrd	r4, [sp]
    de04:	e0030392 	mul	r3, r2, r3
    de08:	e5863000 	str	r3, [r6]
    de0c:	e1cd60d8 	ldrd	r6, [sp, #8]
    de10:	e28dd014 	add	sp, sp, #20
    de14:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    de18:	eb000da2 	bl	114a8 <EnterCritical>
    de1c:	e594700c 	ldr	r7, [r4, #12]
    de20:	e5943010 	ldr	r3, [r4, #16]
    de24:	e5944004 	ldr	r4, [r4, #4]
    de28:	e3530000 	cmp	r3, #0
    de2c:	0affffe5 	beq	ddc8 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x30>
    de30:	eb000dca 	bl	11560 <LeaveCritical>
    de34:	e3550000 	cmp	r5, #0
    de38:	1affffe4 	bne	ddd0 <CTimer::GetLocalTime(unsigned int*, unsigned int*)+0x38>
    de3c:	e3051a94 	movw	r1, #23188	; 0x5a94
    de40:	e3401001 	movt	r1, #1
    de44:	e3050afc 	movw	r0, #23292	; 0x5afc
    de48:	e3400001 	movt	r0, #1
    de4c:	e3a02f43 	mov	r2, #268	; 0x10c
    de50:	ebffea35 	bl	872c <assertion_failed>
    de54:	e3051a94 	movw	r1, #23188	; 0x5a94
    de58:	e3401001 	movt	r1, #1
    de5c:	e3050b0c 	movw	r0, #23308	; 0x5b0c
    de60:	e3400001 	movt	r0, #1
    de64:	e300210f 	movw	r2, #271	; 0x10f
    de68:	ebffea2f 	bl	872c <assertion_failed>

0000de6c <CTimer::GetUniversalTime() const>:
    de6c:	e5903014 	ldr	r3, [r0, #20]
    de70:	e590000c 	ldr	r0, [r0, #12]
    de74:	e0633203 	rsb	r3, r3, r3, lsl #4
    de78:	e1500103 	cmp	r0, r3, lsl #2
    de7c:	e1a03103 	lsl	r3, r3, #2
    de80:	a0400003 	subge	r0, r0, r3
    de84:	b3a00000 	movlt	r0, #0
    de88:	e12fff1e 	bx	lr

0000de8c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)>:
    de8c:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    de90:	e1a04000 	mov	r4, r0
    de94:	e1a05001 	mov	r5, r1
    de98:	e5900010 	ldr	r0, [r0, #16]
    de9c:	e1cd60f8 	strd	r6, [sp, #8]
    dea0:	e1a06002 	mov	r6, r2
    dea4:	e58d8010 	str	r8, [sp, #16]
    dea8:	e58de014 	str	lr, [sp, #20]
    deac:	e3500000 	cmp	r0, #0
    deb0:	1a00001d 	bne	df2c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xa0>
    deb4:	e594700c 	ldr	r7, [r4, #12]
    deb8:	e5948004 	ldr	r8, [r4, #4]
    debc:	e5943014 	ldr	r3, [r4, #20]
    dec0:	e0633203 	rsb	r3, r3, r3, lsl #4
    dec4:	e1570103 	cmp	r7, r3, lsl #2
    dec8:	e1a03103 	lsl	r3, r3, #2
    decc:	ba000014 	blt	df24 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x98>
    ded0:	e3550000 	cmp	r5, #0
    ded4:	0a00001c 	beq	df4c <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xc0>
    ded8:	e0473003 	sub	r3, r7, r3
    dedc:	e3560000 	cmp	r6, #0
    dee0:	e5853000 	str	r3, [r5]
    dee4:	0a00001e 	beq	df64 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0xd8>
    dee8:	e308351f 	movw	r3, #34079	; 0x851f
    deec:	e34531eb 	movt	r3, #20971	; 0x51eb
    def0:	e3a01064 	mov	r1, #100	; 0x64
    def4:	e3022710 	movw	r2, #10000	; 0x2710
    def8:	e0830893 	umull	r0, r3, r3, r8
    defc:	e3a00001 	mov	r0, #1
    df00:	e1a032a3 	lsr	r3, r3, #5
    df04:	e0638391 	mls	r3, r1, r3, r8
    df08:	e0030392 	mul	r3, r2, r3
    df0c:	e5863000 	str	r3, [r6]
    df10:	e1cd40d0 	ldrd	r4, [sp]
    df14:	e1cd60d8 	ldrd	r6, [sp, #8]
    df18:	e59d8010 	ldr	r8, [sp, #16]
    df1c:	e28dd014 	add	sp, sp, #20
    df20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    df24:	e3a00000 	mov	r0, #0
    df28:	eafffff8 	b	df10 <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x84>
    df2c:	eb000d5d 	bl	114a8 <EnterCritical>
    df30:	e594700c 	ldr	r7, [r4, #12]
    df34:	e5943010 	ldr	r3, [r4, #16]
    df38:	e5948004 	ldr	r8, [r4, #4]
    df3c:	e3530000 	cmp	r3, #0
    df40:	0affffdd 	beq	debc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
    df44:	eb000d85 	bl	11560 <LeaveCritical>
    df48:	eaffffdb 	b	debc <CTimer::GetUniversalTime(unsigned int*, unsigned int*)+0x30>
    df4c:	e3051a94 	movw	r1, #23188	; 0x5a94
    df50:	e3401001 	movt	r1, #1
    df54:	e3050afc 	movw	r0, #23292	; 0x5afc
    df58:	e3400001 	movt	r0, #1
    df5c:	e3002131 	movw	r2, #305	; 0x131
    df60:	ebffe9f1 	bl	872c <assertion_failed>
    df64:	e3051a94 	movw	r1, #23188	; 0x5a94
    df68:	e3401001 	movt	r1, #1
    df6c:	e3050b0c 	movw	r0, #23308	; 0x5b0c
    df70:	e3400001 	movt	r0, #1
    df74:	e3a02f4d 	mov	r2, #308	; 0x134
    df78:	ebffe9eb 	bl	872c <assertion_failed>

0000df7c <CTimer::GetTimeString()>:
    df7c:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
    df80:	e1a04000 	mov	r4, r0
    df84:	e5900010 	ldr	r0, [r0, #16]
    df88:	e1cd60f8 	strd	r6, [sp, #8]
    df8c:	e1cd81f0 	strd	r8, [sp, #16]
    df90:	e1cda1f8 	strd	sl, [sp, #24]
    df94:	e58de020 	str	lr, [sp, #32]
    df98:	e24dd014 	sub	sp, sp, #20
    df9c:	e3500000 	cmp	r0, #0
    dfa0:	1a000069 	bne	e14c <CTimer::GetTimeString()+0x1d0>
    dfa4:	e594b00c 	ldr	fp, [r4, #12]
    dfa8:	e594a004 	ldr	sl, [r4, #4]
    dfac:	e19b000a 	orrs	r0, fp, sl
    dfb0:	01a0a000 	moveq	sl, r0
    dfb4:	0a000054 	beq	e10c <CTimer::GetTimeString()+0x190>
    dfb8:	e3089889 	movw	r9, #34953	; 0x8889
    dfbc:	e3489888 	movt	r9, #34952	; 0x8888
    dfc0:	e30a4aab 	movw	r4, #43691	; 0xaaab
    dfc4:	e34a4aaa 	movt	r4, #43690	; 0xaaaa
    dfc8:	e0883b99 	umull	r3, r8, r9, fp
    dfcc:	e305cc29 	movw	ip, #23593	; 0x5c29
    dfd0:	e34cc28f 	movt	ip, #49807	; 0xc28f
    dfd4:	e3050c28 	movw	r0, #23592	; 0x5c28
    dfd8:	e340028f 	movt	r0, #655	; 0x28f
    dfdc:	e30d570a 	movw	r5, #55050	; 0xd70a
    dfe0:	e34050a3 	movt	r5, #163	; 0xa3
    dfe4:	e1a022a8 	lsr	r2, r8, #5
    dfe8:	e30067b2 	movw	r6, #1970	; 0x7b2
    dfec:	e300e16d 	movw	lr, #365	; 0x16d
    dff0:	e0628202 	rsb	r8, r2, r2, lsl #4
    dff4:	e0893299 	umull	r3, r9, r9, r2
    dff8:	e04b8108 	sub	r8, fp, r8, lsl #2
    dffc:	e1a072a9 	lsr	r7, r9, #5
    e000:	e0679207 	rsb	r9, r7, r7, lsl #4
    e004:	e0843794 	umull	r3, r4, r4, r7
    e008:	e0429109 	sub	r9, r2, r9, lsl #2
    e00c:	e1a04224 	lsr	r4, r4, #4
    e010:	ea000007 	b	e034 <CTimer::GetTimeString()+0xb8>
    e014:	e3160003 	tst	r6, #3
    e018:	03a02001 	moveq	r2, #1
    e01c:	13a02000 	movne	r2, #0
    e020:	e082100e 	add	r1, r2, lr
    e024:	e1540001 	cmp	r4, r1
    e028:	3a00000a 	bcc	e058 <CTimer::GetTimeString()+0xdc>
    e02c:	e0444001 	sub	r4, r4, r1
    e030:	e2866001 	add	r6, r6, #1
    e034:	e003069c 	mul	r3, ip, r6
    e038:	e1500163 	cmp	r0, r3, ror #2
    e03c:	3afffff4 	bcc	e014 <CTimer::GetTimeString()+0x98>
    e040:	e1550263 	cmp	r5, r3, ror #4
    e044:	23a02001 	movcs	r2, #1
    e048:	33a02000 	movcc	r2, #0
    e04c:	e082100e 	add	r1, r2, lr
    e050:	e1540001 	cmp	r4, r1
    e054:	2afffff4 	bcs	e02c <CTimer::GetTimeString()+0xb0>
    e058:	e3050c88 	movw	r0, #23688	; 0x5c88
    e05c:	e3400001 	movt	r0, #1
    e060:	e3a05000 	mov	r5, #0
    e064:	ea000001 	b	e070 <CTimer::GetTimeString()+0xf4>
    e068:	e0444001 	sub	r4, r4, r1
    e06c:	e2855001 	add	r5, r5, #1
    e070:	e3550001 	cmp	r5, #1
    e074:	13a03000 	movne	r3, #0
    e078:	02023001 	andeq	r3, r2, #1
    e07c:	e3530000 	cmp	r3, #0
    e080:	07901105 	ldreq	r1, [r0, r5, lsl #2]
    e084:	13a0101d 	movne	r1, #29
    e088:	e1540001 	cmp	r4, r1
    e08c:	2afffff5 	bcs	e068 <CTimer::GetTimeString()+0xec>
    e090:	e308b51f 	movw	fp, #34079	; 0x851f
    e094:	e345b1eb 	movt	fp, #20971	; 0x51eb
    e098:	e3a03064 	mov	r3, #100	; 0x64
    e09c:	e3a00010 	mov	r0, #16
    e0a0:	e08b2a9b 	umull	r2, fp, fp, sl
    e0a4:	e1a0b2ab 	lsr	fp, fp, #5
    e0a8:	e06bab93 	mls	fp, r3, fp, sl
    e0ac:	eb00057b 	bl	f6a0 <operator new(unsigned int)>
    e0b0:	e1a0a000 	mov	sl, r0
    e0b4:	ebfff84b 	bl	c1e8 <CString::CString()>
    e0b8:	e30037b7 	movw	r3, #1975	; 0x7b7
    e0bc:	e1560003 	cmp	r6, r3
    e0c0:	9a000019 	bls	e12c <CTimer::GetTimeString()+0x1b0>
    e0c4:	e30acaab 	movw	ip, #43691	; 0xaaab
    e0c8:	e34acaaa 	movt	ip, #43690	; 0xaaaa
    e0cc:	e58d9004 	str	r9, [sp, #4]
    e0d0:	e3082004 	movw	r2, #32772	; 0x8004
    e0d4:	e3402001 	movt	r2, #1
    e0d8:	e58d8008 	str	r8, [sp, #8]
    e0dc:	e08c179c 	umull	r1, ip, ip, r7
    e0e0:	e2843001 	add	r3, r4, #1
    e0e4:	e3051b20 	movw	r1, #23328	; 0x5b20
    e0e8:	e3401001 	movt	r1, #1
    e0ec:	e1a0000a 	mov	r0, sl
    e0f0:	e58db00c 	str	fp, [sp, #12]
    e0f4:	e7922105 	ldr	r2, [r2, r5, lsl #2]
    e0f8:	e1a0c22c 	lsr	ip, ip, #4
    e0fc:	e08cc08c 	add	ip, ip, ip, lsl #1
    e100:	e047718c 	sub	r7, r7, ip, lsl #3
    e104:	e58d7000 	str	r7, [sp]
    e108:	ebfff980 	bl	c710 <CString::Format(char const*, ...)>
    e10c:	e1a0000a 	mov	r0, sl
    e110:	e28dd014 	add	sp, sp, #20
    e114:	e1cd40d0 	ldrd	r4, [sp]
    e118:	e1cd60d8 	ldrd	r6, [sp, #8]
    e11c:	e1cd81d0 	ldrd	r8, [sp, #16]
    e120:	e1cda1d8 	ldrd	sl, [sp, #24]
    e124:	e28dd020 	add	sp, sp, #32
    e128:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e12c:	e1a03009 	mov	r3, r9
    e130:	e1a02007 	mov	r2, r7
    e134:	e88d0900 	stm	sp, {r8, fp}
    e138:	e3051b3c 	movw	r1, #23356	; 0x5b3c
    e13c:	e3401001 	movt	r1, #1
    e140:	e1a0000a 	mov	r0, sl
    e144:	ebfff971 	bl	c710 <CString::Format(char const*, ...)>
    e148:	eaffffef 	b	e10c <CTimer::GetTimeString()+0x190>
    e14c:	eb000cd5 	bl	114a8 <EnterCritical>
    e150:	e594b00c 	ldr	fp, [r4, #12]
    e154:	e5943010 	ldr	r3, [r4, #16]
    e158:	e594a004 	ldr	sl, [r4, #4]
    e15c:	e3530000 	cmp	r3, #0
    e160:	0affff91 	beq	dfac <CTimer::GetTimeString()+0x30>
    e164:	eb000cfd 	bl	11560 <LeaveCritical>
    e168:	eaffff8f 	b	dfac <CTimer::GetTimeString()+0x30>

0000e16c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)>:
    e16c:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    e170:	e1a04002 	mov	r4, r2
    e174:	e1cd60f8 	strd	r6, [sp, #8]
    e178:	e1a07000 	mov	r7, r0
    e17c:	e3a00014 	mov	r0, #20
    e180:	e1a06001 	mov	r6, r1
    e184:	e1cd81f0 	strd	r8, [sp, #16]
    e188:	e1a08003 	mov	r8, r3
    e18c:	e58da018 	str	sl, [sp, #24]
    e190:	e58de01c 	str	lr, [sp, #28]
    e194:	eb000541 	bl	f6a0 <operator new(unsigned int)>
    e198:	e5971004 	ldr	r1, [r7, #4]
    e19c:	e3540000 	cmp	r4, #0
    e1a0:	e0816006 	add	r6, r1, r6
    e1a4:	0a00003c 	beq	e29c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x130>
    e1a8:	e1a05000 	mov	r5, r0
    e1ac:	e3043d43 	movw	r3, #19779	; 0x4d43
    e1b0:	e3443b54 	movt	r3, #19284	; 0x4b54
    e1b4:	e597001c 	ldr	r0, [r7, #28]
    e1b8:	e8850158 	stm	r5, {r3, r4, r6, r8}
    e1bc:	e59d3020 	ldr	r3, [sp, #32]
    e1c0:	e3500000 	cmp	r0, #0
    e1c4:	e5853010 	str	r3, [r5, #16]
    e1c8:	1a000025 	bne	e264 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xf8>
    e1cc:	e2874018 	add	r4, r7, #24
    e1d0:	e1a00004 	mov	r0, r4
    e1d4:	eb0016f8 	bl	13dbc <CPtrList::GetFirst()>
    e1d8:	e2509000 	subs	r9, r0, #0
    e1dc:	0a000036 	beq	e2bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
    e1e0:	e3048d43 	movw	r8, #19779	; 0x4d43
    e1e4:	e3448b54 	movt	r8, #19284	; 0x4b54
    e1e8:	e1a01009 	mov	r1, r9
    e1ec:	e1a00004 	mov	r0, r4
    e1f0:	eb00170c 	bl	13e28 <CPtrList::GetPtr(TPtrListElement*)>
    e1f4:	e3500000 	cmp	r0, #0
    e1f8:	0a00000d 	beq	e234 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xc8>
    e1fc:	e5903000 	ldr	r3, [r0]
    e200:	e1530008 	cmp	r3, r8
    e204:	1a000010 	bne	e24c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0xe0>
    e208:	e5903008 	ldr	r3, [r0, #8]
    e20c:	e1a01009 	mov	r1, r9
    e210:	e1a00004 	mov	r0, r4
    e214:	e0433006 	sub	r3, r3, r6
    e218:	e3530000 	cmp	r3, #0
    e21c:	ca000012 	bgt	e26c <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x100>
    e220:	eb0016e7 	bl	13dc4 <CPtrList::GetNext(TPtrListElement*)>
    e224:	e3500000 	cmp	r0, #0
    e228:	0a000023 	beq	e2bc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x150>
    e22c:	e1a09000 	mov	r9, r0
    e230:	eaffffec 	b	e1e8 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x7c>
    e234:	e3051a94 	movw	r1, #23188	; 0x5a94
    e238:	e3401001 	movt	r1, #1
    e23c:	e3050b50 	movw	r0, #23376	; 0x5b50
    e240:	e3400001 	movt	r0, #1
    e244:	e300219b 	movw	r2, #411	; 0x19b
    e248:	ebffe937 	bl	872c <assertion_failed>
    e24c:	e3051a94 	movw	r1, #23188	; 0x5a94
    e250:	e3401001 	movt	r1, #1
    e254:	e3050b60 	movw	r0, #23392	; 0x5b60
    e258:	e3400001 	movt	r0, #1
    e25c:	e3a02f67 	mov	r2, #412	; 0x19c
    e260:	ebffe931 	bl	872c <assertion_failed>
    e264:	eb000c8f 	bl	114a8 <EnterCritical>
    e268:	eaffffd7 	b	e1cc <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x60>
    e26c:	e1a02005 	mov	r2, r5
    e270:	eb001705 	bl	13e8c <CPtrList::InsertBefore(TPtrListElement*, void*)>
    e274:	e597301c 	ldr	r3, [r7, #28]
    e278:	e3530000 	cmp	r3, #0
    e27c:	1a00000c 	bne	e2b4 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x148>
    e280:	e1a00005 	mov	r0, r5
    e284:	e1cd40d0 	ldrd	r4, [sp]
    e288:	e1cd60d8 	ldrd	r6, [sp, #8]
    e28c:	e1cd81d0 	ldrd	r8, [sp, #16]
    e290:	e59da018 	ldr	sl, [sp, #24]
    e294:	e28dd01c 	add	sp, sp, #28
    e298:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e29c:	e3051a94 	movw	r1, #23188	; 0x5a94
    e2a0:	e3401001 	movt	r1, #1
    e2a4:	e30603f0 	movw	r0, #25584	; 0x63f0
    e2a8:	e3400001 	movt	r0, #1
    e2ac:	e300218b 	movw	r2, #395	; 0x18b
    e2b0:	ebffe91d 	bl	872c <assertion_failed>
    e2b4:	eb000ca9 	bl	11560 <LeaveCritical>
    e2b8:	eafffff0 	b	e280 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x114>
    e2bc:	e1a01009 	mov	r1, r9
    e2c0:	e1a00004 	mov	r0, r4
    e2c4:	e1a02005 	mov	r2, r5
    e2c8:	eb001733 	bl	13f9c <CPtrList::InsertAfter(TPtrListElement*, void*)>
    e2cc:	eaffffe8 	b	e274 <CTimer::StartKernelTimer(unsigned int, void (*)(unsigned int, void*, void*), void*, void*)+0x108>

0000e2d0 <CTimer::CancelKernelTimer(unsigned int)>:
    e2d0:	e16d41f0 	strd	r4, [sp, #-16]!
    e2d4:	e2514000 	subs	r4, r1, #0
    e2d8:	e58d6008 	str	r6, [sp, #8]
    e2dc:	e58de00c 	str	lr, [sp, #12]
    e2e0:	0a000021 	beq	e36c <CTimer::CancelKernelTimer(unsigned int)+0x9c>
    e2e4:	e1a05000 	mov	r5, r0
    e2e8:	e590001c 	ldr	r0, [r0, #28]
    e2ec:	e3500000 	cmp	r0, #0
    e2f0:	1a000016 	bne	e350 <CTimer::CancelKernelTimer(unsigned int)+0x80>
    e2f4:	e2856018 	add	r6, r5, #24
    e2f8:	e1a01004 	mov	r1, r4
    e2fc:	e1a00006 	mov	r0, r6
    e300:	eb0017b2 	bl	141d0 <CPtrList::Find(void*)>
    e304:	e2501000 	subs	r1, r0, #0
    e308:	0a000009 	beq	e334 <CTimer::CancelKernelTimer(unsigned int)+0x64>
    e30c:	e5942000 	ldr	r2, [r4]
    e310:	e3043d43 	movw	r3, #19779	; 0x4d43
    e314:	e3443b54 	movt	r3, #19284	; 0x4b54
    e318:	e1520003 	cmp	r2, r3
    e31c:	1a000018 	bne	e384 <CTimer::CancelKernelTimer(unsigned int)+0xb4>
    e320:	e1a00006 	mov	r0, r6
    e324:	eb00175c 	bl	1409c <CPtrList::Remove(TPtrListElement*)>
    e328:	e1a00004 	mov	r0, r4
    e32c:	e3a01014 	mov	r1, #20
    e330:	eb0004f5 	bl	f70c <operator delete(void*, unsigned int)>
    e334:	e595301c 	ldr	r3, [r5, #28]
    e338:	e3530000 	cmp	r3, #0
    e33c:	1a000005 	bne	e358 <CTimer::CancelKernelTimer(unsigned int)+0x88>
    e340:	e1cd40d0 	ldrd	r4, [sp]
    e344:	e59d6008 	ldr	r6, [sp, #8]
    e348:	e28dd00c 	add	sp, sp, #12
    e34c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e350:	eb000c54 	bl	114a8 <EnterCritical>
    e354:	eaffffe6 	b	e2f4 <CTimer::CancelKernelTimer(unsigned int)+0x24>
    e358:	e1cd40d0 	ldrd	r4, [sp]
    e35c:	e59d6008 	ldr	r6, [sp, #8]
    e360:	e59de00c 	ldr	lr, [sp, #12]
    e364:	e28dd010 	add	sp, sp, #16
    e368:	ea000c7c 	b	11560 <LeaveCritical>
    e36c:	e3051a94 	movw	r1, #23188	; 0x5a94
    e370:	e3401001 	movt	r1, #1
    e374:	e3050ac8 	movw	r0, #23240	; 0x5ac8
    e378:	e3400001 	movt	r0, #1
    e37c:	e3a02f6e 	mov	r2, #440	; 0x1b8
    e380:	ebffe8e9 	bl	872c <assertion_failed>
    e384:	e3051a94 	movw	r1, #23188	; 0x5a94
    e388:	e3401001 	movt	r1, #1
    e38c:	e3050ad4 	movw	r0, #23252	; 0x5ad4
    e390:	e3400001 	movt	r0, #1
    e394:	e30021bf 	movw	r2, #447	; 0x1bf
    e398:	ebffe8e3 	bl	872c <assertion_failed>

0000e39c <CTimer::PollKernelTimers()>:
    e39c:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    e3a0:	e1cd60f8 	strd	r6, [sp, #8]
    e3a4:	e1a06000 	mov	r6, r0
    e3a8:	e590001c 	ldr	r0, [r0, #28]
    e3ac:	e58d8010 	str	r8, [sp, #16]
    e3b0:	e58de014 	str	lr, [sp, #20]
    e3b4:	e3500000 	cmp	r0, #0
    e3b8:	1a000041 	bne	e4c4 <CTimer::PollKernelTimers()+0x128>
    e3bc:	e2867018 	add	r7, r6, #24
    e3c0:	e1a00007 	mov	r0, r7
    e3c4:	eb00167c 	bl	13dbc <CPtrList::GetFirst()>
    e3c8:	e2505000 	subs	r5, r0, #0
    e3cc:	0a000028 	beq	e474 <CTimer::PollKernelTimers()+0xd8>
    e3d0:	e3048d43 	movw	r8, #19779	; 0x4d43
    e3d4:	e3448b54 	movt	r8, #19284	; 0x4b54
    e3d8:	e1a01005 	mov	r1, r5
    e3dc:	e1a00007 	mov	r0, r7
    e3e0:	eb001690 	bl	13e28 <CPtrList::GetPtr(TPtrListElement*)>
    e3e4:	e2504000 	subs	r4, r0, #0
    e3e8:	0a000037 	beq	e4cc <CTimer::PollKernelTimers()+0x130>
    e3ec:	e5943000 	ldr	r3, [r4]
    e3f0:	e1530008 	cmp	r3, r8
    e3f4:	1a00003a 	bne	e4e4 <CTimer::PollKernelTimers()+0x148>
    e3f8:	e5962004 	ldr	r2, [r6, #4]
    e3fc:	e5943008 	ldr	r3, [r4, #8]
    e400:	e0433002 	sub	r3, r3, r2
    e404:	e3530000 	cmp	r3, #0
    e408:	ca000019 	bgt	e474 <CTimer::PollKernelTimers()+0xd8>
    e40c:	e1a01005 	mov	r1, r5
    e410:	e1a00007 	mov	r0, r7
    e414:	eb00166a 	bl	13dc4 <CPtrList::GetNext(TPtrListElement*)>
    e418:	e1a03000 	mov	r3, r0
    e41c:	e1a01005 	mov	r1, r5
    e420:	e1a00007 	mov	r0, r7
    e424:	e1a05003 	mov	r5, r3
    e428:	eb00171b 	bl	1409c <CPtrList::Remove(TPtrListElement*)>
    e42c:	e596301c 	ldr	r3, [r6, #28]
    e430:	e3530000 	cmp	r3, #0
    e434:	1a000016 	bne	e494 <CTimer::PollKernelTimers()+0xf8>
    e438:	e5943004 	ldr	r3, [r4, #4]
    e43c:	e3530000 	cmp	r3, #0
    e440:	0a000017 	beq	e4a4 <CTimer::PollKernelTimers()+0x108>
    e444:	e1a00004 	mov	r0, r4
    e448:	e594100c 	ldr	r1, [r4, #12]
    e44c:	e5942010 	ldr	r2, [r4, #16]
    e450:	e12fff33 	blx	r3
    e454:	e1a00004 	mov	r0, r4
    e458:	e3a01014 	mov	r1, #20
    e45c:	eb0004aa 	bl	f70c <operator delete(void*, unsigned int)>
    e460:	e596001c 	ldr	r0, [r6, #28]
    e464:	e3500000 	cmp	r0, #0
    e468:	1a000013 	bne	e4bc <CTimer::PollKernelTimers()+0x120>
    e46c:	e3550000 	cmp	r5, #0
    e470:	1affffd8 	bne	e3d8 <CTimer::PollKernelTimers()+0x3c>
    e474:	e596301c 	ldr	r3, [r6, #28]
    e478:	e3530000 	cmp	r3, #0
    e47c:	1a00001e 	bne	e4fc <CTimer::PollKernelTimers()+0x160>
    e480:	e1cd40d0 	ldrd	r4, [sp]
    e484:	e1cd60d8 	ldrd	r6, [sp, #8]
    e488:	e59d8010 	ldr	r8, [sp, #16]
    e48c:	e28dd014 	add	sp, sp, #20
    e490:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e494:	eb000c31 	bl	11560 <LeaveCritical>
    e498:	e5943004 	ldr	r3, [r4, #4]
    e49c:	e3530000 	cmp	r3, #0
    e4a0:	1affffe7 	bne	e444 <CTimer::PollKernelTimers()+0xa8>
    e4a4:	e3051a94 	movw	r1, #23188	; 0x5a94
    e4a8:	e3401001 	movt	r1, #1
    e4ac:	e30603f0 	movw	r0, #25584	; 0x63f0
    e4b0:	e3400001 	movt	r0, #1
    e4b4:	e30021e3 	movw	r2, #483	; 0x1e3
    e4b8:	ebffe89b 	bl	872c <assertion_failed>
    e4bc:	eb000bf9 	bl	114a8 <EnterCritical>
    e4c0:	eaffffe9 	b	e46c <CTimer::PollKernelTimers()+0xd0>
    e4c4:	eb000bf7 	bl	114a8 <EnterCritical>
    e4c8:	eaffffbb 	b	e3bc <CTimer::PollKernelTimers()+0x20>
    e4cc:	e3051a94 	movw	r1, #23188	; 0x5a94
    e4d0:	e3401001 	movt	r1, #1
    e4d4:	e3050ac8 	movw	r0, #23240	; 0x5ac8
    e4d8:	e3400001 	movt	r0, #1
    e4dc:	e3a02f75 	mov	r2, #468	; 0x1d4
    e4e0:	ebffe891 	bl	872c <assertion_failed>
    e4e4:	e3051a94 	movw	r1, #23188	; 0x5a94
    e4e8:	e3401001 	movt	r1, #1
    e4ec:	e3050ad4 	movw	r0, #23252	; 0x5ad4
    e4f0:	e3400001 	movt	r0, #1
    e4f4:	e30021d5 	movw	r2, #469	; 0x1d5
    e4f8:	ebffe88b 	bl	872c <assertion_failed>
    e4fc:	e1cd40d0 	ldrd	r4, [sp]
    e500:	e1cd60d8 	ldrd	r6, [sp, #8]
    e504:	e59d8010 	ldr	r8, [sp, #16]
    e508:	e59de014 	ldr	lr, [sp, #20]
    e50c:	e28dd018 	add	sp, sp, #24
    e510:	ea000c12 	b	11560 <LeaveCritical>

0000e514 <CTimer::InterruptHandler()>:
    e514:	e16d41f0 	strd	r4, [sp, #-16]!
    e518:	e1a04000 	mov	r4, r0
    e51c:	e58d6008 	str	r6, [sp, #8]
    e520:	e58de00c 	str	lr, [sp, #12]
    e524:	ec5ecf2e 	mrrc	15, 2, ip, lr, cr14
    e528:	e3a02000 	mov	r2, #0
    e52c:	e1a0300e 	mov	r3, lr
    e530:	e182200c 	orr	r2, r2, ip
    e534:	e3020710 	movw	r0, #10000	; 0x2710
    e538:	e0922000 	adds	r2, r2, r0
    e53c:	e3a01000 	mov	r1, #0
    e540:	e0a33001 	adc	r3, r3, r1
    e544:	e1a00002 	mov	r0, r2
    e548:	e3a01000 	mov	r1, #0
    e54c:	e1a02003 	mov	r2, r3
    e550:	e3a03000 	mov	r3, #0
    e554:	ec420f2e 	mcrr	15, 2, r0, r2, cr14
    e558:	e5940010 	ldr	r0, [r4, #16]
    e55c:	e3500000 	cmp	r0, #0
    e560:	1a00001b 	bne	e5d4 <CTimer::InterruptHandler()+0xc0>
    e564:	e5942004 	ldr	r2, [r4, #4]
    e568:	e308351f 	movw	r3, #34079	; 0x851f
    e56c:	e34531eb 	movt	r3, #20971	; 0x51eb
    e570:	e3a01064 	mov	r1, #100	; 0x64
    e574:	e2822001 	add	r2, r2, #1
    e578:	e0830293 	umull	r0, r3, r3, r2
    e57c:	e5842004 	str	r2, [r4, #4]
    e580:	e1a032a3 	lsr	r3, r3, #5
    e584:	e0632391 	mls	r3, r1, r3, r2
    e588:	e3530000 	cmp	r3, #0
    e58c:	0a00001c 	beq	e604 <CTimer::InterruptHandler()+0xf0>
    e590:	e1a00004 	mov	r0, r4
    e594:	ebffff80 	bl	e39c <CTimer::PollKernelTimers()>
    e598:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    e59c:	e3530000 	cmp	r3, #0
    e5a0:	0a000007 	beq	e5c4 <CTimer::InterruptHandler()+0xb0>
    e5a4:	e284602c 	add	r6, r4, #44	; 0x2c
    e5a8:	e3a05000 	mov	r5, #0
    e5ac:	e4963004 	ldr	r3, [r6], #4
    e5b0:	e2855001 	add	r5, r5, #1
    e5b4:	e12fff33 	blx	r3
    e5b8:	e594303c 	ldr	r3, [r4, #60]	; 0x3c
    e5bc:	e1530005 	cmp	r3, r5
    e5c0:	8afffff9 	bhi	e5ac <CTimer::InterruptHandler()+0x98>
    e5c4:	e1cd40d0 	ldrd	r4, [sp]
    e5c8:	e59d6008 	ldr	r6, [sp, #8]
    e5cc:	e28dd00c 	add	sp, sp, #12
    e5d0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e5d4:	eb000bb3 	bl	114a8 <EnterCritical>
    e5d8:	e5941004 	ldr	r1, [r4, #4]
    e5dc:	e3052c29 	movw	r2, #23593	; 0x5c29
    e5e0:	e34c228f 	movt	r2, #49807	; 0xc28f
    e5e4:	e3050c28 	movw	r0, #23592	; 0x5c28
    e5e8:	e340028f 	movt	r0, #655	; 0x28f
    e5ec:	e5943010 	ldr	r3, [r4, #16]
    e5f0:	e2811001 	add	r1, r1, #1
    e5f4:	e0020192 	mul	r2, r2, r1
    e5f8:	e5841004 	str	r1, [r4, #4]
    e5fc:	e1500162 	cmp	r0, r2, ror #2
    e600:	3a000005 	bcc	e61c <CTimer::InterruptHandler()+0x108>
    e604:	e5942008 	ldr	r2, [r4, #8]
    e608:	e2822001 	add	r2, r2, #1
    e60c:	e5842008 	str	r2, [r4, #8]
    e610:	e594200c 	ldr	r2, [r4, #12]
    e614:	e2822001 	add	r2, r2, #1
    e618:	e584200c 	str	r2, [r4, #12]
    e61c:	e3530000 	cmp	r3, #0
    e620:	0affffda 	beq	e590 <CTimer::InterruptHandler()+0x7c>
    e624:	eb000bcd 	bl	11560 <LeaveCritical>
    e628:	eaffffd8 	b	e590 <CTimer::InterruptHandler()+0x7c>

0000e62c <CTimer::InterruptHandler(void*)>:
    e62c:	e3500000 	cmp	r0, #0
    e630:	0a000000 	beq	e638 <CTimer::InterruptHandler(void*)+0xc>
    e634:	eaffffb6 	b	e514 <CTimer::InterruptHandler()>
    e638:	e3051a94 	movw	r1, #23188	; 0x5a94
    e63c:	e3401001 	movt	r1, #1
    e640:	e52d4008 	str	r4, [sp, #-8]!
    e644:	e30505bc 	movw	r0, #21948	; 0x55bc
    e648:	e3400001 	movt	r0, #1
    e64c:	e58de004 	str	lr, [sp, #4]
    e650:	e300222a 	movw	r2, #554	; 0x22a
    e654:	ebffe834 	bl	872c <assertion_failed>

0000e658 <CTimer::TuneMsDelay()>:
    e658:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
    e65c:	e1a05000 	mov	r5, r0
    e660:	e3a02ffa 	mov	r2, #1000	; 0x3e8
    e664:	e5900020 	ldr	r0, [r0, #32]
    e668:	e308451f 	movw	r4, #34079	; 0x851f
    e66c:	e34541eb 	movt	r4, #20971	; 0x51eb
    e670:	e1cd60f8 	strd	r6, [sp, #8]
    e674:	e3026710 	movw	r6, #10000	; 0x2710
    e678:	e58de010 	str	lr, [sp, #16]
    e67c:	e24dd00c 	sub	sp, sp, #12
    e680:	e5957004 	ldr	r7, [r5, #4]
    e684:	e0000092 	mul	r0, r2, r0
    e688:	eb001206 	bl	12ea8 <DelayLoop>
    e68c:	e5952004 	ldr	r2, [r5, #4]
    e690:	e3041dd3 	movw	r1, #19923	; 0x4dd3
    e694:	e3411062 	movt	r1, #4194	; 0x1062
    e698:	e5953020 	ldr	r3, [r5, #32]
    e69c:	e0422007 	sub	r2, r2, r7
    e6a0:	e736f216 	udiv	r6, r6, r2
    e6a4:	e0030693 	mul	r3, r3, r6
    e6a8:	e0832394 	umull	r2, r3, r4, r3
    e6ac:	e1a032a3 	lsr	r3, r3, #5
    e6b0:	e2832f7d 	add	r2, r3, #500	; 0x1f4
    e6b4:	e5853020 	str	r3, [r5, #32]
    e6b8:	e0832291 	umull	r2, r3, r1, r2
    e6bc:	e1a03323 	lsr	r3, r3, #6
    e6c0:	e5853024 	str	r3, [r5, #36]	; 0x24
    e6c4:	e0843694 	umull	r3, r4, r4, r6
    e6c8:	ebffecec 	bl	9a80 <CLogger::Get()>
    e6cc:	e3a0c064 	mov	ip, #100	; 0x64
    e6d0:	e59f102c 	ldr	r1, [pc, #44]	; e704 <CTimer::TuneMsDelay()+0xac>
    e6d4:	e3a02003 	mov	r2, #3
    e6d8:	e1a042a4 	lsr	r4, r4, #5
    e6dc:	e3053b88 	movw	r3, #23432	; 0x5b88
    e6e0:	e3403001 	movt	r3, #1
    e6e4:	e066649c 	mls	r6, ip, r4, r6
    e6e8:	e88d0050 	stm	sp, {r4, r6}
    e6ec:	ebffec1b 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e6f0:	e28dd00c 	add	sp, sp, #12
    e6f4:	e1cd40d0 	ldrd	r4, [sp]
    e6f8:	e1cd60d8 	ldrd	r6, [sp, #8]
    e6fc:	e28dd010 	add	sp, sp, #16
    e700:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e704:	00015cb8 	.word	0x00015cb8

0000e708 <CTimer::Initialize()>:
    e708:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    e70c:	e1cd60f8 	strd	r6, [sp, #8]
    e710:	e58d8010 	str	r8, [sp, #16]
    e714:	e1a08000 	mov	r8, r0
    e718:	e5900000 	ldr	r0, [r0]
    e71c:	e58de014 	str	lr, [sp, #20]
    e720:	e24dd008 	sub	sp, sp, #8
    e724:	e3500000 	cmp	r0, #0
    e728:	0a00002f 	beq	e7ec <CTimer::Initialize()+0xe4>
    e72c:	e1a03008 	mov	r3, r8
    e730:	e3a0101e 	mov	r1, #30
    e734:	e30e262c 	movw	r2, #58924	; 0xe62c
    e738:	e3402000 	movt	r2, #0
    e73c:	eb000c05 	bl	11758 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
    e740:	ec501f0e 	mrrc	15, 0, r1, r0, cr14
    e744:	e3a06000 	mov	r6, #0
    e748:	e3022710 	movw	r2, #10000	; 0x2710
    e74c:	e1864001 	orr	r4, r6, r1
    e750:	e3a03000 	mov	r3, #0
    e754:	e0944002 	adds	r4, r4, r2
    e758:	e0a05003 	adc	r5, r0, r3
    e75c:	e1a02004 	mov	r2, r4
    e760:	e3a03000 	mov	r3, #0
    e764:	e1a04005 	mov	r4, r5
    e768:	e3a05000 	mov	r5, #0
    e76c:	ec442f2e 	mcrr	15, 2, r2, r4, cr14
    e770:	e3a03001 	mov	r3, #1
    e774:	ee0e3f32 	mcr	15, 0, r3, cr14, cr2, {1}
    e778:	e1a00008 	mov	r0, r8
    e77c:	ebffffb5 	bl	e658 <CTimer::TuneMsDelay()>
    e780:	ee1e5f10 	mrc	15, 0, r5, cr14, cr0, {0}
    e784:	e1a03006 	mov	r3, r6
    e788:	e30f2980 	movw	r2, #63872	; 0xf980
    e78c:	e3402337 	movt	r2, #823	; 0x337
    e790:	e34f3f80 	movt	r3, #65408	; 0xff80
    e794:	e5934008 	ldr	r4, [r3, #8]
    e798:	e30d3098 	movw	r3, #53400	; 0xd098
    e79c:	e340325e 	movt	r3, #606	; 0x25e
    e7a0:	e1540003 	cmp	r4, r3
    e7a4:	01550002 	cmpeq	r5, r2
    e7a8:	1a000006 	bne	e7c8 <CTimer::Initialize()+0xc0>
    e7ac:	e3a00001 	mov	r0, #1
    e7b0:	e28dd008 	add	sp, sp, #8
    e7b4:	e1cd40d0 	ldrd	r4, [sp]
    e7b8:	e1cd60d8 	ldrd	r6, [sp, #8]
    e7bc:	e59d8010 	ldr	r8, [sp, #16]
    e7c0:	e28dd014 	add	sp, sp, #20
    e7c4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e7c8:	ebffecac 	bl	9a80 <CLogger::Get()>
    e7cc:	e59f1030 	ldr	r1, [pc, #48]	; e804 <CTimer::Initialize()+0xfc>
    e7d0:	e1a02006 	mov	r2, r6
    e7d4:	e3053ba0 	movw	r3, #23456	; 0x5ba0
    e7d8:	e3403001 	movt	r3, #1
    e7dc:	e58d5000 	str	r5, [sp]
    e7e0:	e58d4004 	str	r4, [sp, #4]
    e7e4:	ebffebdd 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    e7e8:	eaffffef 	b	e7ac <CTimer::Initialize()+0xa4>
    e7ec:	e3051a94 	movw	r1, #23188	; 0x5a94
    e7f0:	e3401001 	movt	r1, #1
    e7f4:	e3050ab0 	movw	r0, #23216	; 0x5ab0
    e7f8:	e3400001 	movt	r0, #1
    e7fc:	e3a02066 	mov	r2, #102	; 0x66
    e800:	ebffe7c9 	bl	872c <assertion_failed>
    e804:	00015cb8 	.word	0x00015cb8

0000e808 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))>:
    e808:	e5903028 	ldr	r3, [r0, #40]	; 0x28
    e80c:	e52d4008 	str	r4, [sp, #-8]!
    e810:	e58de004 	str	lr, [sp, #4]
    e814:	e3530000 	cmp	r3, #0
    e818:	1a000005 	bne	e834 <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x2c>
    e81c:	e3510000 	cmp	r1, #0
    e820:	e5801028 	str	r1, [r0, #40]	; 0x28
    e824:	0a000008 	beq	e84c <CTimer::RegisterUpdateTimeHandler(bool (*)(unsigned int, unsigned int))+0x44>
    e828:	e59d4000 	ldr	r4, [sp]
    e82c:	e28dd004 	add	sp, sp, #4
    e830:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e834:	e3051a94 	movw	r1, #23188	; 0x5a94
    e838:	e3401001 	movt	r1, #1
    e83c:	e3050bdc 	movw	r0, #23516	; 0x5bdc
    e840:	e3400001 	movt	r0, #1
    e844:	e3a02d09 	mov	r2, #576	; 0x240
    e848:	ebffe7b7 	bl	872c <assertion_failed>
    e84c:	e3051a94 	movw	r1, #23188	; 0x5a94
    e850:	e3401001 	movt	r1, #1
    e854:	e3050bf8 	movw	r0, #23544	; 0x5bf8
    e858:	e3400001 	movt	r0, #1
    e85c:	e3002242 	movw	r2, #578	; 0x242
    e860:	ebffe7b1 	bl	872c <assertion_failed>

0000e864 <CTimer::RegisterPeriodicHandler(void (*)())>:
    e864:	e3510000 	cmp	r1, #0
    e868:	e52d4008 	str	r4, [sp, #-8]!
    e86c:	e58de004 	str	lr, [sp, #4]
    e870:	0a00000c 	beq	e8a8 <CTimer::RegisterPeriodicHandler(void (*)())+0x44>
    e874:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    e878:	e3530003 	cmp	r3, #3
    e87c:	8a00000f 	bhi	e8c0 <CTimer::RegisterPeriodicHandler(void (*)())+0x5c>
    e880:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    e884:	e0803103 	add	r3, r0, r3, lsl #2
    e888:	e583102c 	str	r1, [r3, #44]	; 0x2c
    e88c:	f57ff04f 	dsb	sy
    e890:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
    e894:	e59d4000 	ldr	r4, [sp]
    e898:	e28dd004 	add	sp, sp, #4
    e89c:	e2833001 	add	r3, r3, #1
    e8a0:	e580303c 	str	r3, [r0, #60]	; 0x3c
    e8a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    e8a8:	e3051a94 	movw	r1, #23188	; 0x5a94
    e8ac:	e3401001 	movt	r1, #1
    e8b0:	e30603f0 	movw	r0, #25584	; 0x63f0
    e8b4:	e3400001 	movt	r0, #1
    e8b8:	e3002247 	movw	r2, #583	; 0x247
    e8bc:	ebffe79a 	bl	872c <assertion_failed>
    e8c0:	e3051a94 	movw	r1, #23188	; 0x5a94
    e8c4:	e3401001 	movt	r1, #1
    e8c8:	e3050c14 	movw	r0, #23572	; 0x5c14
    e8cc:	e3400001 	movt	r0, #1
    e8d0:	e3002249 	movw	r2, #585	; 0x249
    e8d4:	ebffe794 	bl	872c <assertion_failed>

0000e8d8 <CTimer::SimpleMsDelay(unsigned int)>:
    e8d8:	e3500000 	cmp	r0, #0
    e8dc:	0a000004 	beq	e8f4 <CTimer::SimpleMsDelay(unsigned int)+0x1c>
    e8e0:	e3a03ffa 	mov	r3, #1000	; 0x3e8
    e8e4:	e0000093 	mul	r0, r3, r0
    e8e8:	e3500000 	cmp	r0, #0
    e8ec:	0a000000 	beq	e8f4 <CTimer::SimpleMsDelay(unsigned int)+0x1c>
    e8f0:	eafffc6c 	b	daa8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>
    e8f4:	e12fff1e 	bx	lr

0000e8f8 <CTimer::SimpleusDelay(unsigned int)>:
    e8f8:	e3500000 	cmp	r0, #0
    e8fc:	0a000000 	beq	e904 <CTimer::SimpleusDelay(unsigned int)+0xc>
    e900:	eafffc68 	b	daa8 <CTimer::SimpleusDelay(unsigned int) [clone .part.0]>
    e904:	e12fff1e 	bx	lr

0000e908 <CTimer::IsLeapYear(unsigned int)>:
    e908:	e3053c29 	movw	r3, #23593	; 0x5c29
    e90c:	e34c328f 	movt	r3, #49807	; 0xc28f
    e910:	e3052c28 	movw	r2, #23592	; 0x5c28
    e914:	e340228f 	movt	r2, #655	; 0x28f
    e918:	e0030093 	mul	r3, r3, r0
    e91c:	e1520163 	cmp	r2, r3, ror #2
    e920:	2a000003 	bcs	e934 <CTimer::IsLeapYear(unsigned int)+0x2c>
    e924:	e3100003 	tst	r0, #3
    e928:	03a00001 	moveq	r0, #1
    e92c:	13a00000 	movne	r0, #0
    e930:	e12fff1e 	bx	lr
    e934:	e30d270a 	movw	r2, #55050	; 0xd70a
    e938:	e34020a3 	movt	r2, #163	; 0xa3
    e93c:	e1520263 	cmp	r2, r3, ror #4
    e940:	23a00001 	movcs	r0, #1
    e944:	33a00000 	movcc	r0, #0
    e948:	e12fff1e 	bx	lr

0000e94c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)>:
    e94c:	e3500001 	cmp	r0, #1
    e950:	0a000003 	beq	e964 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x18>
    e954:	e3053c88 	movw	r3, #23688	; 0x5c88
    e958:	e3403001 	movt	r3, #1
    e95c:	e7930100 	ldr	r0, [r3, r0, lsl #2]
    e960:	e12fff1e 	bx	lr
    e964:	e3053c29 	movw	r3, #23593	; 0x5c29
    e968:	e34c328f 	movt	r3, #49807	; 0xc28f
    e96c:	e3052c28 	movw	r2, #23592	; 0x5c28
    e970:	e340228f 	movt	r2, #655	; 0x28f
    e974:	e0030193 	mul	r3, r3, r1
    e978:	e1520163 	cmp	r2, r3, ror #2
    e97c:	2a000006 	bcs	e99c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x50>
    e980:	e3110003 	tst	r1, #3
    e984:	03a03001 	moveq	r3, #1
    e988:	13a03000 	movne	r3, #0
    e98c:	e3530000 	cmp	r3, #0
    e990:	0affffef 	beq	e954 <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x8>
    e994:	e3a0001d 	mov	r0, #29
    e998:	e12fff1e 	bx	lr
    e99c:	e30d270a 	movw	r2, #55050	; 0xd70a
    e9a0:	e34020a3 	movt	r2, #163	; 0xa3
    e9a4:	e1520263 	cmp	r2, r3, ror #4
    e9a8:	23a03001 	movcs	r3, #1
    e9ac:	33a03000 	movcc	r3, #0
    e9b0:	eafffff5 	b	e98c <CTimer::GetDaysOfMonth(unsigned int, unsigned int)+0x40>

0000e9b4 <CTimer::Get()>:
    e9b4:	e309346c 	movw	r3, #37996	; 0x946c
    e9b8:	e3403001 	movt	r3, #1
    e9bc:	e5930000 	ldr	r0, [r3]
    e9c0:	e3500000 	cmp	r0, #0
    e9c4:	112fff1e 	bxne	lr
    e9c8:	e3051a94 	movw	r1, #23188	; 0x5a94
    e9cc:	e3401001 	movt	r1, #1
    e9d0:	e52d4008 	str	r4, [sp, #-8]!
    e9d4:	e3050c48 	movw	r0, #23624	; 0x5c48
    e9d8:	e3400001 	movt	r0, #1
    e9dc:	e58de004 	str	lr, [sp, #4]
    e9e0:	e300228a 	movw	r2, #650	; 0x28a
    e9e4:	ebffe750 	bl	872c <assertion_failed>

0000e9e8 <memset>:
    e9e8:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
    e9ec:	e28db000 	add	fp, sp, #0
    e9f0:	e24dd024 	sub	sp, sp, #36	; 0x24
    e9f4:	e50b0018 	str	r0, [fp, #-24]	; 0xffffffe8
    e9f8:	e50b101c 	str	r1, [fp, #-28]	; 0xffffffe4
    e9fc:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    ea00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    ea04:	e50b3008 	str	r3, [fp, #-8]
    ea08:	e51b3008 	ldr	r3, [fp, #-8]
    ea0c:	e2033003 	and	r3, r3, #3
    ea10:	e3530000 	cmp	r3, #0
    ea14:	1a000027 	bne	eab8 <memset+0xd0>
    ea18:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    ea1c:	e353000f 	cmp	r3, #15
    ea20:	9a000024 	bls	eab8 <memset+0xd0>
    ea24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    ea28:	e1a02403 	lsl	r2, r3, #8
    ea2c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
    ea30:	e1823003 	orr	r3, r2, r3
    ea34:	e50b3010 	str	r3, [fp, #-16]
    ea38:	e51b3010 	ldr	r3, [fp, #-16]
    ea3c:	e1a03803 	lsl	r3, r3, #16
    ea40:	e51b2010 	ldr	r2, [fp, #-16]
    ea44:	e1823003 	orr	r3, r2, r3
    ea48:	e50b3010 	str	r3, [fp, #-16]
    ea4c:	e51b3008 	ldr	r3, [fp, #-8]
    ea50:	e2832004 	add	r2, r3, #4
    ea54:	e50b2008 	str	r2, [fp, #-8]
    ea58:	e51b2010 	ldr	r2, [fp, #-16]
    ea5c:	e5832000 	str	r2, [r3]
    ea60:	e51b3008 	ldr	r3, [fp, #-8]
    ea64:	e2832004 	add	r2, r3, #4
    ea68:	e50b2008 	str	r2, [fp, #-8]
    ea6c:	e51b2010 	ldr	r2, [fp, #-16]
    ea70:	e5832000 	str	r2, [r3]
    ea74:	e51b3008 	ldr	r3, [fp, #-8]
    ea78:	e2832004 	add	r2, r3, #4
    ea7c:	e50b2008 	str	r2, [fp, #-8]
    ea80:	e51b2010 	ldr	r2, [fp, #-16]
    ea84:	e5832000 	str	r2, [r3]
    ea88:	e51b3008 	ldr	r3, [fp, #-8]
    ea8c:	e2832004 	add	r2, r3, #4
    ea90:	e50b2008 	str	r2, [fp, #-8]
    ea94:	e51b2010 	ldr	r2, [fp, #-16]
    ea98:	e5832000 	str	r2, [r3]
    ea9c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    eaa0:	e2433010 	sub	r3, r3, #16
    eaa4:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
    eaa8:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    eaac:	e353000f 	cmp	r3, #15
    eab0:	9a000000 	bls	eab8 <memset+0xd0>
    eab4:	eaffffe4 	b	ea4c <memset+0x64>
    eab8:	e51b3008 	ldr	r3, [fp, #-8]
    eabc:	e50b300c 	str	r3, [fp, #-12]
    eac0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
    eac4:	e2432001 	sub	r2, r3, #1
    eac8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
    eacc:	e3530000 	cmp	r3, #0
    ead0:	13a03001 	movne	r3, #1
    ead4:	03a03000 	moveq	r3, #0
    ead8:	e6ef3073 	uxtb	r3, r3
    eadc:	e3530000 	cmp	r3, #0
    eae0:	0a000006 	beq	eb00 <memset+0x118>
    eae4:	e51b300c 	ldr	r3, [fp, #-12]
    eae8:	e2832001 	add	r2, r3, #1
    eaec:	e50b200c 	str	r2, [fp, #-12]
    eaf0:	e51b201c 	ldr	r2, [fp, #-28]	; 0xffffffe4
    eaf4:	e6af2072 	sxtb	r2, r2
    eaf8:	e5c32000 	strb	r2, [r3]
    eafc:	eaffffef 	b	eac0 <memset+0xd8>
    eb00:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
    eb04:	e1a00003 	mov	r0, r3
    eb08:	e28bd000 	add	sp, fp, #0
    eb0c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
    eb10:	e12fff1e 	bx	lr

0000eb14 <memmove>:
    eb14:	e1500001 	cmp	r0, r1
    eb18:	9a000002 	bls	eb28 <memmove+0x14>
    eb1c:	e0813002 	add	r3, r1, r2
    eb20:	e1530000 	cmp	r3, r0
    eb24:	8a000000 	bhi	eb2c <memmove+0x18>
    eb28:	ea00023e 	b	f428 <memcpy>
    eb2c:	e3520000 	cmp	r2, #0
    eb30:	e0802002 	add	r2, r0, r2
    eb34:	0a000004 	beq	eb4c <memmove+0x38>
    eb38:	e173c0d1 	ldrsb	ip, [r3, #-1]!
    eb3c:	e1510003 	cmp	r1, r3
    eb40:	e562c001 	strb	ip, [r2, #-1]!
    eb44:	1afffffb 	bne	eb38 <memmove+0x24>
    eb48:	e12fff1e 	bx	lr
    eb4c:	e12fff1e 	bx	lr

0000eb50 <memcmp>:
    eb50:	e3520000 	cmp	r2, #0
    eb54:	e242c001 	sub	ip, r2, #1
    eb58:	0a00000c 	beq	eb90 <memcmp+0x40>
    eb5c:	e080c00c 	add	ip, r0, ip
    eb60:	e2411001 	sub	r1, r1, #1
    eb64:	e2400001 	sub	r0, r0, #1
    eb68:	ea000002 	b	eb78 <memcmp+0x28>
    eb6c:	3a000009 	bcc	eb98 <memcmp+0x48>
    eb70:	e150000c 	cmp	r0, ip
    eb74:	0a000005 	beq	eb90 <memcmp+0x40>
    eb78:	e5f02001 	ldrb	r2, [r0, #1]!
    eb7c:	e5f13001 	ldrb	r3, [r1, #1]!
    eb80:	e1520003 	cmp	r2, r3
    eb84:	9afffff8 	bls	eb6c <memcmp+0x1c>
    eb88:	e3a00001 	mov	r0, #1
    eb8c:	e12fff1e 	bx	lr
    eb90:	e3a00000 	mov	r0, #0
    eb94:	e12fff1e 	bx	lr
    eb98:	e3e00000 	mvn	r0, #0
    eb9c:	e12fff1e 	bx	lr

0000eba0 <strlen>:
    eba0:	e1a03000 	mov	r3, r0
    eba4:	e0d300d1 	ldrsb	r0, [r3], #1
    eba8:	e3500000 	cmp	r0, #0
    ebac:	0a000004 	beq	ebc4 <strlen+0x24>
    ebb0:	e3a00000 	mov	r0, #0
    ebb4:	e0d320d1 	ldrsb	r2, [r3], #1
    ebb8:	e2800001 	add	r0, r0, #1
    ebbc:	e3520000 	cmp	r2, #0
    ebc0:	1afffffb 	bne	ebb4 <strlen+0x14>
    ebc4:	e12fff1e 	bx	lr

0000ebc8 <strcmp>:
    ebc8:	e1d030d0 	ldrsb	r3, [r0]
    ebcc:	e3530000 	cmp	r3, #0
    ebd0:	1a000006 	bne	ebf0 <strcmp+0x28>
    ebd4:	ea000016 	b	ec34 <strcmp+0x6c>
    ebd8:	e1520003 	cmp	r2, r3
    ebdc:	ba00000c 	blt	ec14 <strcmp+0x4c>
    ebe0:	ca00000d 	bgt	ec1c <strcmp+0x54>
    ebe4:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ebe8:	e3530000 	cmp	r3, #0
    ebec:	0a00000c 	beq	ec24 <strcmp+0x5c>
    ebf0:	e1a0c001 	mov	ip, r1
    ebf4:	e0d120d1 	ldrsb	r2, [r1], #1
    ebf8:	e3520000 	cmp	r2, #0
    ebfc:	1afffff5 	bne	ebd8 <strcmp+0x10>
    ec00:	e1530002 	cmp	r3, r2
    ec04:	ca000002 	bgt	ec14 <strcmp+0x4c>
    ec08:	b3e00000 	mvnlt	r0, #0
    ec0c:	a3a00000 	movge	r0, #0
    ec10:	e12fff1e 	bx	lr
    ec14:	e3a00001 	mov	r0, #1
    ec18:	e12fff1e 	bx	lr
    ec1c:	e3e00000 	mvn	r0, #0
    ec20:	e12fff1e 	bx	lr
    ec24:	e1dc20d1 	ldrsb	r2, [ip, #1]
    ec28:	e1530002 	cmp	r3, r2
    ec2c:	dafffff5 	ble	ec08 <strcmp+0x40>
    ec30:	eafffff7 	b	ec14 <strcmp+0x4c>
    ec34:	e1d120d0 	ldrsb	r2, [r1]
    ec38:	eafffff0 	b	ec00 <strcmp+0x38>

0000ec3c <toupper(int)>:
    ec3c:	e2403061 	sub	r3, r0, #97	; 0x61
    ec40:	e3530019 	cmp	r3, #25
    ec44:	92400020 	subls	r0, r0, #32
    ec48:	e12fff1e 	bx	lr

0000ec4c <strcasecmp>:
    ec4c:	e2402001 	sub	r2, r0, #1
    ec50:	ea000009 	b	ec7c <strcasecmp+0x30>
    ec54:	e0d130d1 	ldrsb	r3, [r1], #1
    ec58:	e243c061 	sub	ip, r3, #97	; 0x61
    ec5c:	e35c0019 	cmp	ip, #25
    ec60:	92433020 	subls	r3, r3, #32
    ec64:	9a000001 	bls	ec70 <strcasecmp+0x24>
    ec68:	e3530000 	cmp	r3, #0
    ec6c:	0a000012 	beq	ecbc <strcasecmp+0x70>
    ec70:	e1500003 	cmp	r0, r3
    ec74:	ca000012 	bgt	ecc4 <strcasecmp+0x78>
    ec78:	ba000013 	blt	eccc <strcasecmp+0x80>
    ec7c:	e1f200d1 	ldrsb	r0, [r2, #1]!
    ec80:	e2403061 	sub	r3, r0, #97	; 0x61
    ec84:	e3530019 	cmp	r3, #25
    ec88:	92400020 	subls	r0, r0, #32
    ec8c:	9afffff0 	bls	ec54 <strcasecmp+0x8>
    ec90:	e3500000 	cmp	r0, #0
    ec94:	1affffee 	bne	ec54 <strcasecmp+0x8>
    ec98:	e1d130d0 	ldrsb	r3, [r1]
    ec9c:	e2432061 	sub	r2, r3, #97	; 0x61
    eca0:	e3520019 	cmp	r2, #25
    eca4:	92433020 	subls	r3, r3, #32
    eca8:	8a000003 	bhi	ecbc <strcasecmp+0x70>
    ecac:	e1530000 	cmp	r3, r0
    ecb0:	d3a00000 	movle	r0, #0
    ecb4:	c3e00000 	mvngt	r0, #0
    ecb8:	e12fff1e 	bx	lr
    ecbc:	e1530000 	cmp	r3, r0
    ecc0:	aafffff9 	bge	ecac <strcasecmp+0x60>
    ecc4:	e3a00001 	mov	r0, #1
    ecc8:	e12fff1e 	bx	lr
    eccc:	e3e00000 	mvn	r0, #0
    ecd0:	e12fff1e 	bx	lr

0000ecd4 <strncmp>:
    ecd4:	e3520000 	cmp	r2, #0
    ecd8:	0a000015 	beq	ed34 <strncmp+0x60>
    ecdc:	e2400001 	sub	r0, r0, #1
    ece0:	e081c002 	add	ip, r1, r2
    ece4:	ea000007 	b	ed08 <strncmp+0x34>
    ece8:	e0d120d1 	ldrsb	r2, [r1], #1
    ecec:	e3520000 	cmp	r2, #0
    ecf0:	0a000008 	beq	ed18 <strncmp+0x44>
    ecf4:	e1530002 	cmp	r3, r2
    ecf8:	ca00000b 	bgt	ed2c <strncmp+0x58>
    ecfc:	ba00000e 	blt	ed3c <strncmp+0x68>
    ed00:	e151000c 	cmp	r1, ip
    ed04:	0a00000a 	beq	ed34 <strncmp+0x60>
    ed08:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ed0c:	e3530000 	cmp	r3, #0
    ed10:	1afffff4 	bne	ece8 <strncmp+0x14>
    ed14:	e1d120d0 	ldrsb	r2, [r1]
    ed18:	e1520003 	cmp	r2, r3
    ed1c:	ba000002 	blt	ed2c <strncmp+0x58>
    ed20:	c3e00000 	mvngt	r0, #0
    ed24:	d3a00000 	movle	r0, #0
    ed28:	e12fff1e 	bx	lr
    ed2c:	e3a00001 	mov	r0, #1
    ed30:	e12fff1e 	bx	lr
    ed34:	e3a00000 	mov	r0, #0
    ed38:	e12fff1e 	bx	lr
    ed3c:	e3e00000 	mvn	r0, #0
    ed40:	e12fff1e 	bx	lr

0000ed44 <strncasecmp>:
    ed44:	e3520000 	cmp	r2, #0
    ed48:	0a00001e 	beq	edc8 <strncasecmp+0x84>
    ed4c:	e240c001 	sub	ip, r0, #1
    ed50:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    ed54:	e2430061 	sub	r0, r3, #97	; 0x61
    ed58:	e3500019 	cmp	r0, #25
    ed5c:	92433020 	subls	r3, r3, #32
    ed60:	8a00000e 	bhi	eda0 <strncasecmp+0x5c>
    ed64:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
    ed68:	e0d100d1 	ldrsb	r0, [r1], #1
    ed6c:	e240e061 	sub	lr, r0, #97	; 0x61
    ed70:	e35e0019 	cmp	lr, #25
    ed74:	92400020 	subls	r0, r0, #32
    ed78:	9a000014 	bls	edd0 <strncasecmp+0x8c>
    ed7c:	e3500000 	cmp	r0, #0
    ed80:	1a000012 	bne	edd0 <strncasecmp+0x8c>
    ed84:	e1530000 	cmp	r3, r0
    ed88:	ca000022 	bgt	ee18 <strncasecmp+0xd4>
    ed8c:	e1500003 	cmp	r0, r3
    ed90:	d3a02000 	movle	r2, #0
    ed94:	c3e02000 	mvngt	r2, #0
    ed98:	e1a00002 	mov	r0, r2
    ed9c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    eda0:	e3530000 	cmp	r3, #0
    eda4:	1affffee 	bne	ed64 <strncasecmp+0x20>
    eda8:	e1d100d0 	ldrsb	r0, [r1]
    edac:	e2402061 	sub	r2, r0, #97	; 0x61
    edb0:	e3520019 	cmp	r2, #25
    edb4:	92400020 	subls	r0, r0, #32
    edb8:	8a00001c 	bhi	ee30 <strncasecmp+0xec>
    edbc:	e1500003 	cmp	r0, r3
    edc0:	d3a02000 	movle	r2, #0
    edc4:	c3e02000 	mvngt	r2, #0
    edc8:	e1a00002 	mov	r0, r2
    edcc:	e12fff1e 	bx	lr
    edd0:	e1530000 	cmp	r3, r0
    edd4:	ca00000f 	bgt	ee18 <strncasecmp+0xd4>
    edd8:	ba000011 	blt	ee24 <strncasecmp+0xe0>
    eddc:	e2522001 	subs	r2, r2, #1
    ede0:	0affffec 	beq	ed98 <strncasecmp+0x54>
    ede4:	e1fc30d1 	ldrsb	r3, [ip, #1]!
    ede8:	e2430061 	sub	r0, r3, #97	; 0x61
    edec:	e3500019 	cmp	r0, #25
    edf0:	92433020 	subls	r3, r3, #32
    edf4:	9affffdb 	bls	ed68 <strncasecmp+0x24>
    edf8:	e3530000 	cmp	r3, #0
    edfc:	1affffd9 	bne	ed68 <strncasecmp+0x24>
    ee00:	e1d100d0 	ldrsb	r0, [r1]
    ee04:	e2402061 	sub	r2, r0, #97	; 0x61
    ee08:	e3520019 	cmp	r2, #25
    ee0c:	92400020 	subls	r0, r0, #32
    ee10:	9affffdd 	bls	ed8c <strncasecmp+0x48>
    ee14:	eaffffda 	b	ed84 <strncasecmp+0x40>
    ee18:	e3a02001 	mov	r2, #1
    ee1c:	e1a00002 	mov	r0, r2
    ee20:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ee24:	e3e02000 	mvn	r2, #0
    ee28:	e1a00002 	mov	r0, r2
    ee2c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    ee30:	e1530000 	cmp	r3, r0
    ee34:	c3a02001 	movgt	r2, #1
    ee38:	daffffdf 	ble	edbc <strncasecmp+0x78>
    ee3c:	eaffffe1 	b	edc8 <strncasecmp+0x84>

0000ee40 <strcpy>:
    ee40:	e1d130d0 	ldrsb	r3, [r1]
    ee44:	e1a02000 	mov	r2, r0
    ee48:	e3530000 	cmp	r3, #0
    ee4c:	0a000003 	beq	ee60 <strcpy+0x20>
    ee50:	e4c23001 	strb	r3, [r2], #1
    ee54:	e1f130d1 	ldrsb	r3, [r1, #1]!
    ee58:	e3530000 	cmp	r3, #0
    ee5c:	1afffffb 	bne	ee50 <strcpy+0x10>
    ee60:	e3a03000 	mov	r3, #0
    ee64:	e5c23000 	strb	r3, [r2]
    ee68:	e12fff1e 	bx	lr

0000ee6c <strncpy>:
    ee6c:	e3520000 	cmp	r2, #0
    ee70:	0a00000a 	beq	eea0 <strncpy+0x34>
    ee74:	e080c002 	add	ip, r0, r2
    ee78:	e2411001 	sub	r1, r1, #1
    ee7c:	e1a02000 	mov	r2, r0
    ee80:	ea000002 	b	ee90 <strncpy+0x24>
    ee84:	e4c23001 	strb	r3, [r2], #1
    ee88:	e152000c 	cmp	r2, ip
    ee8c:	0a000004 	beq	eea4 <strncpy+0x38>
    ee90:	e1f130d1 	ldrsb	r3, [r1, #1]!
    ee94:	e3530000 	cmp	r3, #0
    ee98:	1afffff9 	bne	ee84 <strncpy+0x18>
    ee9c:	e5c23000 	strb	r3, [r2]
    eea0:	e12fff1e 	bx	lr
    eea4:	e12fff1e 	bx	lr

0000eea8 <strcat>:
    eea8:	e1d030d0 	ldrsb	r3, [r0]
    eeac:	e3530000 	cmp	r3, #0
    eeb0:	e1a03000 	mov	r3, r0
    eeb4:	0a000002 	beq	eec4 <strcat+0x1c>
    eeb8:	e1f320d1 	ldrsb	r2, [r3, #1]!
    eebc:	e3520000 	cmp	r2, #0
    eec0:	1afffffc 	bne	eeb8 <strcat+0x10>
    eec4:	e1d120d0 	ldrsb	r2, [r1]
    eec8:	e3520000 	cmp	r2, #0
    eecc:	0a000003 	beq	eee0 <strcat+0x38>
    eed0:	e4c32001 	strb	r2, [r3], #1
    eed4:	e1f120d1 	ldrsb	r2, [r1, #1]!
    eed8:	e3520000 	cmp	r2, #0
    eedc:	1afffffb 	bne	eed0 <strcat+0x28>
    eee0:	e3a02000 	mov	r2, #0
    eee4:	e5c32000 	strb	r2, [r3]
    eee8:	e12fff1e 	bx	lr

0000eeec <strchr>:
    eeec:	e1d030d0 	ldrsb	r3, [r0]
    eef0:	e3530000 	cmp	r3, #0
    eef4:	1a000003 	bne	ef08 <strchr+0x1c>
    eef8:	ea000005 	b	ef14 <strchr+0x28>
    eefc:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ef00:	e3530000 	cmp	r3, #0
    ef04:	0a000002 	beq	ef14 <strchr+0x28>
    ef08:	e1530001 	cmp	r3, r1
    ef0c:	1afffffa 	bne	eefc <strchr+0x10>
    ef10:	e12fff1e 	bx	lr
    ef14:	e1a00003 	mov	r0, r3
    ef18:	e12fff1e 	bx	lr

0000ef1c <strstr>:
    ef1c:	e1d030d0 	ldrsb	r3, [r0]
    ef20:	e3530000 	cmp	r3, #0
    ef24:	1a000003 	bne	ef38 <strstr+0x1c>
    ef28:	e1d130d0 	ldrsb	r3, [r1]
    ef2c:	e3530000 	cmp	r3, #0
    ef30:	13a00000 	movne	r0, #0
    ef34:	e12fff1e 	bx	lr
    ef38:	e52d4008 	str	r4, [sp, #-8]!
    ef3c:	e1d140d0 	ldrsb	r4, [r1]
    ef40:	e58de004 	str	lr, [sp, #4]
    ef44:	e3540000 	cmp	r4, #0
    ef48:	0a00000d 	beq	ef84 <strstr+0x68>
    ef4c:	e2402001 	sub	r2, r0, #1
    ef50:	e1a0e001 	mov	lr, r1
    ef54:	e1a03004 	mov	r3, r4
    ef58:	ea000002 	b	ef68 <strstr+0x4c>
    ef5c:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    ef60:	e3530000 	cmp	r3, #0
    ef64:	0a000006 	beq	ef84 <strstr+0x68>
    ef68:	e1f2c0d1 	ldrsb	ip, [r2, #1]!
    ef6c:	e15c0003 	cmp	ip, r3
    ef70:	0afffff9 	beq	ef5c <strstr+0x40>
    ef74:	e1f030d1 	ldrsb	r3, [r0, #1]!
    ef78:	e3530000 	cmp	r3, #0
    ef7c:	1afffff0 	bne	ef44 <strstr+0x28>
    ef80:	e1a00003 	mov	r0, r3
    ef84:	e59d4000 	ldr	r4, [sp]
    ef88:	e28dd004 	add	sp, sp, #4
    ef8c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ef90 <strtok_r>:
    ef90:	e3500000 	cmp	r0, #0
    ef94:	0a000029 	beq	f040 <strtok_r+0xb0>
    ef98:	e1d0c0d0 	ldrsb	ip, [r0]
    ef9c:	e35c0000 	cmp	ip, #0
    efa0:	0a00002c 	beq	f058 <strtok_r+0xc8>
    efa4:	e16d40fc 	strd	r4, [sp, #-12]!
    efa8:	e1d140d0 	ldrsb	r4, [r1]
    efac:	e58de008 	str	lr, [sp, #8]
    efb0:	e3540000 	cmp	r4, #0
    efb4:	0a00000a 	beq	efe4 <strtok_r+0x54>
    efb8:	e1a0e001 	mov	lr, r1
    efbc:	e1a03004 	mov	r3, r4
    efc0:	ea000002 	b	efd0 <strtok_r+0x40>
    efc4:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    efc8:	e3530000 	cmp	r3, #0
    efcc:	0a000004 	beq	efe4 <strtok_r+0x54>
    efd0:	e153000c 	cmp	r3, ip
    efd4:	1afffffa 	bne	efc4 <strtok_r+0x34>
    efd8:	e3540000 	cmp	r4, #0
    efdc:	e1f0c0d1 	ldrsb	ip, [r0, #1]!
    efe0:	1afffff4 	bne	efb8 <strtok_r+0x28>
    efe4:	e35c0000 	cmp	ip, #0
    efe8:	11a05000 	movne	r5, r0
    efec:	0a00001d 	beq	f068 <strtok_r+0xd8>
    eff0:	e3540000 	cmp	r4, #0
    eff4:	0a00000d 	beq	f030 <strtok_r+0xa0>
    eff8:	e1a03004 	mov	r3, r4
    effc:	e1a0e001 	mov	lr, r1
    f000:	ea000002 	b	f010 <strtok_r+0x80>
    f004:	e1fe30d1 	ldrsb	r3, [lr, #1]!
    f008:	e3530000 	cmp	r3, #0
    f00c:	0a000007 	beq	f030 <strtok_r+0xa0>
    f010:	e153000c 	cmp	r3, ip
    f014:	1afffffa 	bne	f004 <strtok_r+0x74>
    f018:	e3a03000 	mov	r3, #0
    f01c:	e4c53001 	strb	r3, [r5], #1
    f020:	e5825000 	str	r5, [r2]
    f024:	e1cd40d0 	ldrd	r4, [sp]
    f028:	e28dd008 	add	sp, sp, #8
    f02c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f030:	e1f5c0d1 	ldrsb	ip, [r5, #1]!
    f034:	e35c0000 	cmp	ip, #0
    f038:	1affffec 	bne	eff0 <strtok_r+0x60>
    f03c:	eafffff7 	b	f020 <strtok_r+0x90>
    f040:	e5920000 	ldr	r0, [r2]
    f044:	e3500000 	cmp	r0, #0
    f048:	012fff1e 	bxeq	lr
    f04c:	e1d0c0d0 	ldrsb	ip, [r0]
    f050:	e35c0000 	cmp	ip, #0
    f054:	1affffd2 	bne	efa4 <strtok_r+0x14>
    f058:	e3a03000 	mov	r3, #0
    f05c:	e1a00003 	mov	r0, r3
    f060:	e5823000 	str	r3, [r2]
    f064:	e12fff1e 	bx	lr
    f068:	e3a03000 	mov	r3, #0
    f06c:	e1cd40d0 	ldrd	r4, [sp]
    f070:	e28dd008 	add	sp, sp, #8
    f074:	e1a00003 	mov	r0, r3
    f078:	e5823000 	str	r3, [r2]
    f07c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f080 <strtoul>:
    f080:	e3510000 	cmp	r1, #0
    f084:	e2423002 	sub	r3, r2, #2
    f088:	e1a0c000 	mov	ip, r0
    f08c:	15810000 	strne	r0, [r1]
    f090:	e3520000 	cmp	r2, #0
    f094:	13530022 	cmpne	r3, #34	; 0x22
    f098:	8a000048 	bhi	f1c0 <strtoul+0x140>
    f09c:	e16d41f0 	strd	r4, [sp, #-16]!
    f0a0:	e58d6008 	str	r6, [sp, #8]
    f0a4:	e58de00c 	str	lr, [sp, #12]
    f0a8:	e1dc30d0 	ldrsb	r3, [ip]
    f0ac:	e1a0400c 	mov	r4, ip
    f0b0:	e28cc001 	add	ip, ip, #1
    f0b4:	e2430009 	sub	r0, r3, #9
    f0b8:	e3530020 	cmp	r3, #32
    f0bc:	e6ef0070 	uxtb	r0, r0
    f0c0:	0afffff8 	beq	f0a8 <strtoul+0x28>
    f0c4:	e3500004 	cmp	r0, #4
    f0c8:	9afffff6 	bls	f0a8 <strtoul+0x28>
    f0cc:	e353002b 	cmp	r3, #43	; 0x2b
    f0d0:	0a00002a 	beq	f180 <strtoul+0x100>
    f0d4:	e353002d 	cmp	r3, #45	; 0x2d
    f0d8:	01d430d1 	ldrsbeq	r3, [r4, #1]
    f0dc:	03a06001 	moveq	r6, #1
    f0e0:	01a0400c 	moveq	r4, ip
    f0e4:	13a06000 	movne	r6, #0
    f0e8:	e3530030 	cmp	r3, #48	; 0x30
    f0ec:	0a000028 	beq	f194 <strtoul+0x114>
    f0f0:	e3520000 	cmp	r2, #0
    f0f4:	03a0200a 	moveq	r2, #10
    f0f8:	e353002f 	cmp	r3, #47	; 0x2f
    f0fc:	e1a0c003 	mov	ip, r3
    f100:	da000040 	ble	f208 <strtoul+0x188>
    f104:	e3a05001 	mov	r5, #1
    f108:	e3a0e000 	mov	lr, #0
    f10c:	ea000007 	b	f130 <strtoul+0xb0>
    f110:	e150000e 	cmp	r0, lr
    f114:	e3a05000 	mov	r5, #0
    f118:	e1a0e000 	mov	lr, r0
    f11c:	3a00002d 	bcc	f1d8 <strtoul+0x158>
    f120:	e1f4c0d1 	ldrsb	ip, [r4, #1]!
    f124:	e35c002f 	cmp	ip, #47	; 0x2f
    f128:	e1a0300c 	mov	r3, ip
    f12c:	da000031 	ble	f1f8 <strtoul+0x178>
    f130:	e2433061 	sub	r3, r3, #97	; 0x61
    f134:	e3530019 	cmp	r3, #25
    f138:	924cc020 	subls	ip, ip, #32
    f13c:	e35c0040 	cmp	ip, #64	; 0x40
    f140:	c24cc007 	subgt	ip, ip, #7
    f144:	e24cc030 	sub	ip, ip, #48	; 0x30
    f148:	e15c0002 	cmp	ip, r2
    f14c:	e020c29e 	mla	r0, lr, r2, ip
    f150:	baffffee 	blt	f110 <strtoul+0x90>
    f154:	e2255001 	eor	r5, r5, #1
    f158:	e1a0000e 	mov	r0, lr
    f15c:	e3510000 	cmp	r1, #0
    f160:	e0055006 	and	r5, r5, r6
    f164:	15814000 	strne	r4, [r1]
    f168:	e3550000 	cmp	r5, #0
    f16c:	12600000 	rsbne	r0, r0, #0
    f170:	e1cd40d0 	ldrd	r4, [sp]
    f174:	e59d6008 	ldr	r6, [sp, #8]
    f178:	e28dd00c 	add	sp, sp, #12
    f17c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f180:	e1d430d1 	ldrsb	r3, [r4, #1]
    f184:	e3a06000 	mov	r6, #0
    f188:	e1a0400c 	mov	r4, ip
    f18c:	e3530030 	cmp	r3, #48	; 0x30
    f190:	1affffd6 	bne	f0f0 <strtoul+0x70>
    f194:	e1d430d1 	ldrsb	r3, [r4, #1]
    f198:	e284c001 	add	ip, r4, #1
    f19c:	e3c30020 	bic	r0, r3, #32
    f1a0:	e3500058 	cmp	r0, #88	; 0x58
    f1a4:	1a000007 	bne	f1c8 <strtoul+0x148>
    f1a8:	e3d23010 	bics	r3, r2, #16
    f1ac:	1a000013 	bne	f200 <strtoul+0x180>
    f1b0:	e1d430d2 	ldrsb	r3, [r4, #2]
    f1b4:	e3a02010 	mov	r2, #16
    f1b8:	e2844002 	add	r4, r4, #2
    f1bc:	eaffffcd 	b	f0f8 <strtoul+0x78>
    f1c0:	e3a00000 	mov	r0, #0
    f1c4:	e12fff1e 	bx	lr
    f1c8:	e3520000 	cmp	r2, #0
    f1cc:	e1a0400c 	mov	r4, ip
    f1d0:	03a02008 	moveq	r2, #8
    f1d4:	eaffffc7 	b	f0f8 <strtoul+0x78>
    f1d8:	e1510005 	cmp	r1, r5
    f1dc:	e3e00000 	mvn	r0, #0
    f1e0:	0affffe2 	beq	f170 <strtoul+0xf0>
    f1e4:	e5814000 	str	r4, [r1]
    f1e8:	e1cd40d0 	ldrd	r4, [sp]
    f1ec:	e59d6008 	ldr	r6, [sp, #8]
    f1f0:	e28dd00c 	add	sp, sp, #12
    f1f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f1f8:	e3a05001 	mov	r5, #1
    f1fc:	eaffffd6 	b	f15c <strtoul+0xdc>
    f200:	e3a00000 	mov	r0, #0
    f204:	eaffffd9 	b	f170 <strtoul+0xf0>
    f208:	e3510000 	cmp	r1, #0
    f20c:	0afffffb 	beq	f200 <strtoul+0x180>
    f210:	e3a00000 	mov	r0, #0
    f214:	eafffff2 	b	f1e4 <strtoul+0x164>

0000f218 <strtoull>:
    f218:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
    f21c:	e2423002 	sub	r3, r2, #2
    f220:	e1cd60f8 	strd	r6, [sp, #8]
    f224:	e58de01c 	str	lr, [sp, #28]
    f228:	e251e000 	subs	lr, r1, #0
    f22c:	e1cd81f0 	strd	r8, [sp, #16]
    f230:	e58da018 	str	sl, [sp, #24]
    f234:	e24dd008 	sub	sp, sp, #8
    f238:	158e0000 	strne	r0, [lr]
    f23c:	e3520000 	cmp	r2, #0
    f240:	13530022 	cmpne	r3, #34	; 0x22
    f244:	8a00005b 	bhi	f3b8 <strtoull+0x1a0>
    f248:	e1d090d0 	ldrsb	r9, [r0]
    f24c:	e1a03000 	mov	r3, r0
    f250:	e2800001 	add	r0, r0, #1
    f254:	e2491009 	sub	r1, r9, #9
    f258:	e3590020 	cmp	r9, #32
    f25c:	e6ef1071 	uxtb	r1, r1
    f260:	0afffff8 	beq	f248 <strtoull+0x30>
    f264:	e3510004 	cmp	r1, #4
    f268:	9afffff6 	bls	f248 <strtoull+0x30>
    f26c:	e359002b 	cmp	r9, #43	; 0x2b
    f270:	0a000014 	beq	f2c8 <strtoull+0xb0>
    f274:	e359002d 	cmp	r9, #45	; 0x2d
    f278:	13a01000 	movne	r1, #0
    f27c:	158d1004 	strne	r1, [sp, #4]
    f280:	1a000014 	bne	f2d8 <strtoull+0xc0>
    f284:	e1d390d1 	ldrsb	r9, [r3, #1]
    f288:	e3a03001 	mov	r3, #1
    f28c:	e58d3004 	str	r3, [sp, #4]
    f290:	e1a03000 	mov	r3, r0
    f294:	e3590030 	cmp	r9, #48	; 0x30
    f298:	1a000010 	bne	f2e0 <strtoull+0xc8>
    f29c:	e1d390d1 	ldrsb	r9, [r3, #1]
    f2a0:	e2830001 	add	r0, r3, #1
    f2a4:	e3c91020 	bic	r1, r9, #32
    f2a8:	e3510058 	cmp	r1, #88	; 0x58
    f2ac:	1a000044 	bne	f3c4 <strtoull+0x1ac>
    f2b0:	e3d22010 	bics	r2, r2, #16
    f2b4:	1a00003f 	bne	f3b8 <strtoull+0x1a0>
    f2b8:	e1d390d2 	ldrsb	r9, [r3, #2]
    f2bc:	e3a02010 	mov	r2, #16
    f2c0:	e2833002 	add	r3, r3, #2
    f2c4:	ea000007 	b	f2e8 <strtoull+0xd0>
    f2c8:	e1d390d1 	ldrsb	r9, [r3, #1]
    f2cc:	e3a03000 	mov	r3, #0
    f2d0:	e58d3004 	str	r3, [sp, #4]
    f2d4:	e1a03000 	mov	r3, r0
    f2d8:	e3590030 	cmp	r9, #48	; 0x30
    f2dc:	0affffee 	beq	f29c <strtoull+0x84>
    f2e0:	e3520000 	cmp	r2, #0
    f2e4:	03a0200a 	moveq	r2, #10
    f2e8:	e359002f 	cmp	r9, #47	; 0x2f
    f2ec:	e1a0c009 	mov	ip, r9
    f2f0:	da000043 	ble	f404 <strtoull+0x1ec>
    f2f4:	e1a07fc2 	asr	r7, r2, #31
    f2f8:	e3a04000 	mov	r4, #0
    f2fc:	e3a05000 	mov	r5, #0
    f300:	e3a08001 	mov	r8, #1
    f304:	e1a0a009 	mov	sl, r9
    f308:	ea00000b 	b	f33c <strtoull+0x124>
    f30c:	e090000c 	adds	r0, r0, ip
    f310:	e3a08000 	mov	r8, #0
    f314:	e0a11fcc 	adc	r1, r1, ip, asr #31
    f318:	e1510005 	cmp	r1, r5
    f31c:	e1a05001 	mov	r5, r1
    f320:	01500004 	cmpeq	r0, r4
    f324:	e1a04000 	mov	r4, r0
    f328:	3a000029 	bcc	f3d4 <strtoull+0x1bc>
    f32c:	e1f3c0d1 	ldrsb	ip, [r3, #1]!
    f330:	e35c002f 	cmp	ip, #47	; 0x2f
    f334:	e1a0a00c 	mov	sl, ip
    f338:	da00002b 	ble	f3ec <strtoull+0x1d4>
    f33c:	e24aa061 	sub	sl, sl, #97	; 0x61
    f340:	e0090592 	mul	r9, r2, r5
    f344:	e35a0019 	cmp	sl, #25
    f348:	e0810492 	umull	r0, r1, r2, r4
    f34c:	924cc020 	subls	ip, ip, #32
    f350:	e35c0040 	cmp	ip, #64	; 0x40
    f354:	e0299794 	mla	r9, r4, r7, r9
    f358:	c24cc007 	subgt	ip, ip, #7
    f35c:	e24cc030 	sub	ip, ip, #48	; 0x30
    f360:	e15c0002 	cmp	ip, r2
    f364:	e0891001 	add	r1, r9, r1
    f368:	baffffe7 	blt	f30c <strtoull+0xf4>
    f36c:	e35e0000 	cmp	lr, #0
    f370:	e2288001 	eor	r8, r8, #1
    f374:	e1a00004 	mov	r0, r4
    f378:	e1a01005 	mov	r1, r5
    f37c:	0a00001d 	beq	f3f8 <strtoull+0x1e0>
    f380:	e59d2004 	ldr	r2, [sp, #4]
    f384:	e58e3000 	str	r3, [lr]
    f388:	e0088002 	and	r8, r8, r2
    f38c:	e3580000 	cmp	r8, #0
    f390:	0a000001 	beq	f39c <strtoull+0x184>
    f394:	e2700000 	rsbs	r0, r0, #0
    f398:	e2e11000 	rsc	r1, r1, #0
    f39c:	e28dd008 	add	sp, sp, #8
    f3a0:	e1cd40d0 	ldrd	r4, [sp]
    f3a4:	e1cd60d8 	ldrd	r6, [sp, #8]
    f3a8:	e1cd81d0 	ldrd	r8, [sp, #16]
    f3ac:	e59da018 	ldr	sl, [sp, #24]
    f3b0:	e28dd01c 	add	sp, sp, #28
    f3b4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f3b8:	e3a00000 	mov	r0, #0
    f3bc:	e3a01000 	mov	r1, #0
    f3c0:	eafffff5 	b	f39c <strtoull+0x184>
    f3c4:	e3520000 	cmp	r2, #0
    f3c8:	e1a03000 	mov	r3, r0
    f3cc:	03a02008 	moveq	r2, #8
    f3d0:	eaffffc4 	b	f2e8 <strtoull+0xd0>
    f3d4:	e15e0008 	cmp	lr, r8
    f3d8:	e3e00000 	mvn	r0, #0
    f3dc:	e3a01000 	mov	r1, #0
    f3e0:	0affffed 	beq	f39c <strtoull+0x184>
    f3e4:	e58e3000 	str	r3, [lr]
    f3e8:	eaffffeb 	b	f39c <strtoull+0x184>
    f3ec:	e35e0000 	cmp	lr, #0
    f3f0:	e3a08001 	mov	r8, #1
    f3f4:	1affffe1 	bne	f380 <strtoull+0x168>
    f3f8:	e59d3004 	ldr	r3, [sp, #4]
    f3fc:	e0088003 	and	r8, r8, r3
    f400:	eaffffe1 	b	f38c <strtoull+0x174>
    f404:	e35e0000 	cmp	lr, #0
    f408:	e3a00000 	mov	r0, #0
    f40c:	e3a01000 	mov	r1, #0
    f410:	1afffff3 	bne	f3e4 <strtoull+0x1cc>
    f414:	eaffffe0 	b	f39c <strtoull+0x184>

0000f418 <atoi>:
    f418:	e3a0200a 	mov	r2, #10
    f41c:	e3a01000 	mov	r1, #0
    f420:	eaffff16 	b	f080 <strtoul>

0000f424 <char2int>:
    f424:	e12fff1e 	bx	lr

0000f428 <memcpy>:
    f428:	e52d0004 	push	{r0}		; (str r0, [sp, #-4]!)
    f42c:	e352007f 	cmp	r2, #127	; 0x7f
    f430:	9a00000b 	bls	f464 <memcpy+0x3c>
    f434:	e3110003 	tst	r1, #3
    f438:	1a000009 	bne	f464 <memcpy+0x3c>
    f43c:	e3100003 	tst	r0, #3
    f440:	1a000007 	bne	f464 <memcpy+0x3c>
    f444:	e92d07f0 	push	{r4, r5, r6, r7, r8, r9, sl}
    f448:	e8b107f8 	ldm	r1!, {r3, r4, r5, r6, r7, r8, r9, sl}
    f44c:	e2422020 	sub	r2, r2, #32
    f450:	e8a007f8 	stmia	r0!, {r3, r4, r5, r6, r7, r8, r9, sl}
    f454:	f5d1f040 	pld	[r1, #64]	; 0x40
    f458:	e352001f 	cmp	r2, #31
    f45c:	8afffff9 	bhi	f448 <memcpy+0x20>
    f460:	e8bd07f0 	pop	{r4, r5, r6, r7, r8, r9, sl}
    f464:	e3520000 	cmp	r2, #0
    f468:	0a000003 	beq	f47c <memcpy+0x54>
    f46c:	e4d13001 	ldrb	r3, [r1], #1
    f470:	e2522001 	subs	r2, r2, #1
    f474:	e4c03001 	strb	r3, [r0], #1
    f478:	1afffffb 	bne	f46c <memcpy+0x44>
    f47c:	e49d0004 	pop	{r0}		; (ldr r0, [sp], #4)
    f480:	e12fff1e 	bx	lr

0000f484 <ChainBootStub(void const*, unsigned int)>:
    f484:	e2811003 	add	r1, r1, #3
    f488:	e1b01121 	lsrs	r1, r1, #2
    f48c:	0a000006 	beq	f4ac <ChainBootStub(void const*, unsigned int)+0x28>
    f490:	e0801101 	add	r1, r0, r1, lsl #2
    f494:	e260c902 	rsb	ip, r0, #32768	; 0x8000
    f498:	e080300c 	add	r3, r0, ip
    f49c:	e4902004 	ldr	r2, [r0], #4
    f4a0:	e1500001 	cmp	r0, r1
    f4a4:	e5832000 	str	r2, [r3]
    f4a8:	1afffffa 	bne	f498 <ChainBootStub(void const*, unsigned int)+0x14>
    f4ac:	e3a03000 	mov	r3, #0
    f4b0:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    f4b4:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    f4b8:	f57ff04f 	dsb	sy
    f4bc:	f57ff06f 	isb	sy
    f4c0:	e3a03902 	mov	r3, #32768	; 0x8000
    f4c4:	e12fff13 	bx	r3

0000f4c8 <EnableChainBoot>:
    f4c8:	e1a0c001 	mov	ip, r1
    f4cc:	e3093470 	movw	r3, #38000	; 0x9470
    f4d0:	e3403001 	movt	r3, #1
    f4d4:	e52d4008 	str	r4, [sp, #-8]!
    f4d8:	e3a02b01 	mov	r2, #1024	; 0x400
    f4dc:	e58de004 	str	lr, [sp, #4]
    f4e0:	e1a0e000 	mov	lr, r0
    f4e4:	e30f1484 	movw	r1, #62596	; 0xf484
    f4e8:	e3401000 	movt	r1, #0
    f4ec:	e3a00b1f 	mov	r0, #31744	; 0x7c00
    f4f0:	e583e000 	str	lr, [r3]
    f4f4:	e583c004 	str	ip, [r3, #4]
    f4f8:	ebffffca 	bl	f428 <memcpy>
    f4fc:	e3a03000 	mov	r3, #0
    f500:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
    f504:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
    f508:	f57ff04f 	dsb	sy
    f50c:	f57ff06f 	isb	sy
    f510:	e59d4000 	ldr	r4, [sp]
    f514:	e28dd004 	add	sp, sp, #4
    f518:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000f51c <IsChainBootEnabled>:
    f51c:	e3093470 	movw	r3, #38000	; 0x9470
    f520:	e3403001 	movt	r3, #1
    f524:	e5930000 	ldr	r0, [r3]
    f528:	e2500000 	subs	r0, r0, #0
    f52c:	13a00001 	movne	r0, #1
    f530:	e12fff1e 	bx	lr

0000f534 <DoChainBoot>:
    f534:	e3093470 	movw	r3, #38000	; 0x9470
    f538:	e3403001 	movt	r3, #1
    f53c:	e3a02b1f 	mov	r2, #31744	; 0x7c00
    f540:	e1c300d0 	ldrd	r0, [r3]
    f544:	e12fff12 	bx	r2

0000f548 <operator new(unsigned int, int)>:
    f548:	e3510001 	cmp	r1, #1
    f54c:	e16d41f0 	strd	r4, [sp, #-16]!
    f550:	e1a04000 	mov	r4, r0
    f554:	e58d6008 	str	r6, [sp, #8]
    f558:	e58de00c 	str	lr, [sp, #12]
    f55c:	0a000008 	beq	f584 <operator new(unsigned int, int)+0x3c>
    f560:	e3510002 	cmp	r1, #2
    f564:	0a000016 	beq	f5c4 <operator new(unsigned int, int)+0x7c>
    f568:	e3510000 	cmp	r1, #0
    f56c:	13a00000 	movne	r0, #0
    f570:	0a00000d 	beq	f5ac <operator new(unsigned int, int)+0x64>
    f574:	e1cd40d0 	ldrd	r4, [sp]
    f578:	e59d6008 	ldr	r6, [sp, #8]
    f57c:	e28dd00c 	add	sp, sp, #12
    f580:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f584:	e30936b8 	movw	r3, #38584	; 0x96b8
    f588:	e3403001 	movt	r3, #1
    f58c:	e1a01000 	mov	r1, r0
    f590:	e5930000 	ldr	r0, [r3]
    f594:	e28000c8 	add	r0, r0, #200	; 0xc8
    f598:	e1cd40d0 	ldrd	r4, [sp]
    f59c:	e59d6008 	ldr	r6, [sp, #8]
    f5a0:	e59de00c 	ldr	lr, [sp, #12]
    f5a4:	e28dd010 	add	sp, sp, #16
    f5a8:	ea00008d 	b	f7e4 <CHeapAllocator::Allocate(unsigned int)>
    f5ac:	e30936b8 	movw	r3, #38584	; 0x96b8
    f5b0:	e3403001 	movt	r3, #1
    f5b4:	e5930000 	ldr	r0, [r3]
    f5b8:	e1a01004 	mov	r1, r4
    f5bc:	e280000c 	add	r0, r0, #12
    f5c0:	eafffff4 	b	f598 <operator new(unsigned int, int)+0x50>
    f5c4:	e30956b8 	movw	r5, #38584	; 0x96b8
    f5c8:	e3405001 	movt	r5, #1
    f5cc:	e1a01000 	mov	r1, r0
    f5d0:	e5950000 	ldr	r0, [r5]
    f5d4:	e28000c8 	add	r0, r0, #200	; 0xc8
    f5d8:	eb000081 	bl	f7e4 <CHeapAllocator::Allocate(unsigned int)>
    f5dc:	e3500000 	cmp	r0, #0
    f5e0:	1affffe3 	bne	f574 <operator new(unsigned int, int)+0x2c>
    f5e4:	e5950000 	ldr	r0, [r5]
    f5e8:	eafffff2 	b	f5b8 <operator new(unsigned int, int)+0x70>

0000f5ec <operator new[](unsigned int, int)>:
    f5ec:	e3510001 	cmp	r1, #1
    f5f0:	e16d41f0 	strd	r4, [sp, #-16]!
    f5f4:	e1a04000 	mov	r4, r0
    f5f8:	e58d6008 	str	r6, [sp, #8]
    f5fc:	e58de00c 	str	lr, [sp, #12]
    f600:	0a000008 	beq	f628 <operator new[](unsigned int, int)+0x3c>
    f604:	e3510002 	cmp	r1, #2
    f608:	0a000016 	beq	f668 <operator new[](unsigned int, int)+0x7c>
    f60c:	e3510000 	cmp	r1, #0
    f610:	13a00000 	movne	r0, #0
    f614:	0a00000d 	beq	f650 <operator new[](unsigned int, int)+0x64>
    f618:	e1cd40d0 	ldrd	r4, [sp]
    f61c:	e59d6008 	ldr	r6, [sp, #8]
    f620:	e28dd00c 	add	sp, sp, #12
    f624:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f628:	e30936b8 	movw	r3, #38584	; 0x96b8
    f62c:	e3403001 	movt	r3, #1
    f630:	e1a01000 	mov	r1, r0
    f634:	e5930000 	ldr	r0, [r3]
    f638:	e28000c8 	add	r0, r0, #200	; 0xc8
    f63c:	e1cd40d0 	ldrd	r4, [sp]
    f640:	e59d6008 	ldr	r6, [sp, #8]
    f644:	e59de00c 	ldr	lr, [sp, #12]
    f648:	e28dd010 	add	sp, sp, #16
    f64c:	ea000064 	b	f7e4 <CHeapAllocator::Allocate(unsigned int)>
    f650:	e30936b8 	movw	r3, #38584	; 0x96b8
    f654:	e3403001 	movt	r3, #1
    f658:	e5930000 	ldr	r0, [r3]
    f65c:	e1a01004 	mov	r1, r4
    f660:	e280000c 	add	r0, r0, #12
    f664:	eafffff4 	b	f63c <operator new[](unsigned int, int)+0x50>
    f668:	e30956b8 	movw	r5, #38584	; 0x96b8
    f66c:	e3405001 	movt	r5, #1
    f670:	e1a01000 	mov	r1, r0
    f674:	e5950000 	ldr	r0, [r5]
    f678:	e28000c8 	add	r0, r0, #200	; 0xc8
    f67c:	eb000058 	bl	f7e4 <CHeapAllocator::Allocate(unsigned int)>
    f680:	e3500000 	cmp	r0, #0
    f684:	1affffe3 	bne	f618 <operator new[](unsigned int, int)+0x2c>
    f688:	e5950000 	ldr	r0, [r5]
    f68c:	eafffff2 	b	f65c <operator new[](unsigned int, int)+0x70>

0000f690 <operator new(unsigned int, void*)>:
    f690:	e1a00001 	mov	r0, r1
    f694:	e12fff1e 	bx	lr

0000f698 <operator new[](unsigned int, void*)>:
    f698:	e1a00001 	mov	r0, r1
    f69c:	e12fff1e 	bx	lr

0000f6a0 <operator new(unsigned int)>:
    f6a0:	e30936b8 	movw	r3, #38584	; 0x96b8
    f6a4:	e3403001 	movt	r3, #1
    f6a8:	e5933000 	ldr	r3, [r3]
    f6ac:	e1a01000 	mov	r1, r0
    f6b0:	e283000c 	add	r0, r3, #12
    f6b4:	ea00004a 	b	f7e4 <CHeapAllocator::Allocate(unsigned int)>

0000f6b8 <operator new[](unsigned int)>:
    f6b8:	eafffff8 	b	f6a0 <operator new(unsigned int)>

0000f6bc <operator delete(void*)>:
    f6bc:	e30936b8 	movw	r3, #38584	; 0x96b8
    f6c0:	e3403001 	movt	r3, #1
    f6c4:	e3700107 	cmn	r0, #-1073741823	; 0xc0000001
    f6c8:	e1a01000 	mov	r1, r0
    f6cc:	e5930000 	ldr	r0, [r3]
    f6d0:	8a000001 	bhi	f6dc <operator delete(void*)+0x20>
    f6d4:	e280000c 	add	r0, r0, #12
    f6d8:	ea0000e3 	b	fa6c <CHeapAllocator::Free(void*)>
    f6dc:	e28000c8 	add	r0, r0, #200	; 0xc8
    f6e0:	ea0000e1 	b	fa6c <CHeapAllocator::Free(void*)>

0000f6e4 <operator delete[](void*)>:
    f6e4:	e30936b8 	movw	r3, #38584	; 0x96b8
    f6e8:	e3403001 	movt	r3, #1
    f6ec:	e3700107 	cmn	r0, #-1073741823	; 0xc0000001
    f6f0:	e1a01000 	mov	r1, r0
    f6f4:	e5930000 	ldr	r0, [r3]
    f6f8:	8a000001 	bhi	f704 <operator delete[](void*)+0x20>
    f6fc:	e280000c 	add	r0, r0, #12
    f700:	ea0000d9 	b	fa6c <CHeapAllocator::Free(void*)>
    f704:	e28000c8 	add	r0, r0, #200	; 0xc8
    f708:	ea0000d7 	b	fa6c <CHeapAllocator::Free(void*)>

0000f70c <operator delete(void*, unsigned int)>:
    f70c:	e30936b8 	movw	r3, #38584	; 0x96b8
    f710:	e3403001 	movt	r3, #1
    f714:	e3700107 	cmn	r0, #-1073741823	; 0xc0000001
    f718:	e1a01000 	mov	r1, r0
    f71c:	e5930000 	ldr	r0, [r3]
    f720:	8a000001 	bhi	f72c <operator delete(void*, unsigned int)+0x20>
    f724:	e280000c 	add	r0, r0, #12
    f728:	ea0000cf 	b	fa6c <CHeapAllocator::Free(void*)>
    f72c:	e28000c8 	add	r0, r0, #200	; 0xc8
    f730:	ea0000cd 	b	fa6c <CHeapAllocator::Free(void*)>

0000f734 <operator delete[](void*, unsigned int)>:
    f734:	e30936b8 	movw	r3, #38584	; 0x96b8
    f738:	e3403001 	movt	r3, #1
    f73c:	e3700107 	cmn	r0, #-1073741823	; 0xc0000001
    f740:	e1a01000 	mov	r1, r0
    f744:	e5930000 	ldr	r0, [r3]
    f748:	8a000001 	bhi	f754 <operator delete[](void*, unsigned int)+0x20>
    f74c:	e280000c 	add	r0, r0, #12
    f750:	ea0000c5 	b	fa6c <CHeapAllocator::Free(void*)>
    f754:	e28000c8 	add	r0, r0, #200	; 0xc8
    f758:	ea0000c3 	b	fa6c <CHeapAllocator::Free(void*)>

0000f75c <CHeapAllocator::CHeapAllocator(char const*)>:
    f75c:	e3a03000 	mov	r3, #0
    f760:	e3a0c001 	mov	ip, #1
    f764:	e52d4008 	str	r4, [sp, #-8]!
    f768:	e1a04000 	mov	r4, r0
    f76c:	e3a020a8 	mov	r2, #168	; 0xa8
    f770:	e58de004 	str	lr, [sp, #4]
    f774:	e2800010 	add	r0, r0, #16
    f778:	e884000a 	stm	r4, {r1, r3}
    f77c:	e1a01003 	mov	r1, r3
    f780:	e5843008 	str	r3, [r4, #8]
    f784:	e584300c 	str	r3, [r4, #12]
    f788:	e584c0b8 	str	ip, [r4, #184]	; 0xb8
    f78c:	ebfffc95 	bl	e9e8 <memset>
    f790:	e59f3028 	ldr	r3, [pc, #40]	; f7c0 <CHeapAllocator::CHeapAllocator(char const*)+0x64>
    f794:	e1a02004 	mov	r2, r4
    f798:	e283001c 	add	r0, r3, #28
    f79c:	e5b31004 	ldr	r1, [r3, #4]!
    f7a0:	e2822008 	add	r2, r2, #8
    f7a4:	e1530000 	cmp	r3, r0
    f7a8:	e5821008 	str	r1, [r2, #8]
    f7ac:	1afffffa 	bne	f79c <CHeapAllocator::CHeapAllocator(char const*)+0x40>
    f7b0:	e1a00004 	mov	r0, r4
    f7b4:	e59d4000 	ldr	r4, [sp]
    f7b8:	e28dd004 	add	sp, sp, #4
    f7bc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f7c0:	00018030 	.word	0x00018030

0000f7c4 <CHeapAllocator::~CHeapAllocator()>:
    f7c4:	e12fff1e 	bx	lr

0000f7c8 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>:
    f7c8:	e0812002 	add	r2, r1, r2
    f7cc:	e980000e 	stmib	r0, {r1, r2, r3}
    f7d0:	e12fff1e 	bx	lr

0000f7d4 <CHeapAllocator::GetFreeSpace() const>:
    f7d4:	e5903004 	ldr	r3, [r0, #4]
    f7d8:	e5900008 	ldr	r0, [r0, #8]
    f7dc:	e0400003 	sub	r0, r0, r3
    f7e0:	e12fff1e 	bx	lr

0000f7e4 <CHeapAllocator::Allocate(unsigned int)>:
    f7e4:	e5903004 	ldr	r3, [r0, #4]
    f7e8:	e3530000 	cmp	r3, #0
    f7ec:	0a00006a 	beq	f99c <CHeapAllocator::Allocate(unsigned int)+0x1b8>
    f7f0:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    f7f4:	e1a05000 	mov	r5, r0
    f7f8:	e1a04001 	mov	r4, r1
    f7fc:	e59000b8 	ldr	r0, [r0, #184]	; 0xb8
    f800:	e1cd60f8 	strd	r6, [sp, #8]
    f804:	e58d8010 	str	r8, [sp, #16]
    f808:	e58de014 	str	lr, [sp, #20]
    f80c:	e3500000 	cmp	r0, #0
    f810:	1a000048 	bne	f938 <CHeapAllocator::Allocate(unsigned int)+0x154>
    f814:	e5953010 	ldr	r3, [r5, #16]
    f818:	e3530000 	cmp	r3, #0
    f81c:	0a000021 	beq	f8a8 <CHeapAllocator::Allocate(unsigned int)+0xc4>
    f820:	e2852010 	add	r2, r5, #16
    f824:	ea000002 	b	f834 <CHeapAllocator::Allocate(unsigned int)+0x50>
    f828:	e5b23008 	ldr	r3, [r2, #8]!
    f82c:	e3530000 	cmp	r3, #0
    f830:	0a00001c 	beq	f8a8 <CHeapAllocator::Allocate(unsigned int)+0xc4>
    f834:	e1540003 	cmp	r4, r3
    f838:	8afffffa 	bhi	f828 <CHeapAllocator::Allocate(unsigned int)+0x44>
    f83c:	e5926004 	ldr	r6, [r2, #4]
    f840:	e3560000 	cmp	r6, #0
    f844:	01a04003 	moveq	r4, r3
    f848:	0a000016 	beq	f8a8 <CHeapAllocator::Allocate(unsigned int)+0xc4>
    f84c:	e5961000 	ldr	r1, [r6]
    f850:	e3043d43 	movw	r3, #19779	; 0x4d43
    f854:	e344324c 	movt	r3, #16972	; 0x424c
    f858:	e1510003 	cmp	r1, r3
    f85c:	1a000049 	bne	f988 <CHeapAllocator::Allocate(unsigned int)+0x1a4>
    f860:	e5963008 	ldr	r3, [r6, #8]
    f864:	e5823004 	str	r3, [r2, #4]
    f868:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f86c:	e3530000 	cmp	r3, #0
    f870:	1a00002e 	bne	f930 <CHeapAllocator::Allocate(unsigned int)+0x14c>
    f874:	e3a03000 	mov	r3, #0
    f878:	e316003f 	tst	r6, #63	; 0x3f
    f87c:	e2860040 	add	r0, r6, #64	; 0x40
    f880:	e5c63008 	strb	r3, [r6, #8]
    f884:	e5c63009 	strb	r3, [r6, #9]
    f888:	e5c6300a 	strb	r3, [r6, #10]
    f88c:	e5c6300b 	strb	r3, [r6, #11]
    f890:	1a000037 	bne	f974 <CHeapAllocator::Allocate(unsigned int)+0x190>
    f894:	e1cd40d0 	ldrd	r4, [sp]
    f898:	e1cd60d8 	ldrd	r6, [sp, #8]
    f89c:	e59d8010 	ldr	r8, [sp, #16]
    f8a0:	e28dd014 	add	sp, sp, #20
    f8a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    f8a8:	e5956004 	ldr	r6, [r5, #4]
    f8ac:	e284307f 	add	r3, r4, #127	; 0x7f
    f8b0:	e3c3303f 	bic	r3, r3, #63	; 0x3f
    f8b4:	e0863003 	add	r3, r6, r3
    f8b8:	e1560003 	cmp	r6, r3
    f8bc:	3a000009 	bcc	f8e8 <CHeapAllocator::Allocate(unsigned int)+0x104>
    f8c0:	e595700c 	ldr	r7, [r5, #12]
    f8c4:	e3570000 	cmp	r7, #0
    f8c8:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f8cc:	1a00001b 	bne	f940 <CHeapAllocator::Allocate(unsigned int)+0x15c>
    f8d0:	e3530000 	cmp	r3, #0
    f8d4:	03a00000 	moveq	r0, #0
    f8d8:	0affffed 	beq	f894 <CHeapAllocator::Allocate(unsigned int)+0xb0>
    f8dc:	eb00071f 	bl	11560 <LeaveCritical>
    f8e0:	e1a00007 	mov	r0, r7
    f8e4:	eaffffea 	b	f894 <CHeapAllocator::Allocate(unsigned int)+0xb0>
    f8e8:	e5952008 	ldr	r2, [r5, #8]
    f8ec:	e595700c 	ldr	r7, [r5, #12]
    f8f0:	e0422007 	sub	r2, r2, r7
    f8f4:	e1530002 	cmp	r3, r2
    f8f8:	8afffff1 	bhi	f8c4 <CHeapAllocator::Allocate(unsigned int)+0xe0>
    f8fc:	e3a00043 	mov	r0, #67	; 0x43
    f900:	e3a0104d 	mov	r1, #77	; 0x4d
    f904:	e5853004 	str	r3, [r5, #4]
    f908:	e3a0204c 	mov	r2, #76	; 0x4c
    f90c:	e3a03042 	mov	r3, #66	; 0x42
    f910:	e5c60000 	strb	r0, [r6]
    f914:	e5c61001 	strb	r1, [r6, #1]
    f918:	e5c62002 	strb	r2, [r6, #2]
    f91c:	e5c63003 	strb	r3, [r6, #3]
    f920:	e5864004 	str	r4, [r6, #4]
    f924:	e59530b8 	ldr	r3, [r5, #184]	; 0xb8
    f928:	e3530000 	cmp	r3, #0
    f92c:	0affffd0 	beq	f874 <CHeapAllocator::Allocate(unsigned int)+0x90>
    f930:	eb00070a 	bl	11560 <LeaveCritical>
    f934:	eaffffce 	b	f874 <CHeapAllocator::Allocate(unsigned int)+0x90>
    f938:	eb0006da 	bl	114a8 <EnterCritical>
    f93c:	eaffffb4 	b	f814 <CHeapAllocator::Allocate(unsigned int)+0x30>
    f940:	e3a02000 	mov	r2, #0
    f944:	e1530002 	cmp	r3, r2
    f948:	e585200c 	str	r2, [r5, #12]
    f94c:	1a000006 	bne	f96c <CHeapAllocator::Allocate(unsigned int)+0x188>
    f950:	ebffe84a 	bl	9a80 <CLogger::Get()>
    f954:	e59f3048 	ldr	r3, [pc, #72]	; f9a4 <CHeapAllocator::Allocate(unsigned int)+0x1c0>
    f958:	e3a02000 	mov	r2, #0
    f95c:	e5951000 	ldr	r1, [r5]
    f960:	ebffe77e 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
    f964:	e3a00000 	mov	r0, #0
    f968:	eaffffc9 	b	f894 <CHeapAllocator::Allocate(unsigned int)+0xb0>
    f96c:	eb0006fb 	bl	11560 <LeaveCritical>
    f970:	eafffff6 	b	f950 <CHeapAllocator::Allocate(unsigned int)+0x16c>
    f974:	e3051cc0 	movw	r1, #23744	; 0x5cc0
    f978:	e3401001 	movt	r1, #1
    f97c:	e2810050 	add	r0, r1, #80	; 0x50
    f980:	e3a0208e 	mov	r2, #142	; 0x8e
    f984:	ebffe368 	bl	872c <assertion_failed>
    f988:	e3051cc0 	movw	r1, #23744	; 0x5cc0
    f98c:	e3401001 	movt	r1, #1
    f990:	e2810014 	add	r0, r1, #20
    f994:	e3a0205e 	mov	r2, #94	; 0x5e
    f998:	ebffe363 	bl	872c <assertion_failed>
    f99c:	e3a00000 	mov	r0, #0
    f9a0:	e12fff1e 	bx	lr
    f9a4:	00015d00 	.word	0x00015d00

0000f9a8 <CHeapAllocator::ReAllocate(void*, unsigned int)>:
    f9a8:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    f9ac:	e1a04002 	mov	r4, r2
    f9b0:	e1cd60f8 	strd	r6, [sp, #8]
    f9b4:	e2517000 	subs	r7, r1, #0
    f9b8:	e58d8010 	str	r8, [sp, #16]
    f9bc:	e58de014 	str	lr, [sp, #20]
    f9c0:	0a00001d 	beq	fa3c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x94>
    f9c4:	e3520000 	cmp	r2, #0
    f9c8:	0a000019 	beq	fa34 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x8c>
    f9cc:	e1a06007 	mov	r6, r7
    f9d0:	e3043d43 	movw	r3, #19779	; 0x4d43
    f9d4:	e344324c 	movt	r3, #16972	; 0x424c
    f9d8:	e5362040 	ldr	r2, [r6, #-64]!	; 0xffffffc0
    f9dc:	e1520003 	cmp	r2, r3
    f9e0:	1a00001c 	bne	fa58 <CHeapAllocator::ReAllocate(void*, unsigned int)+0xb0>
    f9e4:	e5963004 	ldr	r3, [r6, #4]
    f9e8:	e1530004 	cmp	r3, r4
    f9ec:	21a04007 	movcs	r4, r7
    f9f0:	3a000005 	bcc	fa0c <CHeapAllocator::ReAllocate(void*, unsigned int)+0x64>
    f9f4:	e1a00004 	mov	r0, r4
    f9f8:	e1cd40d0 	ldrd	r4, [sp]
    f9fc:	e1cd60d8 	ldrd	r6, [sp, #8]
    fa00:	e59d8010 	ldr	r8, [sp, #16]
    fa04:	e28dd014 	add	sp, sp, #20
    fa08:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    fa0c:	e1a01004 	mov	r1, r4
    fa10:	e1a05000 	mov	r5, r0
    fa14:	ebffff72 	bl	f7e4 <CHeapAllocator::Allocate(unsigned int)>
    fa18:	e2504000 	subs	r4, r0, #0
    fa1c:	0afffff4 	beq	f9f4 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x4c>
    fa20:	e1a01007 	mov	r1, r7
    fa24:	e5962004 	ldr	r2, [r6, #4]
    fa28:	ebfffe7e 	bl	f428 <memcpy>
    fa2c:	e1a01007 	mov	r1, r7
    fa30:	e1a00005 	mov	r0, r5
    fa34:	eb00000c 	bl	fa6c <CHeapAllocator::Free(void*)>
    fa38:	eaffffed 	b	f9f4 <CHeapAllocator::ReAllocate(void*, unsigned int)+0x4c>
    fa3c:	e1a01002 	mov	r1, r2
    fa40:	e1cd40d0 	ldrd	r4, [sp]
    fa44:	e1cd60d8 	ldrd	r6, [sp, #8]
    fa48:	e59d8010 	ldr	r8, [sp, #16]
    fa4c:	e59de014 	ldr	lr, [sp, #20]
    fa50:	e28dd018 	add	sp, sp, #24
    fa54:	eaffff62 	b	f7e4 <CHeapAllocator::Allocate(unsigned int)>
    fa58:	e3051cc0 	movw	r1, #23744	; 0x5cc0
    fa5c:	e3401001 	movt	r1, #1
    fa60:	e2810014 	add	r0, r1, #20
    fa64:	e3a020a3 	mov	r2, #163	; 0xa3
    fa68:	ebffe32f 	bl	872c <assertion_failed>

0000fa6c <CHeapAllocator::Free(void*)>:
    fa6c:	e16d41f0 	strd	r4, [sp, #-16]!
    fa70:	e2515000 	subs	r5, r1, #0
    fa74:	e58d6008 	str	r6, [sp, #8]
    fa78:	e58de00c 	str	lr, [sp, #12]
    fa7c:	0a000016 	beq	fadc <CHeapAllocator::Free(void*)+0x70>
    fa80:	e5352040 	ldr	r2, [r5, #-64]!	; 0xffffffc0
    fa84:	e3043d43 	movw	r3, #19779	; 0x4d43
    fa88:	e344324c 	movt	r3, #16972	; 0x424c
    fa8c:	e1520003 	cmp	r2, r3
    fa90:	1a000021 	bne	fb1c <CHeapAllocator::Free(void*)+0xb0>
    fa94:	e5903010 	ldr	r3, [r0, #16]
    fa98:	e1a06000 	mov	r6, r0
    fa9c:	e3530000 	cmp	r3, #0
    faa0:	0a00000d 	beq	fadc <CHeapAllocator::Free(void*)+0x70>
    faa4:	e5952004 	ldr	r2, [r5, #4]
    faa8:	e2804010 	add	r4, r0, #16
    faac:	ea000002 	b	fabc <CHeapAllocator::Free(void*)+0x50>
    fab0:	e5b43008 	ldr	r3, [r4, #8]!
    fab4:	e3530000 	cmp	r3, #0
    fab8:	0a000007 	beq	fadc <CHeapAllocator::Free(void*)+0x70>
    fabc:	e1530002 	cmp	r3, r2
    fac0:	1afffffa 	bne	fab0 <CHeapAllocator::Free(void*)+0x44>
    fac4:	e59600b8 	ldr	r0, [r6, #184]	; 0xb8
    fac8:	e3500000 	cmp	r0, #0
    facc:	1a000006 	bne	faec <CHeapAllocator::Free(void*)+0x80>
    fad0:	e5943004 	ldr	r3, [r4, #4]
    fad4:	e5853008 	str	r3, [r5, #8]
    fad8:	e5845004 	str	r5, [r4, #4]
    fadc:	e1cd40d0 	ldrd	r4, [sp]
    fae0:	e59d6008 	ldr	r6, [sp, #8]
    fae4:	e28dd00c 	add	sp, sp, #12
    fae8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
    faec:	eb00066d 	bl	114a8 <EnterCritical>
    faf0:	e59620b8 	ldr	r2, [r6, #184]	; 0xb8
    faf4:	e5943004 	ldr	r3, [r4, #4]
    faf8:	e3520000 	cmp	r2, #0
    fafc:	e5853008 	str	r3, [r5, #8]
    fb00:	e5845004 	str	r5, [r4, #4]
    fb04:	0afffff4 	beq	fadc <CHeapAllocator::Free(void*)+0x70>
    fb08:	e1cd40d0 	ldrd	r4, [sp]
    fb0c:	e59d6008 	ldr	r6, [sp, #8]
    fb10:	e59de00c 	ldr	lr, [sp, #12]
    fb14:	e28dd010 	add	sp, sp, #16
    fb18:	ea000690 	b	11560 <LeaveCritical>
    fb1c:	e3051cc0 	movw	r1, #23744	; 0x5cc0
    fb20:	e3401001 	movt	r1, #1
    fb24:	e2810014 	add	r0, r1, #20
    fb28:	e3a020bf 	mov	r2, #191	; 0xbf
    fb2c:	ebffe2fe 	bl	872c <assertion_failed>

0000fb30 <TaskEntry>:
    fb30:	e52d4008 	str	r4, [sp, #-8]!
    fb34:	e1a04000 	mov	r4, r0
    fb38:	e3050d3c 	movw	r0, #23868	; 0x5d3c
    fb3c:	e3400001 	movt	r0, #1
    fb40:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fb44:	e5933010 	ldr	r3, [r3, #16]
    fb48:	e58de004 	str	lr, [sp, #4]
    fb4c:	e12fff33 	blx	r3
    fb50:	e1a00004 	mov	r0, r4
    fb54:	e5943030 	ldr	r3, [r4, #48]	; 0x30
    fb58:	e12fff33 	blx	r3
    fb5c:	e3a02003 	mov	r2, #3
    fb60:	e3050d54 	movw	r0, #23892	; 0x5d54
    fb64:	e3400001 	movt	r0, #1
    fb68:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fb6c:	e5c42024 	strb	r2, [r4, #36]	; 0x24
    fb70:	e5941000 	ldr	r1, [r4]
    fb74:	e5933014 	ldr	r3, [r3, #20]
    fb78:	e12fff33 	blx	r3
    fb7c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fb80:	e59d4000 	ldr	r4, [sp]
    fb84:	e59de004 	ldr	lr, [sp, #4]
    fb88:	e28dd008 	add	sp, sp, #8
    fb8c:	e5933008 	ldr	r3, [r3, #8]
    fb90:	e12fff13 	bx	r3

0000fb94 <initializeTask>:
    fb94:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
    fb98:	e1a04000 	mov	r4, r0
    fb9c:	e3a00064 	mov	r0, #100	; 0x64
    fba0:	e1cd60f8 	strd	r6, [sp, #8]
    fba4:	e1a05002 	mov	r5, r2
    fba8:	e1a06003 	mov	r6, r3
    fbac:	e58d8010 	str	r8, [sp, #16]
    fbb0:	e58de014 	str	lr, [sp, #20]
    fbb4:	e5841000 	str	r1, [r4]
    fbb8:	e5844028 	str	r4, [r4, #40]	; 0x28
    fbbc:	e59d7018 	ldr	r7, [sp, #24]
    fbc0:	eb0009fc 	bl	123b8 <malloc>
    fbc4:	e1a01000 	mov	r1, r0
    fbc8:	e3a03064 	mov	r3, #100	; 0x64
    fbcc:	e284003c 	add	r0, r4, #60	; 0x3c
    fbd0:	e3a0203c 	mov	r2, #60	; 0x3c
    fbd4:	e5841078 	str	r1, [r4, #120]	; 0x78
    fbd8:	e3a01000 	mov	r1, #0
    fbdc:	e584307c 	str	r3, [r4, #124]	; 0x7c
    fbe0:	ebfffb80 	bl	e9e8 <memset>
    fbe4:	e5941078 	ldr	r1, [r4, #120]	; 0x78
    fbe8:	e3a02000 	mov	r2, #0
    fbec:	e30f0b30 	movw	r0, #64304	; 0xfb30
    fbf0:	e3400000 	movt	r0, #0
    fbf4:	e594307c 	ldr	r3, [r4, #124]	; 0x7c
    fbf8:	e5c42024 	strb	r2, [r4, #36]	; 0x24
    fbfc:	e5846030 	str	r6, [r4, #48]	; 0x30
    fc00:	e5845034 	str	r5, [r4, #52]	; 0x34
    fc04:	e584403c 	str	r4, [r4, #60]	; 0x3c
    fc08:	e0813003 	add	r3, r1, r3
    fc0c:	e5847080 	str	r7, [r4, #128]	; 0x80
    fc10:	e1cd60d8 	ldrd	r6, [sp, #8]
    fc14:	e5843070 	str	r3, [r4, #112]	; 0x70
    fc18:	e5840074 	str	r0, [r4, #116]	; 0x74
    fc1c:	e1cd40d0 	ldrd	r4, [sp]
    fc20:	e59d8010 	ldr	r8, [sp, #16]
    fc24:	e28dd014 	add	sp, sp, #20
    fc28:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000fc2c <InitializeRegs>:
    fc2c:	e3a0203c 	mov	r2, #60	; 0x3c
    fc30:	e3a01000 	mov	r1, #0
    fc34:	e52d4008 	str	r4, [sp, #-8]!
    fc38:	e1a04000 	mov	r4, r0
    fc3c:	e0800002 	add	r0, r0, r2
    fc40:	e58de004 	str	lr, [sp, #4]
    fc44:	ebfffb67 	bl	e9e8 <memset>
    fc48:	e5943078 	ldr	r3, [r4, #120]	; 0x78
    fc4c:	e30f2b30 	movw	r2, #64304	; 0xfb30
    fc50:	e3402000 	movt	r2, #0
    fc54:	e584403c 	str	r4, [r4, #60]	; 0x3c
    fc58:	e594107c 	ldr	r1, [r4, #124]	; 0x7c
    fc5c:	e5842074 	str	r2, [r4, #116]	; 0x74
    fc60:	e0833001 	add	r3, r3, r1
    fc64:	e5843070 	str	r3, [r4, #112]	; 0x70
    fc68:	e59d4000 	ldr	r4, [sp]
    fc6c:	e28dd004 	add	sp, sp, #4
    fc70:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000fc74 <task1_run>:
    fc74:	e52d4008 	str	r4, [sp, #-8]!
    fc78:	e1a04000 	mov	r4, r0
    fc7c:	e3050d80 	movw	r0, #23936	; 0x5d80
    fc80:	e3400001 	movt	r0, #1
    fc84:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fc88:	e5933010 	ldr	r3, [r3, #16]
    fc8c:	e58de004 	str	lr, [sp, #4]
    fc90:	e12fff33 	blx	r3
    fc94:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fc98:	e1a00004 	mov	r0, r4
    fc9c:	e3a01002 	mov	r1, #2
    fca0:	e5933000 	ldr	r3, [r3]
    fca4:	e12fff33 	blx	r3
    fca8:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fcac:	e3050d98 	movw	r0, #23960	; 0x5d98
    fcb0:	e3400001 	movt	r0, #1
    fcb4:	e5933010 	ldr	r3, [r3, #16]
    fcb8:	e12fff33 	blx	r3
    fcbc:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fcc0:	e1a00004 	mov	r0, r4
    fcc4:	e3a01006 	mov	r1, #6
    fcc8:	e5933000 	ldr	r3, [r3]
    fccc:	e12fff33 	blx	r3
    fcd0:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fcd4:	e3050db0 	movw	r0, #23984	; 0x5db0
    fcd8:	e3400001 	movt	r0, #1
    fcdc:	e59d4000 	ldr	r4, [sp]
    fce0:	e59de004 	ldr	lr, [sp, #4]
    fce4:	e28dd008 	add	sp, sp, #8
    fce8:	e5933010 	ldr	r3, [r3, #16]
    fcec:	e12fff13 	bx	r3

0000fcf0 <task2_run>:
    fcf0:	e16d41f0 	strd	r4, [sp, #-16]!
    fcf4:	e1a04000 	mov	r4, r0
    fcf8:	e3050dc8 	movw	r0, #24008	; 0x5dc8
    fcfc:	e3400001 	movt	r0, #1
    fd00:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fd04:	e3055df8 	movw	r5, #24056	; 0x5df8
    fd08:	e3405001 	movt	r5, #1
    fd0c:	e5933010 	ldr	r3, [r3, #16]
    fd10:	e58d6008 	str	r6, [sp, #8]
    fd14:	e58de00c 	str	lr, [sp, #12]
    fd18:	e12fff33 	blx	r3
    fd1c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fd20:	e3a01005 	mov	r1, #5
    fd24:	e1a00004 	mov	r0, r4
    fd28:	e5933000 	ldr	r3, [r3]
    fd2c:	e12fff33 	blx	r3
    fd30:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fd34:	e3050de0 	movw	r0, #24032	; 0x5de0
    fd38:	e3400001 	movt	r0, #1
    fd3c:	e5933010 	ldr	r3, [r3, #16]
    fd40:	e12fff33 	blx	r3
    fd44:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fd48:	e1a00005 	mov	r0, r5
    fd4c:	e5933010 	ldr	r3, [r3, #16]
    fd50:	e12fff33 	blx	r3
    fd54:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fd58:	e1a00004 	mov	r0, r4
    fd5c:	e3a01003 	mov	r1, #3
    fd60:	e5933000 	ldr	r3, [r3]
    fd64:	e12fff33 	blx	r3
    fd68:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fd6c:	e1a00005 	mov	r0, r5
    fd70:	e5933010 	ldr	r3, [r3, #16]
    fd74:	e12fff33 	blx	r3
    fd78:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fd7c:	e1a00004 	mov	r0, r4
    fd80:	e3a01002 	mov	r1, #2
    fd84:	e5933000 	ldr	r3, [r3]
    fd88:	e12fff33 	blx	r3
    fd8c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fd90:	e1a00005 	mov	r0, r5
    fd94:	e5933010 	ldr	r3, [r3, #16]
    fd98:	e12fff33 	blx	r3
    fd9c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fda0:	e1a00004 	mov	r0, r4
    fda4:	e3a01003 	mov	r1, #3
    fda8:	e5933000 	ldr	r3, [r3]
    fdac:	e12fff33 	blx	r3
    fdb0:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fdb4:	e3050e18 	movw	r0, #24088	; 0x5e18
    fdb8:	e3400001 	movt	r0, #1
    fdbc:	e1cd40d0 	ldrd	r4, [sp]
    fdc0:	e59d6008 	ldr	r6, [sp, #8]
    fdc4:	e59de00c 	ldr	lr, [sp, #12]
    fdc8:	e28dd010 	add	sp, sp, #16
    fdcc:	e5933010 	ldr	r3, [r3, #16]
    fdd0:	e12fff13 	bx	r3

0000fdd4 <task3_run>:
    fdd4:	e52d4008 	str	r4, [sp, #-8]!
    fdd8:	e1a04000 	mov	r4, r0
    fddc:	e3050e34 	movw	r0, #24116	; 0x5e34
    fde0:	e3400001 	movt	r0, #1
    fde4:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fde8:	e5933010 	ldr	r3, [r3, #16]
    fdec:	e58de004 	str	lr, [sp, #4]
    fdf0:	e12fff33 	blx	r3
    fdf4:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fdf8:	e3050e50 	movw	r0, #24144	; 0x5e50
    fdfc:	e3400001 	movt	r0, #1
    fe00:	e5933010 	ldr	r3, [r3, #16]
    fe04:	e12fff33 	blx	r3
    fe08:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fe0c:	e3050e64 	movw	r0, #24164	; 0x5e64
    fe10:	e3400001 	movt	r0, #1
    fe14:	e59d4000 	ldr	r4, [sp]
    fe18:	e59de004 	ldr	lr, [sp, #4]
    fe1c:	e28dd008 	add	sp, sp, #8
    fe20:	e5933010 	ldr	r3, [r3, #16]
    fe24:	e12fff13 	bx	r3

0000fe28 <taskMatrix_run>:
    fe28:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
    fe2c:	e1cd60f8 	strd	r6, [sp, #8]
    fe30:	e1a06000 	mov	r6, r0
    fe34:	e3050e80 	movw	r0, #24192	; 0x5e80
    fe38:	e3400001 	movt	r0, #1
    fe3c:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    fe40:	e1cd81f0 	strd	r8, [sp, #16]
    fe44:	e1cda1f8 	strd	sl, [sp, #24]
    fe48:	e58de020 	str	lr, [sp, #32]
    fe4c:	e24dd08c 	sub	sp, sp, #140	; 0x8c
    fe50:	e28d9058 	add	r9, sp, #88	; 0x58
    fe54:	e28d5004 	add	r5, sp, #4
    fe58:	e5933014 	ldr	r3, [r3, #20]
    fe5c:	e28d8028 	add	r8, sp, #40	; 0x28
    fe60:	e28d4038 	add	r4, sp, #56	; 0x38
    fe64:	e12fff33 	blx	r3
    fe68:	e3052ee8 	movw	r2, #24296	; 0x5ee8
    fe6c:	e3402001 	movt	r2, #1
    fe70:	e3a03000 	mov	r3, #0
    fe74:	edd20b00 	vldr	d16, [r2]
    fe78:	e58d3004 	str	r3, [sp, #4]
    fe7c:	e1c2a3d8 	ldrd	sl, [r2, #56]	; 0x38
    fe80:	e58d3008 	str	r3, [sp, #8]
    fe84:	edd21b02 	vldr	d17, [r2, #8]
    fe88:	e58d300c 	str	r3, [sp, #12]
    fe8c:	e1c205d8 	ldrd	r0, [r2, #88]	; 0x58
    fe90:	edcd0b0a 	vstr	d16, [sp, #40]	; 0x28
    fe94:	edd20b10 	vldr	d16, [r2, #64]	; 0x40
    fe98:	e1c9a0f8 	strd	sl, [r9, #8]
    fe9c:	e1c2a1d0 	ldrd	sl, [r2, #16]
    fea0:	e58d3010 	str	r3, [sp, #16]
    fea4:	edcd1b0c 	vstr	d17, [sp, #48]	; 0x30
    fea8:	edd21b12 	vldr	d17, [r2, #72]	; 0x48
    feac:	edc90b04 	vstr	d16, [r9, #16]
    feb0:	edd20b06 	vldr	d16, [r2, #24]
    feb4:	e1cda3f8 	strd	sl, [sp, #56]	; 0x38
    feb8:	e1c2a5d0 	ldrd	sl, [r2, #80]	; 0x50
    febc:	e58d3014 	str	r3, [sp, #20]
    fec0:	e1c902f8 	strd	r0, [r9, #40]	; 0x28
    fec4:	e1c203d0 	ldrd	r0, [r2, #48]	; 0x30
    fec8:	e58d3018 	str	r3, [sp, #24]
    fecc:	edcd0b10 	vstr	d16, [sp, #64]	; 0x40
    fed0:	e1c9a2f0 	strd	sl, [r9, #32]
    fed4:	edd20b08 	vldr	d16, [r2, #32]
    fed8:	edc91b06 	vstr	d17, [r9, #24]
    fedc:	e1c2a2d8 	ldrd	sl, [r2, #40]	; 0x28
    fee0:	e1a02003 	mov	r2, r3
    fee4:	e58d301c 	str	r3, [sp, #28]
    fee8:	e58d3020 	str	r3, [sp, #32]
    feec:	edcd0b12 	vstr	d16, [sp, #72]	; 0x48
    fef0:	e1cda5f0 	strd	sl, [sp, #80]	; 0x50
    fef4:	e1a0b005 	mov	fp, r5
    fef8:	e28da064 	add	sl, sp, #100	; 0x64
    fefc:	e1cd05f8 	strd	r0, [sp, #88]	; 0x58
    ff00:	e58d3024 	str	r3, [sp, #36]	; 0x24
    ff04:	e1a00009 	mov	r0, r9
    ff08:	e1a0700b 	mov	r7, fp
    ff0c:	e1a01000 	mov	r1, r0
    ff10:	e1a03008 	mov	r3, r8
    ff14:	e493c004 	ldr	ip, [r3], #4
    ff18:	e491e00c 	ldr	lr, [r1], #12
    ff1c:	e1530004 	cmp	r3, r4
    ff20:	e0222c9e 	mla	r2, lr, ip, r2
    ff24:	1afffffa 	bne	ff14 <taskMatrix_run+0xec>
    ff28:	e2800004 	add	r0, r0, #4
    ff2c:	e4872004 	str	r2, [r7], #4
    ff30:	e150000a 	cmp	r0, sl
    ff34:	0a000001 	beq	ff40 <taskMatrix_run+0x118>
    ff38:	e5972000 	ldr	r2, [r7]
    ff3c:	eafffff2 	b	ff0c <taskMatrix_run+0xe4>
    ff40:	e2888010 	add	r8, r8, #16
    ff44:	e2844010 	add	r4, r4, #16
    ff48:	e1580009 	cmp	r8, r9
    ff4c:	0a000001 	beq	ff58 <taskMatrix_run+0x130>
    ff50:	e5bb200c 	ldr	r2, [fp, #12]!
    ff54:	eaffffea 	b	ff04 <taskMatrix_run+0xdc>
    ff58:	e5963080 	ldr	r3, [r6, #128]	; 0x80
    ff5c:	e3050e98 	movw	r0, #24216	; 0x5e98
    ff60:	e3400001 	movt	r0, #1
    ff64:	e3054eb4 	movw	r4, #24244	; 0x5eb4
    ff68:	e3404001 	movt	r4, #1
    ff6c:	e2858024 	add	r8, r5, #36	; 0x24
    ff70:	e5933014 	ldr	r3, [r3, #20]
    ff74:	e12fff33 	blx	r3
    ff78:	e596c080 	ldr	ip, [r6, #128]	; 0x80
    ff7c:	e1a00004 	mov	r0, r4
    ff80:	e1c520d4 	ldrd	r2, [r5, #4]
    ff84:	e495100c 	ldr	r1, [r5], #12
    ff88:	e59c7014 	ldr	r7, [ip, #20]
    ff8c:	e12fff37 	blx	r7
    ff90:	e1580005 	cmp	r8, r5
    ff94:	1afffff7 	bne	ff78 <taskMatrix_run+0x150>
    ff98:	e28dd08c 	add	sp, sp, #140	; 0x8c
    ff9c:	e1cd40d0 	ldrd	r4, [sp]
    ffa0:	e1cd60d8 	ldrd	r6, [sp, #8]
    ffa4:	e1cd81d0 	ldrd	r8, [sp, #16]
    ffa8:	e1cda1d8 	ldrd	sl, [sp, #24]
    ffac:	e28dd020 	add	sp, sp, #32
    ffb0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

0000ffb4 <task4_run>:
    ffb4:	e1a03000 	mov	r3, r0
    ffb8:	e3050ec0 	movw	r0, #24256	; 0x5ec0
    ffbc:	e3400001 	movt	r0, #1
    ffc0:	e5933080 	ldr	r3, [r3, #128]	; 0x80
    ffc4:	e5933010 	ldr	r3, [r3, #16]
    ffc8:	e12fff13 	bx	r3

0000ffcc <task5_run>:
    ffcc:	e52d4008 	str	r4, [sp, #-8]!
    ffd0:	e1a04000 	mov	r4, r0
    ffd4:	e3050ed4 	movw	r0, #24276	; 0x5ed4
    ffd8:	e3400001 	movt	r0, #1
    ffdc:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    ffe0:	e5933010 	ldr	r3, [r3, #16]
    ffe4:	e58de004 	str	lr, [sp, #4]
    ffe8:	e12fff33 	blx	r3
    ffec:	e5943080 	ldr	r3, [r4, #128]	; 0x80
    fff0:	e59d4000 	ldr	r4, [sp]
    fff4:	e59de004 	ldr	lr, [sp, #4]
    fff8:	e28dd008 	add	sp, sp, #8
    fffc:	e5933008 	ldr	r3, [r3, #8]
   10000:	e12fff13 	bx	r3

00010004 <InitializeScheduler()>:
   10004:	e3090478 	movw	r0, #38008	; 0x9478
   10008:	e3400001 	movt	r0, #1
   1000c:	e52d4008 	str	r4, [sp, #-8]!
   10010:	e58de004 	str	lr, [sp, #4]
   10014:	e3a0e000 	mov	lr, #0
   10018:	e3a04064 	mov	r4, #100	; 0x64
   1001c:	e1a0c000 	mov	ip, r0
   10020:	e1a03000 	mov	r3, r0
   10024:	e2801e19 	add	r1, r0, #400	; 0x190
   10028:	e1a0200e 	mov	r2, lr
   1002c:	e5804000 	str	r4, [r0]
   10030:	e580e194 	str	lr, [r0, #404]	; 0x194
   10034:	e580e198 	str	lr, [r0, #408]	; 0x198
   10038:	e5c0e19c 	strb	lr, [r0, #412]	; 0x19c
   1003c:	e5a32004 	str	r2, [r3, #4]!
   10040:	e1530001 	cmp	r3, r1
   10044:	1afffffc 	bne	1003c <InitializeScheduler()+0x38>
   10048:	e30014a8 	movw	r1, #1192	; 0x4a8
   1004c:	e3401001 	movt	r1, #1
   10050:	e59d4000 	ldr	r4, [sp]
   10054:	e30025b0 	movw	r2, #1456	; 0x5b0
   10058:	e3402001 	movt	r2, #1
   1005c:	e3003584 	movw	r3, #1412	; 0x584
   10060:	e3403001 	movt	r3, #1
   10064:	e28dd004 	add	sp, sp, #4
   10068:	e58c21a0 	str	r2, [ip, #416]	; 0x1a0
   1006c:	e58c11a8 	str	r1, [ip, #424]	; 0x1a8
   10070:	e58c31ac 	str	r3, [ip, #428]	; 0x1ac
   10074:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00010078 <getSysCallPointer()>:
   10078:	e59f0000 	ldr	r0, [pc]	; 10080 <getSysCallPointer()+0x8>
   1007c:	e12fff1e 	bx	lr
   10080:	00019618 	.word	0x00019618

00010084 <getScheduler()>:
   10084:	e59f0000 	ldr	r0, [pc]	; 1008c <getScheduler()+0x8>
   10088:	e12fff1e 	bx	lr
   1008c:	0001947c 	.word	0x0001947c

00010090 <startScheduler(TTask*, int)>:
   10090:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
   10094:	e3094478 	movw	r4, #38008	; 0x9478
   10098:	e3404001 	movt	r4, #1
   1009c:	e1cd60f8 	strd	r6, [sp, #8]
   100a0:	e59f70dc 	ldr	r7, [pc, #220]	; 10184 <startScheduler(TTask*, int)+0xf4>
   100a4:	e58d8010 	str	r8, [sp, #16]
   100a8:	e5946008 	ldr	r6, [r4, #8]
   100ac:	e58de014 	str	lr, [sp, #20]
   100b0:	e2875040 	add	r5, r7, #64	; 0x40
   100b4:	e59f10cc 	ldr	r1, [pc, #204]	; 10188 <startScheduler(TTask*, int)+0xf8>
   100b8:	e3a08064 	mov	r8, #100	; 0x64
   100bc:	e3a03002 	mov	r3, #2
   100c0:	e1a0c008 	mov	ip, r8
   100c4:	e5846194 	str	r6, [r4, #404]	; 0x194
   100c8:	e5b12004 	ldr	r2, [r1, #4]!
   100cc:	e3520000 	cmp	r2, #0
   100d0:	0a000006 	beq	100f0 <startScheduler(TTask*, int)+0x60>
   100d4:	e5d20024 	ldrb	r0, [r2, #36]	; 0x24
   100d8:	e3500000 	cmp	r0, #0
   100dc:	1a000003 	bne	100f0 <startScheduler(TTask*, int)+0x60>
   100e0:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
   100e4:	e152000c 	cmp	r2, ip
   100e8:	31a0c002 	movcc	ip, r2
   100ec:	31a08003 	movcc	r8, r3
   100f0:	e2833001 	add	r3, r3, #1
   100f4:	e3530064 	cmp	r3, #100	; 0x64
   100f8:	1afffff2 	bne	100c8 <startScheduler(TTask*, int)+0x38>
   100fc:	e3580064 	cmp	r8, #100	; 0x64
   10100:	e5963080 	ldr	r3, [r6, #128]	; 0x80
   10104:	0a00000f 	beq	10148 <startScheduler(TTask*, int)+0xb8>
   10108:	e0848108 	add	r8, r4, r8, lsl #2
   1010c:	e1a00007 	mov	r0, r7
   10110:	e5933010 	ldr	r3, [r3, #16]
   10114:	e12fff33 	blx	r3
   10118:	e5983004 	ldr	r3, [r8, #4]
   1011c:	e5942194 	ldr	r2, [r4, #404]	; 0x194
   10120:	e283103c 	add	r1, r3, #60	; 0x3c
   10124:	e5843194 	str	r3, [r4, #404]	; 0x194
   10128:	e282003c 	add	r0, r2, #60	; 0x3c
   1012c:	e5842198 	str	r2, [r4, #408]	; 0x198
   10130:	eb0001ad 	bl	107ec <TaskSwitch>
   10134:	e5963080 	ldr	r3, [r6, #128]	; 0x80
   10138:	e1a00005 	mov	r0, r5
   1013c:	e5933010 	ldr	r3, [r3, #16]
   10140:	e12fff33 	blx	r3
   10144:	eaffffda 	b	100b4 <startScheduler(TTask*, int)+0x24>
   10148:	e59f003c 	ldr	r0, [pc, #60]	; 1018c <startScheduler(TTask*, int)+0xfc>
   1014c:	e5933010 	ldr	r3, [r3, #16]
   10150:	e12fff33 	blx	r3
   10154:	e5962080 	ldr	r2, [r6, #128]	; 0x80
   10158:	e3a03001 	mov	r3, #1
   1015c:	e59f002c 	ldr	r0, [pc, #44]	; 10190 <startScheduler(TTask*, int)+0x100>
   10160:	e5c4319d 	strb	r3, [r4, #413]	; 0x19d
   10164:	e5c4319d 	strb	r3, [r4, #413]	; 0x19d
   10168:	e1cd40d0 	ldrd	r4, [sp]
   1016c:	e1cd60d8 	ldrd	r6, [sp, #8]
   10170:	e59d8010 	ldr	r8, [sp, #16]
   10174:	e5923010 	ldr	r3, [r2, #16]
   10178:	e59de014 	ldr	lr, [sp, #20]
   1017c:	e28dd018 	add	sp, sp, #24
   10180:	e12fff13 	bx	r3
   10184:	00015fb0 	.word	0x00015fb0
   10188:	00019480 	.word	0x00019480
   1018c:	00015f54 	.word	0x00015f54
   10190:	00015f8c 	.word	0x00015f8c

00010194 <schedulerRun(TTask*)>:
   10194:	e16d41f0 	strd	r4, [sp, #-16]!
   10198:	e1a05000 	mov	r5, r0
   1019c:	e3054f48 	movw	r4, #24392	; 0x5f48
   101a0:	e3404001 	movt	r4, #1
   101a4:	e5953080 	ldr	r3, [r5, #128]	; 0x80
   101a8:	e28400e8 	add	r0, r4, #232	; 0xe8
   101ac:	e5933010 	ldr	r3, [r3, #16]
   101b0:	e58d6008 	str	r6, [sp, #8]
   101b4:	e58de00c 	str	lr, [sp, #12]
   101b8:	e12fff33 	blx	r3
   101bc:	e3093478 	movw	r3, #38008	; 0x9478
   101c0:	e3403001 	movt	r3, #1
   101c4:	e5835194 	str	r5, [r3, #404]	; 0x194
   101c8:	ebffe62c 	bl	9a80 <CLogger::Get()>
   101cc:	e2843f42 	add	r3, r4, #264	; 0x108
   101d0:	e1a01004 	mov	r1, r4
   101d4:	e3a02000 	mov	r2, #0
   101d8:	ebffe560 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   101dc:	eb0000cd 	bl	10518 <kernelYield()>
   101e0:	e5953080 	ldr	r3, [r5, #128]	; 0x80
   101e4:	e2840f49 	add	r0, r4, #292	; 0x124
   101e8:	e1cd40d0 	ldrd	r4, [sp]
   101ec:	e59d6008 	ldr	r6, [sp, #8]
   101f0:	e59de00c 	ldr	lr, [sp, #12]
   101f4:	e28dd010 	add	sp, sp, #16
   101f8:	e5933010 	ldr	r3, [r3, #16]
   101fc:	e12fff13 	bx	r3

00010200 <schedulePriority()>:
   10200:	e59f1044 	ldr	r1, [pc, #68]	; 1024c <schedulePriority()+0x4c>
   10204:	e3a00064 	mov	r0, #100	; 0x64
   10208:	e3a03002 	mov	r3, #2
   1020c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10210:	e1a0e000 	mov	lr, r0
   10214:	e5b12004 	ldr	r2, [r1, #4]!
   10218:	e3520000 	cmp	r2, #0
   1021c:	0a000006 	beq	1023c <schedulePriority()+0x3c>
   10220:	e5d2c024 	ldrb	ip, [r2, #36]	; 0x24
   10224:	e35c0000 	cmp	ip, #0
   10228:	1a000003 	bne	1023c <schedulePriority()+0x3c>
   1022c:	e592202c 	ldr	r2, [r2, #44]	; 0x2c
   10230:	e152000e 	cmp	r2, lr
   10234:	31a0e002 	movcc	lr, r2
   10238:	31a00003 	movcc	r0, r3
   1023c:	e2833001 	add	r3, r3, #1
   10240:	e3530064 	cmp	r3, #100	; 0x64
   10244:	1afffff2 	bne	10214 <schedulePriority()+0x14>
   10248:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1024c:	00019480 	.word	0x00019480

00010250 <scheduleFIFO()>:
   10250:	ea000063 	b	103e4 <GetNumOfNextReadyTask()>

00010254 <getTaskNumByTaskPointer(TTask*)>:
   10254:	e3500000 	cmp	r0, #0
   10258:	0a00000d 	beq	10294 <getTaskNumByTaskPointer(TTask*)+0x40>
   1025c:	e3093478 	movw	r3, #38008	; 0x9478
   10260:	e3403001 	movt	r3, #1
   10264:	e3a00000 	mov	r0, #0
   10268:	e2833004 	add	r3, r3, #4
   1026c:	e5931190 	ldr	r1, [r3, #400]	; 0x190
   10270:	ea000002 	b	10280 <getTaskNumByTaskPointer(TTask*)+0x2c>
   10274:	e2800001 	add	r0, r0, #1
   10278:	e3500064 	cmp	r0, #100	; 0x64
   1027c:	0a000003 	beq	10290 <getTaskNumByTaskPointer(TTask*)+0x3c>
   10280:	e4932004 	ldr	r2, [r3], #4
   10284:	e1510002 	cmp	r1, r2
   10288:	1afffff9 	bne	10274 <getTaskNumByTaskPointer(TTask*)+0x20>
   1028c:	e12fff1e 	bx	lr
   10290:	e12fff1e 	bx	lr
   10294:	e3a00064 	mov	r0, #100	; 0x64
   10298:	e12fff1e 	bx	lr

0001029c <genTaskID()>:
   1029c:	e3093478 	movw	r3, #38008	; 0x9478
   102a0:	e3403001 	movt	r3, #1
   102a4:	e5930000 	ldr	r0, [r3]
   102a8:	e2802001 	add	r2, r0, #1
   102ac:	e5832000 	str	r2, [r3]
   102b0:	e12fff1e 	bx	lr

000102b4 <AddTask(TTask*)>:
   102b4:	e59f2034 	ldr	r2, [pc, #52]	; 102f0 <AddTask(TTask*)+0x3c>
   102b8:	e3a03000 	mov	r3, #0
   102bc:	ea000002 	b	102cc <AddTask(TTask*)+0x18>
   102c0:	e2833001 	add	r3, r3, #1
   102c4:	e3530064 	cmp	r3, #100	; 0x64
   102c8:	0a000007 	beq	102ec <AddTask(TTask*)+0x38>
   102cc:	e4921004 	ldr	r1, [r2], #4
   102d0:	e3510000 	cmp	r1, #0
   102d4:	1afffff9 	bne	102c0 <AddTask(TTask*)+0xc>
   102d8:	e3092478 	movw	r2, #38008	; 0x9478
   102dc:	e3402001 	movt	r2, #1
   102e0:	e0823103 	add	r3, r2, r3, lsl #2
   102e4:	e5830004 	str	r0, [r3, #4]
   102e8:	e12fff1e 	bx	lr
   102ec:	e12fff1e 	bx	lr
   102f0:	0001947c 	.word	0x0001947c

000102f4 <RemoveTaskFromQueue(TTask*)>:
   102f4:	e59f2038 	ldr	r2, [pc, #56]	; 10334 <RemoveTaskFromQueue(TTask*)+0x40>
   102f8:	e3a03000 	mov	r3, #0
   102fc:	ea000002 	b	1030c <RemoveTaskFromQueue(TTask*)+0x18>
   10300:	e2833001 	add	r3, r3, #1
   10304:	e3530064 	cmp	r3, #100	; 0x64
   10308:	0a000008 	beq	10330 <RemoveTaskFromQueue(TTask*)+0x3c>
   1030c:	e4921004 	ldr	r1, [r2], #4
   10310:	e1510000 	cmp	r1, r0
   10314:	1afffff9 	bne	10300 <RemoveTaskFromQueue(TTask*)+0xc>
   10318:	e3092478 	movw	r2, #38008	; 0x9478
   1031c:	e3402001 	movt	r2, #1
   10320:	e0823103 	add	r3, r2, r3, lsl #2
   10324:	e3a02000 	mov	r2, #0
   10328:	e5832004 	str	r2, [r3, #4]
   1032c:	e12fff1e 	bx	lr
   10330:	e12fff1e 	bx	lr
   10334:	0001947c 	.word	0x0001947c

00010338 <GetNextTask()>:
   10338:	e3091478 	movw	r1, #38008	; 0x9478
   1033c:	e3401001 	movt	r1, #1
   10340:	e5912004 	ldr	r2, [r1, #4]
   10344:	e3a00001 	mov	r0, #1
   10348:	e5913194 	ldr	r3, [r1, #404]	; 0x194
   1034c:	e1530002 	cmp	r3, r2
   10350:	1281c004 	addne	ip, r1, #4
   10354:	1a000002 	bne	10364 <GetNextTask()+0x2c>
   10358:	ea000007 	b	1037c <GetNextTask()+0x44>
   1035c:	e3500064 	cmp	r0, #100	; 0x64
   10360:	0a00001a 	beq	103d0 <GetNextTask()+0x98>
   10364:	e79c2100 	ldr	r2, [ip, r0, lsl #2]
   10368:	e2800001 	add	r0, r0, #1
   1036c:	e1530002 	cmp	r3, r2
   10370:	1afffff9 	bne	1035c <GetNextTask()+0x24>
   10374:	ea000000 	b	1037c <GetNextTask()+0x44>
   10378:	e2800001 	add	r0, r0, #1
   1037c:	e3500064 	cmp	r0, #100	; 0x64
   10380:	0a000004 	beq	10398 <GetNextTask()+0x60>
   10384:	e0812100 	add	r2, r1, r0, lsl #2
   10388:	e5922004 	ldr	r2, [r2, #4]
   1038c:	e3520000 	cmp	r2, #0
   10390:	0afffff8 	beq	10378 <GetNextTask()+0x40>
   10394:	e12fff1e 	bx	lr
   10398:	e3a02001 	mov	r2, #1
   1039c:	e59fc03c 	ldr	ip, [pc, #60]	; 103e0 <GetNextTask()+0xa8>
   103a0:	e3a03002 	mov	r3, #2
   103a4:	ea000002 	b	103b4 <GetNextTask()+0x7c>
   103a8:	e2833001 	add	r3, r3, #1
   103ac:	e3530064 	cmp	r3, #100	; 0x64
   103b0:	0a000008 	beq	103d8 <GetNextTask()+0xa0>
   103b4:	e3520000 	cmp	r2, #0
   103b8:	e1a00003 	mov	r0, r3
   103bc:	0afffff9 	beq	103a8 <GetNextTask()+0x70>
   103c0:	e79c1103 	ldr	r1, [ip, r3, lsl #2]
   103c4:	e3510000 	cmp	r1, #0
   103c8:	0afffff6 	beq	103a8 <GetNextTask()+0x70>
   103cc:	e12fff1e 	bx	lr
   103d0:	e3a02000 	mov	r2, #0
   103d4:	eafffff0 	b	1039c <GetNextTask()+0x64>
   103d8:	e3a00000 	mov	r0, #0
   103dc:	eafffffa 	b	103cc <GetNextTask()+0x94>
   103e0:	0001947c 	.word	0x0001947c

000103e4 <GetNumOfNextReadyTask()>:
   103e4:	e309c478 	movw	ip, #38008	; 0x9478
   103e8:	e340c001 	movt	ip, #1
   103ec:	e59c3004 	ldr	r3, [ip, #4]
   103f0:	e3a00001 	mov	r0, #1
   103f4:	e59c2194 	ldr	r2, [ip, #404]	; 0x194
   103f8:	e1520003 	cmp	r2, r3
   103fc:	128c1004 	addne	r1, ip, #4
   10400:	1a000002 	bne	10410 <GetNumOfNextReadyTask()+0x2c>
   10404:	ea000007 	b	10428 <GetNumOfNextReadyTask()+0x44>
   10408:	e3500064 	cmp	r0, #100	; 0x64
   1040c:	0a000020 	beq	10494 <GetNumOfNextReadyTask()+0xb0>
   10410:	e7913100 	ldr	r3, [r1, r0, lsl #2]
   10414:	e2800001 	add	r0, r0, #1
   10418:	e1520003 	cmp	r2, r3
   1041c:	1afffff9 	bne	10408 <GetNumOfNextReadyTask()+0x24>
   10420:	ea000000 	b	10428 <GetNumOfNextReadyTask()+0x44>
   10424:	e2800001 	add	r0, r0, #1
   10428:	e3500064 	cmp	r0, #100	; 0x64
   1042c:	0a000007 	beq	10450 <GetNumOfNextReadyTask()+0x6c>
   10430:	e08c3100 	add	r3, ip, r0, lsl #2
   10434:	e5933004 	ldr	r3, [r3, #4]
   10438:	e3530000 	cmp	r3, #0
   1043c:	0afffff8 	beq	10424 <GetNumOfNextReadyTask()+0x40>
   10440:	e5d31024 	ldrb	r1, [r3, #36]	; 0x24
   10444:	e3510000 	cmp	r1, #0
   10448:	1afffff5 	bne	10424 <GetNumOfNextReadyTask()+0x40>
   1044c:	e12fff1e 	bx	lr
   10450:	e3a01001 	mov	r1, #1
   10454:	e59fc048 	ldr	ip, [pc, #72]	; 104a4 <GetNumOfNextReadyTask()+0xc0>
   10458:	e3a03002 	mov	r3, #2
   1045c:	ea000002 	b	1046c <GetNumOfNextReadyTask()+0x88>
   10460:	e2833001 	add	r3, r3, #1
   10464:	e3530064 	cmp	r3, #100	; 0x64
   10468:	0a00000b 	beq	1049c <GetNumOfNextReadyTask()+0xb8>
   1046c:	e3510000 	cmp	r1, #0
   10470:	e1a00003 	mov	r0, r3
   10474:	0afffff9 	beq	10460 <GetNumOfNextReadyTask()+0x7c>
   10478:	e79c2103 	ldr	r2, [ip, r3, lsl #2]
   1047c:	e3520000 	cmp	r2, #0
   10480:	0afffff6 	beq	10460 <GetNumOfNextReadyTask()+0x7c>
   10484:	e5d22024 	ldrb	r2, [r2, #36]	; 0x24
   10488:	e3520000 	cmp	r2, #0
   1048c:	1afffff3 	bne	10460 <GetNumOfNextReadyTask()+0x7c>
   10490:	e12fff1e 	bx	lr
   10494:	e3a01000 	mov	r1, #0
   10498:	eaffffed 	b	10454 <GetNumOfNextReadyTask()+0x70>
   1049c:	e1a00003 	mov	r0, r3
   104a0:	e12fff1e 	bx	lr
   104a4:	0001947c 	.word	0x0001947c

000104a8 <yield()>:
   104a8:	e16d40fc 	strd	r4, [sp, #-12]!
   104ac:	e3094478 	movw	r4, #38008	; 0x9478
   104b0:	e3404001 	movt	r4, #1
   104b4:	e58de008 	str	lr, [sp, #8]
   104b8:	e2842004 	add	r2, r4, #4
   104bc:	e3a03000 	mov	r3, #0
   104c0:	e5945008 	ldr	r5, [r4, #8]
   104c4:	e594e194 	ldr	lr, [r4, #404]	; 0x194
   104c8:	e285103c 	add	r1, r5, #60	; 0x3c
   104cc:	e28e003c 	add	r0, lr, #60	; 0x3c
   104d0:	ea000002 	b	104e0 <yield()+0x38>
   104d4:	e2833001 	add	r3, r3, #1
   104d8:	e3530064 	cmp	r3, #100	; 0x64
   104dc:	0a000005 	beq	104f8 <yield()+0x50>
   104e0:	e492c004 	ldr	ip, [r2], #4
   104e4:	e15e000c 	cmp	lr, ip
   104e8:	1afffff9 	bne	104d4 <yield()+0x2c>
   104ec:	e0843103 	add	r3, r4, r3, lsl #2
   104f0:	e3a02000 	mov	r2, #0
   104f4:	e5832004 	str	r2, [r3, #4]
   104f8:	e3a03001 	mov	r3, #1
   104fc:	e5845194 	str	r5, [r4, #404]	; 0x194
   10500:	e584e198 	str	lr, [r4, #408]	; 0x198
   10504:	e5c4319c 	strb	r3, [r4, #412]	; 0x19c
   10508:	e1cd40d0 	ldrd	r4, [sp]
   1050c:	e59de008 	ldr	lr, [sp, #8]
   10510:	e28dd00c 	add	sp, sp, #12
   10514:	ea0000b4 	b	107ec <TaskSwitch>

00010518 <kernelYield()>:
   10518:	e52d4008 	str	r4, [sp, #-8]!
   1051c:	e58de004 	str	lr, [sp, #4]
   10520:	ebffff84 	bl	10338 <GetNextTask()>
   10524:	e3093478 	movw	r3, #38008	; 0x9478
   10528:	e3403001 	movt	r3, #1
   1052c:	e59d4000 	ldr	r4, [sp]
   10530:	e0830100 	add	r0, r3, r0, lsl #2
   10534:	e5931194 	ldr	r1, [r3, #404]	; 0x194
   10538:	e5902004 	ldr	r2, [r0, #4]
   1053c:	e59de004 	ldr	lr, [sp, #4]
   10540:	e28dd008 	add	sp, sp, #8
   10544:	e281003c 	add	r0, r1, #60	; 0x3c
   10548:	e5832194 	str	r2, [r3, #404]	; 0x194
   1054c:	e5831198 	str	r1, [r3, #408]	; 0x198
   10550:	e282103c 	add	r1, r2, #60	; 0x3c
   10554:	ea0000a4 	b	107ec <TaskSwitch>

00010558 <kernelYieldByNum(int)>:
   10558:	e3093478 	movw	r3, #38008	; 0x9478
   1055c:	e3403001 	movt	r3, #1
   10560:	e0830100 	add	r0, r3, r0, lsl #2
   10564:	e5931194 	ldr	r1, [r3, #404]	; 0x194
   10568:	e5902004 	ldr	r2, [r0, #4]
   1056c:	e281003c 	add	r0, r1, #60	; 0x3c
   10570:	e5832194 	str	r2, [r3, #404]	; 0x194
   10574:	e5831198 	str	r1, [r3, #408]	; 0x198
   10578:	e282103c 	add	r1, r2, #60	; 0x3c
   1057c:	ea00009a 	b	107ec <TaskSwitch>

00010580 <sleepYield()>:
   10580:	e12fff1e 	bx	lr

00010584 <exit()>:
   10584:	e3093478 	movw	r3, #38008	; 0x9478
   10588:	e3403001 	movt	r3, #1
   1058c:	e5930004 	ldr	r0, [r3, #4]
   10590:	e3a01003 	mov	r1, #3
   10594:	e5932194 	ldr	r2, [r3, #404]	; 0x194
   10598:	e5830194 	str	r0, [r3, #404]	; 0x194
   1059c:	e5c3119c 	strb	r1, [r3, #412]	; 0x19c
   105a0:	e280103c 	add	r1, r0, #60	; 0x3c
   105a4:	e282003c 	add	r0, r2, #60	; 0x3c
   105a8:	e5832198 	str	r2, [r3, #408]	; 0x198
   105ac:	ea00008e 	b	107ec <TaskSwitch>

000105b0 <sleep(TTask*, unsigned int)>:
   105b0:	e16d41f0 	strd	r4, [sp, #-16]!
   105b4:	e1a04000 	mov	r4, r0
   105b8:	e1a05001 	mov	r5, r1
   105bc:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   105c0:	e59f004c 	ldr	r0, [pc, #76]	; 10614 <sleep(TTask*, unsigned int)+0x64>
   105c4:	e5933010 	ldr	r3, [r3, #16]
   105c8:	e58d6008 	str	r6, [sp, #8]
   105cc:	e58de00c 	str	lr, [sp, #12]
   105d0:	e12fff33 	blx	r3
   105d4:	e3001708 	movw	r1, #1800	; 0x708
   105d8:	e3a02002 	mov	r2, #2
   105dc:	e59d6008 	ldr	r6, [sp, #8]
   105e0:	e1550001 	cmp	r5, r1
   105e4:	e3093478 	movw	r3, #38008	; 0x9478
   105e8:	e3403001 	movt	r3, #1
   105ec:	93a01064 	movls	r1, #100	; 0x64
   105f0:	e5c42024 	strb	r2, [r4, #36]	; 0x24
   105f4:	81a00004 	movhi	r0, r4
   105f8:	91a00004 	movls	r0, r4
   105fc:	e59de00c 	ldr	lr, [sp, #12]
   10600:	90010591 	mulls	r1, r1, r5
   10604:	e5c3219c 	strb	r2, [r3, #412]	; 0x19c
   10608:	e1cd40d0 	ldrd	r4, [sp]
   1060c:	e28dd010 	add	sp, sp, #16
   10610:	ea000034 	b	106e8 <msSleep(TTask*, unsigned int)>
   10614:	00016084 	.word	0x00016084

00010618 <sleepYieldPrepare(unsigned int, void*)>:
   10618:	e3093478 	movw	r3, #38008	; 0x9478
   1061c:	e3403001 	movt	r3, #1
   10620:	e52d4008 	str	r4, [sp, #-8]!
   10624:	e593c194 	ldr	ip, [r3, #404]	; 0x194
   10628:	e3a04064 	mov	r4, #100	; 0x64
   1062c:	e1a02001 	mov	r2, r1
   10630:	e58de004 	str	lr, [sp, #4]
   10634:	e3a0e002 	mov	lr, #2
   10638:	e0010094 	mul	r1, r4, r0
   1063c:	e1a00002 	mov	r0, r2
   10640:	e59d4000 	ldr	r4, [sp]
   10644:	e5832194 	str	r2, [r3, #404]	; 0x194
   10648:	e5c3e19c 	strb	lr, [r3, #412]	; 0x19c
   1064c:	e59de004 	ldr	lr, [sp, #4]
   10650:	e28dd008 	add	sp, sp, #8
   10654:	e583c198 	str	ip, [r3, #408]	; 0x198
   10658:	ea000022 	b	106e8 <msSleep(TTask*, unsigned int)>

0001065c <sleepTimerHandler(void*)>:
   1065c:	e16d41f0 	strd	r4, [sp, #-16]!
   10660:	e1a04000 	mov	r4, r0
   10664:	e3055f48 	movw	r5, #24392	; 0x5f48
   10668:	e3405001 	movt	r5, #1
   1066c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   10670:	e2850e15 	add	r0, r5, #336	; 0x150
   10674:	e5933010 	ldr	r3, [r3, #16]
   10678:	e58d6008 	str	r6, [sp, #8]
   1067c:	e58de00c 	str	lr, [sp, #12]
   10680:	e12fff33 	blx	r3
   10684:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   10688:	e2850e16 	add	r0, r5, #352	; 0x160
   1068c:	e5933010 	ldr	r3, [r3, #16]
   10690:	e12fff33 	blx	r3
   10694:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   10698:	e3a02000 	mov	r2, #0
   1069c:	e2850d06 	add	r0, r5, #384	; 0x180
   106a0:	e5933010 	ldr	r3, [r3, #16]
   106a4:	e5c42024 	strb	r2, [r4, #36]	; 0x24
   106a8:	e12fff33 	blx	r3
   106ac:	e3093478 	movw	r3, #38008	; 0x9478
   106b0:	e3403001 	movt	r3, #1
   106b4:	e5932194 	ldr	r2, [r3, #404]	; 0x194
   106b8:	e3a0c002 	mov	ip, #2
   106bc:	e1a00004 	mov	r0, r4
   106c0:	e3a01f4b 	mov	r1, #300	; 0x12c
   106c4:	e5834194 	str	r4, [r3, #404]	; 0x194
   106c8:	e5832198 	str	r2, [r3, #408]	; 0x198
   106cc:	e5c3c19c 	strb	ip, [r3, #412]	; 0x19c
   106d0:	eb000004 	bl	106e8 <msSleep(TTask*, unsigned int)>
   106d4:	e1cd40d0 	ldrd	r4, [sp]
   106d8:	e59d6008 	ldr	r6, [sp, #8]
   106dc:	e59de00c 	ldr	lr, [sp, #12]
   106e0:	e28dd010 	add	sp, sp, #16
   106e4:	eaffff8b 	b	10518 <kernelYield()>

000106e8 <msSleep(TTask*, unsigned int)>:
   106e8:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
   106ec:	e1a04000 	mov	r4, r0
   106f0:	e3055f48 	movw	r5, #24392	; 0x5f48
   106f4:	e3405001 	movt	r5, #1
   106f8:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   106fc:	e2850e1a 	add	r0, r5, #416	; 0x1a0
   10700:	e5933010 	ldr	r3, [r3, #16]
   10704:	e1cd60f8 	strd	r6, [sp, #8]
   10708:	e1a06001 	mov	r6, r1
   1070c:	e3a07002 	mov	r7, #2
   10710:	e58d8010 	str	r8, [sp, #16]
   10714:	e58de014 	str	lr, [sp, #20]
   10718:	e12fff33 	blx	r3
   1071c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   10720:	e2850f6d 	add	r0, r5, #436	; 0x1b4
   10724:	e5933010 	ldr	r3, [r3, #16]
   10728:	e12fff33 	blx	r3
   1072c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   10730:	e2850e1d 	add	r0, r5, #464	; 0x1d0
   10734:	e5933010 	ldr	r3, [r3, #16]
   10738:	e5c47024 	strb	r7, [r4, #36]	; 0x24
   1073c:	e12fff33 	blx	r3
   10740:	e5942080 	ldr	r2, [r4, #128]	; 0x80
   10744:	e3093478 	movw	r3, #38008	; 0x9478
   10748:	e3403001 	movt	r3, #1
   1074c:	e2850e1f 	add	r0, r5, #496	; 0x1f0
   10750:	e5c3719c 	strb	r7, [r3, #412]	; 0x19c
   10754:	e5923010 	ldr	r3, [r2, #16]
   10758:	e12fff33 	blx	r3
   1075c:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   10760:	e1a00006 	mov	r0, r6
   10764:	e1a02004 	mov	r2, r4
   10768:	e30810d0 	movw	r1, #32976	; 0x80d0
   1076c:	e3401000 	movt	r1, #0
   10770:	e5933018 	ldr	r3, [r3, #24]
   10774:	e12fff33 	blx	r3
   10778:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   1077c:	e2850f83 	add	r0, r5, #524	; 0x20c
   10780:	e5933010 	ldr	r3, [r3, #16]
   10784:	e12fff33 	blx	r3
   10788:	e1a00004 	mov	r0, r4
   1078c:	e1cd40d0 	ldrd	r4, [sp]
   10790:	e1cd60d8 	ldrd	r6, [sp, #8]
   10794:	e59d8010 	ldr	r8, [sp, #16]
   10798:	e59de014 	ldr	lr, [sp, #20]
   1079c:	e28dd018 	add	sp, sp, #24
   107a0:	eaffffad 	b	1065c <sleepTimerHandler(void*)>

000107a4 <yieldPrepare()>:
   107a4:	e3093478 	movw	r3, #38008	; 0x9478
   107a8:	e3403001 	movt	r3, #1
   107ac:	e5931008 	ldr	r1, [r3, #8]
   107b0:	e3a00001 	mov	r0, #1
   107b4:	e5932194 	ldr	r2, [r3, #404]	; 0x194
   107b8:	e5831194 	str	r1, [r3, #404]	; 0x194
   107bc:	e5c3019c 	strb	r0, [r3, #412]	; 0x19c
   107c0:	e5832198 	str	r2, [r3, #408]	; 0x198
   107c4:	e12fff1e 	bx	lr

000107c8 <getCurrentTaskPointer()>:
   107c8:	e3093478 	movw	r3, #38008	; 0x9478
   107cc:	e3403001 	movt	r3, #1
   107d0:	e5930194 	ldr	r0, [r3, #404]	; 0x194
   107d4:	e12fff1e 	bx	lr

000107d8 <getKernelRegPtr()>:
   107d8:	e3093478 	movw	r3, #38008	; 0x9478
   107dc:	e3403001 	movt	r3, #1
   107e0:	e5930008 	ldr	r0, [r3, #8]
   107e4:	e280003c 	add	r0, r0, #60	; 0x3c
   107e8:	e12fff1e 	bx	lr

000107ec <TaskSwitch>:
   107ec:	e8807fff 	stm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   107f0:	e8917fff 	ldm	r1, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}
   107f4:	e12fff1e 	bx	lr

000107f8 <InvalidateDataCacheL1Only>:
   107f8:	e92d0070 	push	{r4, r5, r6}
   107fc:	e3a00000 	mov	r0, #0
   10800:	ee400f10 	mcr	15, 2, r0, cr0, cr0, {0}
   10804:	ee300f10 	mrc	15, 1, r0, cr0, cr0, {0}
   10808:	e3071fff 	movw	r1, #32767	; 0x7fff
   1080c:	e00126a0 	and	r2, r1, r0, lsr #13
   10810:	e30013ff 	movw	r1, #1023	; 0x3ff
   10814:	e00131a0 	and	r3, r1, r0, lsr #3
   10818:	e2822001 	add	r2, r2, #1
   1081c:	e2000007 	and	r0, r0, #7
   10820:	e2800004 	add	r0, r0, #4
   10824:	e16f1f13 	clz	r1, r3
   10828:	e2834001 	add	r4, r3, #1
   1082c:	e2422001 	sub	r2, r2, #1
   10830:	e1a03004 	mov	r3, r4
   10834:	e2533001 	subs	r3, r3, #1
   10838:	e1a05113 	lsl	r5, r3, r1
   1083c:	e1a06012 	lsl	r6, r2, r0
   10840:	e1855006 	orr	r5, r5, r6
   10844:	ee075f56 	mcr	15, 0, r5, cr7, cr6, {2}
   10848:	cafffff9 	bgt	10834 <InvalidateDataCacheL1Only+0x3c>
   1084c:	e3520000 	cmp	r2, #0
   10850:	cafffff5 	bgt	1082c <InvalidateDataCacheL1Only+0x34>
   10854:	f57ff04e 	dsb	st
   10858:	f57ff06f 	isb	sy
   1085c:	e8bd0070 	pop	{r4, r5, r6}
   10860:	e12fff1e 	bx	lr

00010864 <InvalidateDataCache>:
   10864:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   10868:	f57ff05f 	dmb	sy
   1086c:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   10870:	e1a03ba0 	lsr	r3, r0, #23
   10874:	e213300e 	ands	r3, r3, #14
   10878:	0a00001d 	beq	108f4 <InvalidateDataCache+0x90>
   1087c:	e3a0a000 	mov	sl, #0
   10880:	e08a20aa 	add	r2, sl, sl, lsr #1
   10884:	e1a01230 	lsr	r1, r0, r2
   10888:	e2011007 	and	r1, r1, #7
   1088c:	e3510002 	cmp	r1, #2
   10890:	ba000014 	blt	108e8 <InvalidateDataCache+0x84>
   10894:	e10f9000 	mrs	r9, CPSR
   10898:	f10c0080 	cpsid	i
   1089c:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   108a0:	f57ff06f 	isb	sy
   108a4:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   108a8:	e121f009 	msr	CPSR_c, r9
   108ac:	e2012007 	and	r2, r1, #7
   108b0:	e2822004 	add	r2, r2, #4
   108b4:	e30043ff 	movw	r4, #1023	; 0x3ff
   108b8:	e01441a1 	ands	r4, r4, r1, lsr #3
   108bc:	e16f5f14 	clz	r5, r4
   108c0:	e3077fff 	movw	r7, #32767	; 0x7fff
   108c4:	e01776a1 	ands	r7, r7, r1, lsr #13
   108c8:	e1a09007 	mov	r9, r7
   108cc:	e18ab514 	orr	fp, sl, r4, lsl r5
   108d0:	e18bb219 	orr	fp, fp, r9, lsl r2
   108d4:	ee07bf56 	mcr	15, 0, fp, cr7, cr6, {2}
   108d8:	e2599001 	subs	r9, r9, #1
   108dc:	aafffffa 	bge	108cc <InvalidateDataCache+0x68>
   108e0:	e2544001 	subs	r4, r4, #1
   108e4:	aafffff7 	bge	108c8 <InvalidateDataCache+0x64>
   108e8:	e28aa002 	add	sl, sl, #2
   108ec:	e153000a 	cmp	r3, sl
   108f0:	caffffe2 	bgt	10880 <InvalidateDataCache+0x1c>
   108f4:	e3a0a000 	mov	sl, #0
   108f8:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   108fc:	f57ff04e 	dsb	st
   10900:	f57ff06f 	isb	sy
   10904:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   10908:	e12fff1e 	bx	lr

0001090c <CleanDataCache>:
   1090c:	e92d0eb0 	push	{r4, r5, r7, r9, sl, fp}
   10910:	f57ff05f 	dmb	sy
   10914:	ee300f30 	mrc	15, 1, r0, cr0, cr0, {1}
   10918:	e1a03ba0 	lsr	r3, r0, #23
   1091c:	e213300e 	ands	r3, r3, #14
   10920:	0a00001d 	beq	1099c <CleanDataCache+0x90>
   10924:	e3a0a000 	mov	sl, #0
   10928:	e08a20aa 	add	r2, sl, sl, lsr #1
   1092c:	e1a01230 	lsr	r1, r0, r2
   10930:	e2011007 	and	r1, r1, #7
   10934:	e3510002 	cmp	r1, #2
   10938:	ba000014 	blt	10990 <CleanDataCache+0x84>
   1093c:	e10f9000 	mrs	r9, CPSR
   10940:	f10c0080 	cpsid	i
   10944:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   10948:	f57ff06f 	isb	sy
   1094c:	ee301f10 	mrc	15, 1, r1, cr0, cr0, {0}
   10950:	e121f009 	msr	CPSR_c, r9
   10954:	e2012007 	and	r2, r1, #7
   10958:	e2822004 	add	r2, r2, #4
   1095c:	e30043ff 	movw	r4, #1023	; 0x3ff
   10960:	e01441a1 	ands	r4, r4, r1, lsr #3
   10964:	e16f5f14 	clz	r5, r4
   10968:	e3077fff 	movw	r7, #32767	; 0x7fff
   1096c:	e01776a1 	ands	r7, r7, r1, lsr #13
   10970:	e1a09007 	mov	r9, r7
   10974:	e18ab514 	orr	fp, sl, r4, lsl r5
   10978:	e18bb219 	orr	fp, fp, r9, lsl r2
   1097c:	ee07bf5a 	mcr	15, 0, fp, cr7, cr10, {2}
   10980:	e2599001 	subs	r9, r9, #1
   10984:	aafffffa 	bge	10974 <CleanDataCache+0x68>
   10988:	e2544001 	subs	r4, r4, #1
   1098c:	aafffff7 	bge	10970 <CleanDataCache+0x64>
   10990:	e28aa002 	add	sl, sl, #2
   10994:	e153000a 	cmp	r3, sl
   10998:	caffffe2 	bgt	10928 <CleanDataCache+0x1c>
   1099c:	e3a0a000 	mov	sl, #0
   109a0:	ee40af10 	mcr	15, 2, sl, cr0, cr0, {0}
   109a4:	f57ff04e 	dsb	st
   109a8:	f57ff06f 	isb	sy
   109ac:	e8bd0eb0 	pop	{r4, r5, r7, r9, sl, fp}
   109b0:	e12fff1e 	bx	lr

000109b4 <CleanAndInvalidateDataCacheRange>:
   109b4:	ee103f30 	mrc	15, 0, r3, cr0, cr0, {1}
   109b8:	e1a03823 	lsr	r3, r3, #16
   109bc:	e203300f 	and	r3, r3, #15
   109c0:	e3a02004 	mov	r2, #4
   109c4:	e1a02312 	lsl	r2, r2, r3
   109c8:	e0801001 	add	r1, r0, r1
   109cc:	e2423001 	sub	r3, r2, #1
   109d0:	e1c00003 	bic	r0, r0, r3
   109d4:	ee070f3e 	mcr	15, 0, r0, cr7, cr14, {1}
   109d8:	e0800002 	add	r0, r0, r2
   109dc:	e1500001 	cmp	r0, r1
   109e0:	3afffffb 	bcc	109d4 <CleanAndInvalidateDataCacheRange+0x20>
   109e4:	f57ff04e 	dsb	st
   109e8:	e12fff1e 	bx	lr

000109ec <CExceptionHandler::Get() [clone .part.0]>:
   109ec:	e3061178 	movw	r1, #24952	; 0x6178
   109f0:	e3401001 	movt	r1, #1
   109f4:	e52d4008 	str	r4, [sp, #-8]!
   109f8:	e3050c48 	movw	r0, #23624	; 0x5c48
   109fc:	e3400001 	movt	r0, #1
   10a00:	e58de004 	str	lr, [sp, #4]
   10a04:	e3a02087 	mov	r2, #135	; 0x87
   10a08:	ebffdf47 	bl	872c <assertion_failed>

00010a0c <CExceptionHandler::CExceptionHandler()>:
   10a0c:	e3093634 	movw	r3, #38452	; 0x9634
   10a10:	e3403001 	movt	r3, #1
   10a14:	e52d4008 	str	r4, [sp, #-8]!
   10a18:	e593c000 	ldr	ip, [r3]
   10a1c:	e58de004 	str	lr, [sp, #4]
   10a20:	e35c0000 	cmp	ip, #0
   10a24:	1a00001b 	bne	10a98 <CExceptionHandler::CExceptionHandler()+0x8c>
   10a28:	e3001db4 	movw	r1, #3508	; 0xdb4
   10a2c:	e3401001 	movt	r1, #1
   10a30:	e5830000 	str	r0, [r3]
   10a34:	e3002d14 	movw	r2, #3348	; 0xd14
   10a38:	e3402001 	movt	r2, #1
   10a3c:	e3003d64 	movw	r3, #3428	; 0xd64
   10a40:	e3403001 	movt	r3, #1
   10a44:	e2411004 	sub	r1, r1, #4
   10a48:	e242200c 	sub	r2, r2, #12
   10a4c:	e2433010 	sub	r3, r3, #16
   10a50:	e1a01141 	asr	r1, r1, #2
   10a54:	e1a04000 	mov	r4, r0
   10a58:	e1a02142 	asr	r2, r2, #2
   10a5c:	e1a03143 	asr	r3, r3, #2
   10a60:	e2411002 	sub	r1, r1, #2
   10a64:	e2422002 	sub	r2, r2, #2
   10a68:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   10a6c:	e2433002 	sub	r3, r3, #2
   10a70:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   10a74:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   10a78:	e58c1004 	str	r1, [ip, #4]
   10a7c:	e58c200c 	str	r2, [ip, #12]
   10a80:	e58c3010 	str	r3, [ip, #16]
   10a84:	eb0002cb 	bl	115b8 <SyncDataAndInstructionCache>
   10a88:	e1a00004 	mov	r0, r4
   10a8c:	e59d4000 	ldr	r4, [sp]
   10a90:	e28dd004 	add	sp, sp, #4
   10a94:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10a98:	e3061178 	movw	r1, #24952	; 0x6178
   10a9c:	e3401001 	movt	r1, #1
   10aa0:	e3050aa0 	movw	r0, #23200	; 0x5aa0
   10aa4:	e3400001 	movt	r0, #1
   10aa8:	e3a02030 	mov	r2, #48	; 0x30
   10aac:	ebffdf1e 	bl	872c <assertion_failed>

00010ab0 <CExceptionHandler::~CExceptionHandler()>:
   10ab0:	e3a02000 	mov	r2, #0
   10ab4:	e3093634 	movw	r3, #38452	; 0x9634
   10ab8:	e3403001 	movt	r3, #1
   10abc:	e5832000 	str	r2, [r3]
   10ac0:	e12fff1e 	bx	lr

00010ac4 <CExceptionHandler::Throw(unsigned int)>:
   10ac4:	e52d4008 	str	r4, [sp, #-8]!
   10ac8:	e1a04001 	mov	r4, r1
   10acc:	e58de004 	str	lr, [sp, #4]
   10ad0:	e24dd008 	sub	sp, sp, #8
   10ad4:	ebffe3e9 	bl	9a80 <CLogger::Get()>
   10ad8:	e3083054 	movw	r3, #32852	; 0x8054
   10adc:	e3403001 	movt	r3, #1
   10ae0:	e793c104 	ldr	ip, [r3, r4, lsl #2]
   10ae4:	e3a02000 	mov	r2, #0
   10ae8:	e3063190 	movw	r3, #24976	; 0x6190
   10aec:	e3403001 	movt	r3, #1
   10af0:	e306123c 	movw	r1, #25148	; 0x623c
   10af4:	e3401001 	movt	r1, #1
   10af8:	e58dc000 	str	ip, [sp]
   10afc:	ebffe317 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10b00:	e28dd008 	add	sp, sp, #8
   10b04:	e59d4000 	ldr	r4, [sp]
   10b08:	e28dd004 	add	sp, sp, #4
   10b0c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00010b10 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>:
   10b10:	e3510002 	cmp	r1, #2
   10b14:	e16d41fc 	strd	r4, [sp, #-28]!	; 0xffffffe4
   10b18:	e1a05001 	mov	r5, r1
   10b1c:	e1a04002 	mov	r4, r2
   10b20:	e1cd60f8 	strd	r6, [sp, #8]
   10b24:	e1cd81f0 	strd	r8, [sp, #16]
   10b28:	e58de018 	str	lr, [sp, #24]
   10b2c:	e24dd024 	sub	sp, sp, #36	; 0x24
   10b30:	0a00002d 	beq	10bec <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xdc>
   10b34:	e3510003 	cmp	r1, #3
   10b38:	13a07000 	movne	r7, #0
   10b3c:	11a09007 	movne	r9, r7
   10b40:	1a000001 	bne	10b4c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x3c>
   10b44:	ee159f10 	mrc	15, 0, r9, cr5, cr0, {0}
   10b48:	ee167f10 	mrc	15, 0, r7, cr6, cr0, {0}
   10b4c:	e3540000 	cmp	r4, #0
   10b50:	0a00002b 	beq	10c04 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xf4>
   10b54:	e5946044 	ldr	r6, [r4, #68]	; 0x44
   10b58:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   10b5c:	e5948048 	ldr	r8, [r4, #72]	; 0x48
   10b60:	e203301f 	and	r3, r3, #31
   10b64:	e3530011 	cmp	r3, #17
   10b68:	0a000022 	beq	10bf8 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xe8>
   10b6c:	e3530012 	cmp	r3, #18
   10b70:	0a00001b 	beq	10be4 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0xd4>
   10b74:	e1a00006 	mov	r0, r6
   10b78:	e306123c 	movw	r1, #25148	; 0x623c
   10b7c:	e3401001 	movt	r1, #1
   10b80:	ebffdf59 	bl	88ec <debug_stacktrace(unsigned int const*, char const*)>
   10b84:	ebffe3bd 	bl	9a80 <CLogger::Get()>
   10b88:	e3082054 	movw	r2, #32852	; 0x8054
   10b8c:	e3402001 	movt	r2, #1
   10b90:	e594e04c 	ldr	lr, [r4, #76]	; 0x4c
   10b94:	e58d9008 	str	r9, [sp, #8]
   10b98:	e30631ac 	movw	r3, #25004	; 0x61ac
   10b9c:	e3403001 	movt	r3, #1
   10ba0:	e7925105 	ldr	r5, [r2, r5, lsl #2]
   10ba4:	e306123c 	movw	r1, #25148	; 0x623c
   10ba8:	e3401001 	movt	r1, #1
   10bac:	e58d700c 	str	r7, [sp, #12]
   10bb0:	e3a02000 	mov	r2, #0
   10bb4:	e594c050 	ldr	ip, [r4, #80]	; 0x50
   10bb8:	e88d1020 	stm	sp, {r5, ip}
   10bbc:	e58d6010 	str	r6, [sp, #16]
   10bc0:	e58d8014 	str	r8, [sp, #20]
   10bc4:	e58de018 	str	lr, [sp, #24]
   10bc8:	ebffe2e4 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   10bcc:	e28dd024 	add	sp, sp, #36	; 0x24
   10bd0:	e1cd40d0 	ldrd	r4, [sp]
   10bd4:	e1cd60d8 	ldrd	r6, [sp, #8]
   10bd8:	e1cd81d0 	ldrd	r8, [sp, #16]
   10bdc:	e28dd018 	add	sp, sp, #24
   10be0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10be4:	e8940140 	ldm	r4, {r6, r8}
   10be8:	eaffffe1 	b	10b74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x64>
   10bec:	ee159f30 	mrc	15, 0, r9, cr5, cr0, {1}
   10bf0:	ee167f50 	mrc	15, 0, r7, cr6, cr0, {2}
   10bf4:	eaffffd4 	b	10b4c <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x3c>
   10bf8:	e5946008 	ldr	r6, [r4, #8]
   10bfc:	e594800c 	ldr	r8, [r4, #12]
   10c00:	eaffffdb 	b	10b74 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)+0x64>
   10c04:	e3061178 	movw	r1, #24952	; 0x6178
   10c08:	e3401001 	movt	r1, #1
   10c0c:	e30601a0 	movw	r0, #24992	; 0x61a0
   10c10:	e3400001 	movt	r0, #1
   10c14:	e3a02069 	mov	r2, #105	; 0x69
   10c18:	ebffdec3 	bl	872c <assertion_failed>

00010c1c <CExceptionHandler::Get()>:
   10c1c:	e3093634 	movw	r3, #38452	; 0x9634
   10c20:	e3403001 	movt	r3, #1
   10c24:	e5930000 	ldr	r0, [r3]
   10c28:	e3500000 	cmp	r0, #0
   10c2c:	112fff1e 	bxne	lr
   10c30:	e52d4008 	str	r4, [sp, #-8]!
   10c34:	e58de004 	str	lr, [sp, #4]
   10c38:	ebffff6b 	bl	109ec <CExceptionHandler::Get() [clone .part.0]>

00010c3c <ExceptionHandler>:
   10c3c:	e16d41f0 	strd	r4, [sp, #-16]!
   10c40:	e1a04000 	mov	r4, r0
   10c44:	e1a05001 	mov	r5, r1
   10c48:	e58d6008 	str	r6, [sp, #8]
   10c4c:	e58de00c 	str	lr, [sp, #12]
   10c50:	eb00038d 	bl	11a8c <CInterruptSystem::DisableFIQ()>
   10c54:	f1080040 	cpsie	f
   10c58:	e3093634 	movw	r3, #38452	; 0x9634
   10c5c:	e3403001 	movt	r3, #1
   10c60:	e5930000 	ldr	r0, [r3]
   10c64:	e3500000 	cmp	r0, #0
   10c68:	0a000006 	beq	10c88 <ExceptionHandler+0x4c>
   10c6c:	e1a02005 	mov	r2, r5
   10c70:	e1a01004 	mov	r1, r4
   10c74:	e1cd40d0 	ldrd	r4, [sp]
   10c78:	e59d6008 	ldr	r6, [sp, #8]
   10c7c:	e59de00c 	ldr	lr, [sp, #12]
   10c80:	e28dd010 	add	sp, sp, #16
   10c84:	eaffffa1 	b	10b10 <CExceptionHandler::Throw(unsigned int, TAbortFrame*)>
   10c88:	ebffff57 	bl	109ec <CExceptionHandler::Get() [clone .part.0]>

00010c8c <raise>:
   10c8c:	e3093634 	movw	r3, #38452	; 0x9634
   10c90:	e3403001 	movt	r3, #1
   10c94:	e52d4008 	str	r4, [sp, #-8]!
   10c98:	e5930000 	ldr	r0, [r3]
   10c9c:	e58de004 	str	lr, [sp, #4]
   10ca0:	e3500000 	cmp	r0, #0
   10ca4:	0a000005 	beq	10cc0 <raise+0x34>
   10ca8:	e3a01004 	mov	r1, #4
   10cac:	ebffff84 	bl	10ac4 <CExceptionHandler::Throw(unsigned int)>
   10cb0:	e59d4000 	ldr	r4, [sp]
   10cb4:	e28dd004 	add	sp, sp, #4
   10cb8:	e3a00000 	mov	r0, #0
   10cbc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10cc0:	ebffff49 	bl	109ec <CExceptionHandler::Get() [clone .part.0]>

00010cc4 <UndefinedInstructionInternal>:
   10cc4:	e24dd004 	sub	sp, sp, #4
   10cc8:	e24ee004 	sub	lr, lr, #4
   10ccc:	e92d4000 	stmfd	sp!, {lr}
   10cd0:	e14fe000 	mrs	lr, SPSR
   10cd4:	e92d4000 	stmfd	sp!, {lr}
   10cd8:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10cdc:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   10ce0:	e1a0100d 	mov	r1, sp
   10ce4:	f1020012 	cps	#18
   10ce8:	e1a0200d 	mov	r2, sp
   10cec:	e1a0300e 	mov	r3, lr
   10cf0:	f1020011 	cps	#17
   10cf4:	e1a0400d 	mov	r4, sp
   10cf8:	e1a0500e 	mov	r5, lr
   10cfc:	f102001f 	cps	#31
   10d00:	e1a0d001 	mov	sp, r1
   10d04:	e92d003c 	push	{r2, r3, r4, r5}
   10d08:	e1a0100d 	mov	r1, sp
   10d0c:	e3a00001 	mov	r0, #1
   10d10:	eaffffc9 	b	10c3c <ExceptionHandler>

00010d14 <PrefetchAbortStub>:
   10d14:	e24dd004 	sub	sp, sp, #4
   10d18:	e24ee004 	sub	lr, lr, #4
   10d1c:	e92d4000 	stmfd	sp!, {lr}
   10d20:	e14fe000 	mrs	lr, SPSR
   10d24:	e92d4000 	stmfd	sp!, {lr}
   10d28:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10d2c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   10d30:	e1a0100d 	mov	r1, sp
   10d34:	f1020012 	cps	#18
   10d38:	e1a0200d 	mov	r2, sp
   10d3c:	e1a0300e 	mov	r3, lr
   10d40:	f1020011 	cps	#17
   10d44:	e1a0400d 	mov	r4, sp
   10d48:	e1a0500e 	mov	r5, lr
   10d4c:	f102001f 	cps	#31
   10d50:	e1a0d001 	mov	sp, r1
   10d54:	e92d003c 	push	{r2, r3, r4, r5}
   10d58:	e1a0100d 	mov	r1, sp
   10d5c:	e3a00002 	mov	r0, #2
   10d60:	eaffffb5 	b	10c3c <ExceptionHandler>

00010d64 <DataAbortStub>:
   10d64:	e24dd004 	sub	sp, sp, #4
   10d68:	e24ee008 	sub	lr, lr, #8
   10d6c:	e92d4000 	stmfd	sp!, {lr}
   10d70:	e14fe000 	mrs	lr, SPSR
   10d74:	e92d4000 	stmfd	sp!, {lr}
   10d78:	e94d7fff 	stmdb	sp, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr}^
   10d7c:	e24dd03c 	sub	sp, sp, #60	; 0x3c
   10d80:	e1a0100d 	mov	r1, sp
   10d84:	f1020012 	cps	#18
   10d88:	e1a0200d 	mov	r2, sp
   10d8c:	e1a0300e 	mov	r3, lr
   10d90:	f1020011 	cps	#17
   10d94:	e1a0400d 	mov	r4, sp
   10d98:	e1a0500e 	mov	r5, lr
   10d9c:	f102001f 	cps	#31
   10da0:	e1a0d001 	mov	sp, r1
   10da4:	e92d003c 	push	{r2, r3, r4, r5}
   10da8:	e1a0100d 	mov	r1, sp
   10dac:	e3a00003 	mov	r0, #3
   10db0:	eaffffa1 	b	10c3c <ExceptionHandler>

00010db4 <UndefinedInstructionStub>:
   10db4:	e92d4001 	push	{r0, lr}
   10db8:	eef80a10 	vmrs	r0, fpexc
   10dbc:	e3100102 	tst	r0, #-2147483648	; 0x80000000
   10dc0:	0affffbf 	beq	10cc4 <UndefinedInstructionInternal>
   10dc4:	e3c00102 	bic	r0, r0, #-2147483648	; 0x80000000
   10dc8:	eee80a10 	vmsr	fpexc, r0
   10dcc:	e8fd8001 	ldm	sp!, {r0, pc}^

00010dd0 <IRQStub>:
   10dd0:	e24ee004 	sub	lr, lr, #4
   10dd4:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   10dd8:	e59f0050 	ldr	r0, [pc, #80]	; 10e30 <SMCStub+0x14>
   10ddc:	e580e000 	str	lr, [r0]
   10de0:	eb000389 	bl	11c0c <InterruptHandler>
   10de4:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00010de8 <FIQStub>:
   10de8:	e24ee004 	sub	lr, lr, #4
   10dec:	e92d500f 	push	{r0, r1, r2, r3, ip, lr}
   10df0:	e59f203c 	ldr	r2, [pc, #60]	; 10e34 <SMCStub+0x18>
   10df4:	e5921000 	ldr	r1, [r2]
   10df8:	e3510000 	cmp	r1, #0
   10dfc:	0a000002 	beq	10e0c <FIQStub+0x24>
   10e00:	e5920004 	ldr	r0, [r2, #4]
   10e04:	e12fff31 	blx	r1
   10e08:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^
   10e0c:	e59f1024 	ldr	r1, [pc, #36]	; 10e38 <SMCStub+0x1c>
   10e10:	e3a00000 	mov	r0, #0
   10e14:	e5810000 	str	r0, [r1]
   10e18:	e8fd900f 	ldm	sp!, {r0, r1, r2, r3, ip, pc}^

00010e1c <SMCStub>:
   10e1c:	e59fd018 	ldr	sp, [pc, #24]	; 10e3c <SMCStub+0x20>
   10e20:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
   10e24:	eb0003e5 	bl	11dc0 <SecureMonitorHandler>
   10e28:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
   10e2c:	e1b0f00e 	movs	pc, lr
   10e30:	00018074 	.word	0x00018074
   10e34:	00018068 	.word	0x00018068
   10e38:	fe00b20c 	.word	0xfe00b20c
   10e3c:	000196b8 	.word	0x000196b8

00010e40 <CMemorySystem::CMemorySystem(bool)>:
   10e40:	e1a03001 	mov	r3, r1
   10e44:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
   10e48:	e3a05000 	mov	r5, #0
   10e4c:	e1a04000 	mov	r4, r0
   10e50:	e1cd60f8 	strd	r6, [sp, #8]
   10e54:	e280700c 	add	r7, r0, #12
   10e58:	e3061244 	movw	r1, #25156	; 0x6244
   10e5c:	e3401001 	movt	r1, #1
   10e60:	e58d8010 	str	r8, [sp, #16]
   10e64:	e28480c8 	add	r8, r4, #200	; 0xc8
   10e68:	e58de014 	str	lr, [sp, #20]
   10e6c:	e24dd028 	sub	sp, sp, #40	; 0x28
   10e70:	e5c03000 	strb	r3, [r0]
   10e74:	e2846f61 	add	r6, r4, #388	; 0x184
   10e78:	e5805004 	str	r5, [r0, #4]
   10e7c:	e5805008 	str	r5, [r0, #8]
   10e80:	e1a00007 	mov	r0, r7
   10e84:	ebfffa34 	bl	f75c <CHeapAllocator::CHeapAllocator(char const*)>
   10e88:	e59f114c 	ldr	r1, [pc, #332]	; 10fdc <CMemorySystem::CMemorySystem(bool)+0x19c>
   10e8c:	e1a00008 	mov	r0, r8
   10e90:	ebfffa31 	bl	f75c <CHeapAllocator::CHeapAllocator(char const*)>
   10e94:	e1a00006 	mov	r0, r6
   10e98:	eb000ce3 	bl	1422c <CPageAllocator::CPageAllocator()>
   10e9c:	e30936b8 	movw	r3, #38584	; 0x96b8
   10ea0:	e3403001 	movt	r3, #1
   10ea4:	e5845194 	str	r5, [r4, #404]	; 0x194
   10ea8:	e5935000 	ldr	r5, [r3]
   10eac:	e3550000 	cmp	r5, #0
   10eb0:	0a000006 	beq	10ed0 <CMemorySystem::CMemorySystem(bool)+0x90>
   10eb4:	e1a00004 	mov	r0, r4
   10eb8:	e28dd028 	add	sp, sp, #40	; 0x28
   10ebc:	e1cd40d0 	ldrd	r4, [sp]
   10ec0:	e1cd60d8 	ldrd	r6, [sp, #8]
   10ec4:	e59d8010 	ldr	r8, [sp, #16]
   10ec8:	e28dd014 	add	sp, sp, #20
   10ecc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   10ed0:	e3a01001 	mov	r1, #1
   10ed4:	e28d000c 	add	r0, sp, #12
   10ed8:	e5834000 	str	r4, [r3]
   10edc:	eb000753 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   10ee0:	e3a03014 	mov	r3, #20
   10ee4:	e28d000c 	add	r0, sp, #12
   10ee8:	e58d5000 	str	r5, [sp]
   10eec:	e3a01005 	mov	r1, #5
   10ef0:	e3401001 	movt	r1, #1
   10ef4:	e08d2003 	add	r2, sp, r3
   10ef8:	eb00075e 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   10efc:	e3500000 	cmp	r0, #0
   10f00:	0a000018 	beq	10f68 <CMemorySystem::CMemorySystem(bool)+0x128>
   10f04:	e59d3020 	ldr	r3, [sp, #32]
   10f08:	e3530000 	cmp	r3, #0
   10f0c:	1a00002e 	bne	10fcc <CMemorySystem::CMemorySystem(bool)+0x18c>
   10f10:	e59d3024 	ldr	r3, [sp, #36]	; 0x24
   10f14:	e2435501 	sub	r5, r3, #4194304	; 0x400000
   10f18:	e2432503 	sub	r2, r3, #12582912	; 0xc00000
   10f1c:	e3a01502 	mov	r1, #8388608	; 0x800000
   10f20:	e1a00007 	mov	r0, r7
   10f24:	e5843004 	str	r3, [r4, #4]
   10f28:	e3a03701 	mov	r3, #262144	; 0x40000
   10f2c:	ebfffa25 	bl	f7c8 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   10f30:	ebffe6f9 	bl	ab1c <CMachineInfo::Get()>
   10f34:	ebffe567 	bl	a4d8 <CMachineInfo::GetRAMSize() const>
   10f38:	e3500b01 	cmp	r0, #1024	; 0x400
   10f3c:	8a000018 	bhi	10fa4 <CMemorySystem::CMemorySystem(bool)+0x164>
   10f40:	e1a01005 	mov	r1, r5
   10f44:	e1a00006 	mov	r0, r6
   10f48:	e3a02501 	mov	r2, #4194304	; 0x400000
   10f4c:	eb000cbe 	bl	1424c <CPageAllocator::Setup(unsigned int, unsigned int)>
   10f50:	e5d43000 	ldrb	r3, [r4]
   10f54:	e3530000 	cmp	r3, #0
   10f58:	1a000008 	bne	10f80 <CMemorySystem::CMemorySystem(bool)+0x140>
   10f5c:	e28d000c 	add	r0, sp, #12
   10f60:	eb00073c 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   10f64:	eaffffd2 	b	10eb4 <CMemorySystem::CMemorySystem(bool)+0x74>
   10f68:	e3a01303 	mov	r1, #201326592	; 0xc000000
   10f6c:	e3a0252d 	mov	r2, #188743680	; 0xb400000
   10f70:	e1a03001 	mov	r3, r1
   10f74:	e3a0552f 	mov	r5, #197132288	; 0xbc00000
   10f78:	e1cd02f0 	strd	r0, [sp, #32]
   10f7c:	eaffffe6 	b	10f1c <CMemorySystem::CMemorySystem(bool)+0xdc>
   10f80:	e3a00008 	mov	r0, #8
   10f84:	ebfff9c5 	bl	f6a0 <operator new(unsigned int)>
   10f88:	e1a05000 	mov	r5, r0
   10f8c:	e5941004 	ldr	r1, [r4, #4]
   10f90:	eb00008b 	bl	111c4 <CPageTable::CPageTable(unsigned int)>
   10f94:	e1a00004 	mov	r0, r4
   10f98:	e5845194 	str	r5, [r4, #404]	; 0x194
   10f9c:	eb000050 	bl	110e4 <CMemorySystem::EnableMMU()>
   10fa0:	eaffffed 	b	10f5c <CMemorySystem::CMemorySystem(bool)+0x11c>
   10fa4:	e2402b01 	sub	r2, r0, #1024	; 0x400
   10fa8:	e3a03000 	mov	r3, #0
   10fac:	e1a02a02 	lsl	r2, r2, #20
   10fb0:	e1a00008 	mov	r0, r8
   10fb4:	e3a01101 	mov	r1, #1073741824	; 0x40000000
   10fb8:	e3520102 	cmp	r2, #-2147483648	; 0x80000000
   10fbc:	23a02102 	movcs	r2, #-2147483648	; 0x80000000
   10fc0:	e5842008 	str	r2, [r4, #8]
   10fc4:	ebfff9ff 	bl	f7c8 <CHeapAllocator::Setup(unsigned int, unsigned int, unsigned int)>
   10fc8:	eaffffdc 	b	10f40 <CMemorySystem::CMemorySystem(bool)+0x100>
   10fcc:	e59f100c 	ldr	r1, [pc, #12]	; 10fe0 <CMemorySystem::CMemorySystem(bool)+0x1a0>
   10fd0:	e3a0204e 	mov	r2, #78	; 0x4e
   10fd4:	e281000c 	add	r0, r1, #12
   10fd8:	ebffddd3 	bl	872c <assertion_failed>
   10fdc:	0001624c 	.word	0x0001624c
   10fe0:	00016258 	.word	0x00016258

00010fe4 <CMemorySystem::~CMemorySystem()>:
   10fe4:	e30936b8 	movw	r3, #38584	; 0x96b8
   10fe8:	e3403001 	movt	r3, #1
   10fec:	e52d4008 	str	r4, [sp, #-8]!
   10ff0:	e5932000 	ldr	r2, [r3]
   10ff4:	e1a04000 	mov	r4, r0
   10ff8:	e58de004 	str	lr, [sp, #4]
   10ffc:	e1500002 	cmp	r0, r2
   11000:	0a000009 	beq	1102c <CMemorySystem::~CMemorySystem()+0x48>
   11004:	e2840f61 	add	r0, r4, #388	; 0x184
   11008:	eb000c8e 	bl	14248 <CPageAllocator::~CPageAllocator()>
   1100c:	e28400c8 	add	r0, r4, #200	; 0xc8
   11010:	ebfff9eb 	bl	f7c4 <CHeapAllocator::~CHeapAllocator()>
   11014:	e284000c 	add	r0, r4, #12
   11018:	ebfff9e9 	bl	f7c4 <CHeapAllocator::~CHeapAllocator()>
   1101c:	e1a00004 	mov	r0, r4
   11020:	e59d4000 	ldr	r4, [sp]
   11024:	e28dd004 	add	sp, sp, #4
   11028:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1102c:	e5d02000 	ldrb	r2, [r0]
   11030:	e3a01000 	mov	r1, #0
   11034:	e5831000 	str	r1, [r3]
   11038:	e1520001 	cmp	r2, r1
   1103c:	0afffff0 	beq	11004 <CMemorySystem::~CMemorySystem()+0x20>
   11040:	eb000052 	bl	11190 <CMemorySystem::Destructor() [clone .part.0]>
   11044:	eaffffee 	b	11004 <CMemorySystem::~CMemorySystem()+0x20>

00011048 <CMemorySystem::Destructor()>:
   11048:	e30936b8 	movw	r3, #38584	; 0x96b8
   1104c:	e3403001 	movt	r3, #1
   11050:	e5932000 	ldr	r2, [r3]
   11054:	e1520000 	cmp	r2, r0
   11058:	0a000000 	beq	11060 <CMemorySystem::Destructor()+0x18>
   1105c:	e12fff1e 	bx	lr
   11060:	e5d22000 	ldrb	r2, [r2]
   11064:	e3a01000 	mov	r1, #0
   11068:	e5831000 	str	r1, [r3]
   1106c:	e1520001 	cmp	r2, r1
   11070:	0afffff9 	beq	1105c <CMemorySystem::Destructor()+0x14>
   11074:	ea000045 	b	11190 <CMemorySystem::Destructor() [clone .part.0]>

00011078 <CMemorySystem::GetMemSize() const>:
   11078:	e30936b8 	movw	r3, #38584	; 0x96b8
   1107c:	e3403001 	movt	r3, #1
   11080:	e5933000 	ldr	r3, [r3]
   11084:	e3530000 	cmp	r3, #0
   11088:	0a000002 	beq	11098 <CMemorySystem::GetMemSize() const+0x20>
   1108c:	e9930009 	ldmib	r3, {r0, r3}
   11090:	e0800003 	add	r0, r0, r3
   11094:	e12fff1e 	bx	lr
   11098:	e59f1010 	ldr	r1, [pc, #16]	; 110b0 <CMemorySystem::GetMemSize() const+0x38>
   1109c:	e3a020a0 	mov	r2, #160	; 0xa0
   110a0:	e52d4008 	str	r4, [sp, #-8]!
   110a4:	e58de004 	str	lr, [sp, #4]
   110a8:	e2810028 	add	r0, r1, #40	; 0x28
   110ac:	ebffdd9e 	bl	872c <assertion_failed>
   110b0:	00016258 	.word	0x00016258

000110b4 <CMemorySystem::Get()>:
   110b4:	e30936b8 	movw	r3, #38584	; 0x96b8
   110b8:	e3403001 	movt	r3, #1
   110bc:	e5930000 	ldr	r0, [r3]
   110c0:	e3500000 	cmp	r0, #0
   110c4:	112fff1e 	bxne	lr
   110c8:	e3a020a6 	mov	r2, #166	; 0xa6
   110cc:	e52d4008 	str	r4, [sp, #-8]!
   110d0:	e59f1008 	ldr	r1, [pc, #8]	; 110e0 <CMemorySystem::Get()+0x2c>
   110d4:	e58de004 	str	lr, [sp, #4]
   110d8:	e2810028 	add	r0, r1, #40	; 0x28
   110dc:	ebffdd92 	bl	872c <assertion_failed>
   110e0:	00016258 	.word	0x00016258

000110e4 <CMemorySystem::EnableMMU()>:
   110e4:	e5d03000 	ldrb	r3, [r0]
   110e8:	e52d4008 	str	r4, [sp, #-8]!
   110ec:	e58de004 	str	lr, [sp, #4]
   110f0:	e3530000 	cmp	r3, #0
   110f4:	0a000019 	beq	11160 <CMemorySystem::EnableMMU()+0x7c>
   110f8:	e30034ff 	movw	r3, #1279	; 0x4ff
   110fc:	ee0a3f12 	mcr	15, 0, r3, cr10, cr2, {0}
   11100:	e3a03c35 	mov	r3, #13568	; 0x3500
   11104:	e3483080 	movt	r3, #32896	; 0x8080
   11108:	ee023f50 	mcr	15, 0, r3, cr2, cr0, {2}
   1110c:	e5900194 	ldr	r0, [r0, #404]	; 0x194
   11110:	e3500000 	cmp	r0, #0
   11114:	0a000015 	beq	11170 <CMemorySystem::EnableMMU()+0x8c>
   11118:	eb000068 	bl	112c0 <CPageTable::GetBaseAddress() const>
   1111c:	ec410f02 	mcrr	15, 0, r0, r1, cr2
   11120:	e3a03001 	mov	r3, #1
   11124:	ee033f10 	mcr	15, 0, r3, cr3, cr0, {0}
   11128:	ebfffdcd 	bl	10864 <InvalidateDataCache>
   1112c:	e3a03000 	mov	r3, #0
   11130:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   11134:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   11138:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   1113c:	f57ff04f 	dsb	sy
   11140:	f57ff06f 	isb	sy
   11144:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   11148:	e3833b06 	orr	r3, r3, #6144	; 0x1800
   1114c:	e3833005 	orr	r3, r3, #5
   11150:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   11154:	e59d4000 	ldr	r4, [sp]
   11158:	e28dd004 	add	sp, sp, #4
   1115c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11160:	e59f1018 	ldr	r1, [pc, #24]	; 11180 <CMemorySystem::EnableMMU()+0x9c>
   11164:	e3a020ac 	mov	r2, #172	; 0xac
   11168:	e2810038 	add	r0, r1, #56	; 0x38
   1116c:	ebffdd6e 	bl	872c <assertion_failed>
   11170:	e59f1008 	ldr	r1, [pc, #8]	; 11180 <CMemorySystem::EnableMMU()+0x9c>
   11174:	e3a020d3 	mov	r2, #211	; 0xd3
   11178:	e2810048 	add	r0, r1, #72	; 0x48
   1117c:	ebffdd6a 	bl	872c <assertion_failed>
   11180:	00016258 	.word	0x00016258

00011184 <CMemorySystem::GetCoherentPage(unsigned int)>:
   11184:	e1a00600 	lsl	r0, r0, #12
   11188:	e2800501 	add	r0, r0, #4194304	; 0x400000
   1118c:	e12fff1e 	bx	lr

00011190 <CMemorySystem::Destructor() [clone .part.0]>:
   11190:	e52d4008 	str	r4, [sp, #-8]!
   11194:	e58de004 	str	lr, [sp, #4]
   11198:	ee113f10 	mrc	15, 0, r3, cr1, cr0, {0}
   1119c:	e3c33005 	bic	r3, r3, #5
   111a0:	ee013f10 	mcr	15, 0, r3, cr1, cr0, {0}
   111a4:	ebfffdd8 	bl	1090c <CleanDataCache>
   111a8:	ebfffdad 	bl	10864 <InvalidateDataCache>
   111ac:	e3a03000 	mov	r3, #0
   111b0:	ee083f17 	mcr	15, 0, r3, cr8, cr7, {0}
   111b4:	f57ff04f 	dsb	sy
   111b8:	e59d4000 	ldr	r4, [sp]
   111bc:	e28dd004 	add	sp, sp, #4
   111c0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000111c4 <CPageTable::CPageTable(unsigned int)>:
   111c4:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
   111c8:	e1a05000 	mov	r5, r0
   111cc:	e3a009ba 	mov	r0, #3047424	; 0x2e8000
   111d0:	e3a04000 	mov	r4, #0
   111d4:	e3a02a01 	mov	r2, #4096	; 0x1000
   111d8:	e1cd60f8 	strd	r6, [sp, #8]
   111dc:	e1cd81f0 	strd	r8, [sp, #16]
   111e0:	e3a06000 	mov	r6, #0
   111e4:	e3a07000 	mov	r7, #0
   111e8:	e1cda1f8 	strd	sl, [sp, #24]
   111ec:	e1a08004 	mov	r8, r4
   111f0:	e3a09003 	mov	r9, #3
   111f4:	e58de020 	str	lr, [sp, #32]
   111f8:	e24dd004 	sub	sp, sp, #4
   111fc:	e5851000 	str	r1, [r5]
   11200:	e1a01004 	mov	r1, r4
   11204:	e5850004 	str	r0, [r5, #4]
   11208:	ebfff5f6 	bl	e9e8 <memset>
   1120c:	e1a02006 	mov	r2, r6
   11210:	e1a03007 	mov	r3, r7
   11214:	e1a00005 	mov	r0, r5
   11218:	eb00002b 	bl	112cc <CPageTable::CreateLevel2Table(unsigned long long)>
   1121c:	e3500000 	cmp	r0, #0
   11220:	0a000020 	beq	112a8 <CPageTable::CPageTable(unsigned int)+0xe4>
   11224:	e1a01fc0 	asr	r1, r0, #31
   11228:	e595c004 	ldr	ip, [r5, #4]
   1122c:	e2966101 	adds	r6, r6, #1073741824	; 0x40000000
   11230:	e1a0a620 	lsr	sl, r0, #12
   11234:	e2a77000 	adc	r7, r7, #0
   11238:	e3570001 	cmp	r7, #1
   1123c:	e18aaa01 	orr	sl, sl, r1, lsl #20
   11240:	03560000 	cmpeq	r6, #0
   11244:	e1a0220a 	lsl	r2, sl, #4
   11248:	e7cc9004 	strb	r9, [ip, r4]
   1124c:	e08cc004 	add	ip, ip, r4
   11250:	e1a0a820 	lsr	sl, r0, #16
   11254:	e2844008 	add	r4, r4, #8
   11258:	e1a00c20 	lsr	r0, r0, #24
   1125c:	e18aa801 	orr	sl, sl, r1, lsl #16
   11260:	e5cc2001 	strb	r2, [ip, #1]
   11264:	e1800401 	orr	r0, r0, r1, lsl #8
   11268:	e5cca002 	strb	sl, [ip, #2]
   1126c:	e5cc0003 	strb	r0, [ip, #3]
   11270:	e5cc1004 	strb	r1, [ip, #4]
   11274:	e5cc8005 	strb	r8, [ip, #5]
   11278:	e5cc8006 	strb	r8, [ip, #6]
   1127c:	e5cc8007 	strb	r8, [ip, #7]
   11280:	1affffe1 	bne	1120c <CPageTable::CPageTable(unsigned int)+0x48>
   11284:	f57ff04f 	dsb	sy
   11288:	e1a00005 	mov	r0, r5
   1128c:	e28dd004 	add	sp, sp, #4
   11290:	e1cd40d0 	ldrd	r4, [sp]
   11294:	e1cd60d8 	ldrd	r6, [sp, #8]
   11298:	e1cd81d0 	ldrd	r8, [sp, #16]
   1129c:	e1cda1d8 	ldrd	sl, [sp, #24]
   112a0:	e28dd020 	add	sp, sp, #32
   112a4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   112a8:	e30612b4 	movw	r1, #25268	; 0x62b4
   112ac:	e3401001 	movt	r1, #1
   112b0:	e2810010 	add	r0, r1, #16
   112b4:	e3a0206f 	mov	r2, #111	; 0x6f
   112b8:	ebffdd1b 	bl	872c <assertion_failed>

000112bc <CPageTable::~CPageTable()>:
   112bc:	e12fff1e 	bx	lr

000112c0 <CPageTable::GetBaseAddress() const>:
   112c0:	e5900004 	ldr	r0, [r0, #4]
   112c4:	e1a01fc0 	asr	r1, r0, #31
   112c8:	e12fff1e 	bx	lr

000112cc <CPageTable::CreateLevel2Table(unsigned long long)>:
   112cc:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
   112d0:	e1a05003 	mov	r5, r3
   112d4:	e1a04002 	mov	r4, r2
   112d8:	e1cd60f8 	strd	r6, [sp, #8]
   112dc:	e1cd81f0 	strd	r8, [sp, #16]
   112e0:	e1a09000 	mov	r9, r0
   112e4:	e1cda1f8 	strd	sl, [sp, #24]
   112e8:	e58de020 	str	lr, [sp, #32]
   112ec:	e24dd00c 	sub	sp, sp, #12
   112f0:	eb000476 	bl	124d0 <palloc>
   112f4:	e2503000 	subs	r3, r0, #0
   112f8:	e58d3004 	str	r3, [sp, #4]
   112fc:	0a00005f 	beq	11480 <CPageTable::CreateLevel2Table(unsigned long long)+0x1b4>
   11300:	e3053400 	movw	r3, #21504	; 0x5400
   11304:	e3403001 	movt	r3, #1
   11308:	e58d9000 	str	r9, [sp]
   1130c:	e294a101 	adds	sl, r4, #1073741824	; 0x40000000
   11310:	e3a0c001 	mov	ip, #1
   11314:	ee803b90 	vdup.32	d16, r3
   11318:	e2a5b000 	adc	fp, r5, #0
   1131c:	e3a0e007 	mov	lr, #7
   11320:	e3a02000 	mov	r2, #0
   11324:	e59d3004 	ldr	r3, [sp, #4]
   11328:	f2e000b0 	vshr.s64	d16, d16, #32
   1132c:	ec510b30 	vmov	r0, r1, d16
   11330:	e1a06000 	mov	r6, r0
   11334:	e1a07001 	mov	r7, r1
   11338:	ea000011 	b	11384 <CPageTable::CreateLevel2Table(unsigned long long)+0xb8>
   1133c:	e2540501 	subs	r0, r4, #4194304	; 0x400000
   11340:	e2c51000 	sbc	r1, r5, #0
   11344:	e3510000 	cmp	r1, #0
   11348:	03500501 	cmpeq	r0, #4194304	; 0x400000
   1134c:	2a000006 	bcs	1136c <CPageTable::CreateLevel2Table(unsigned long long)+0xa0>
   11350:	e3a08002 	mov	r8, #2
   11354:	e3a00001 	mov	r0, #1
   11358:	e3a01007 	mov	r1, #7
   1135c:	e7c40118 	bfi	r0, r8, #2, #3
   11360:	e7c11018 	bfi	r1, r8, #0, #2
   11364:	e5c30000 	strb	r0, [r3]
   11368:	e5c31001 	strb	r1, [r3, #1]
   1136c:	e2944602 	adds	r4, r4, #2097152	; 0x200000
   11370:	e2833008 	add	r3, r3, #8
   11374:	e2a55000 	adc	r5, r5, #0
   11378:	e155000b 	cmp	r5, fp
   1137c:	0154000a 	cmpeq	r4, sl
   11380:	0a000036 	beq	11460 <CPageTable::CreateLevel2Table(unsigned long long)+0x194>
   11384:	e1a00aa4 	lsr	r0, r4, #21
   11388:	e1570005 	cmp	r7, r5
   1138c:	e5c3c000 	strb	ip, [r3]
   11390:	01560004 	cmpeq	r6, r4
   11394:	e5c3e001 	strb	lr, [r3, #1]
   11398:	e1800585 	orr	r0, r0, r5, lsl #11
   1139c:	e5c35004 	strb	r5, [r3, #4]
   113a0:	e5c32005 	strb	r2, [r3, #5]
   113a4:	e1a09280 	lsl	r9, r0, #5
   113a8:	e1a00c24 	lsr	r0, r4, #24
   113ac:	e1800405 	orr	r0, r0, r5, lsl #8
   113b0:	e5c39002 	strb	r9, [r3, #2]
   113b4:	e5c32006 	strb	r2, [r3, #6]
   113b8:	e5c32007 	strb	r2, [r3, #7]
   113bc:	e5c30003 	strb	r0, [r3, #3]
   113c0:	8affffe9 	bhi	1136c <CPageTable::CreateLevel2Table(unsigned long long)+0xa0>
   113c4:	e59d1000 	ldr	r1, [sp]
   113c8:	e3a09000 	mov	r9, #0
   113cc:	e3e08103 	mvn	r8, #-1073741824	; 0xc0000000
   113d0:	e5910000 	ldr	r0, [r1]
   113d4:	e3a01020 	mov	r1, #32
   113d8:	e5c31006 	strb	r1, [r3, #6]
   113dc:	e3a01000 	mov	r1, #0
   113e0:	e1510005 	cmp	r1, r5
   113e4:	01500004 	cmpeq	r0, r4
   113e8:	93a01001 	movls	r1, #1
   113ec:	83a01000 	movhi	r1, #0
   113f0:	e1550009 	cmp	r5, r9
   113f4:	01540008 	cmpeq	r4, r8
   113f8:	83a01000 	movhi	r1, #0
   113fc:	92011001 	andls	r1, r1, #1
   11400:	e3510000 	cmp	r1, #0
   11404:	1a000004 	bne	1141c <CPageTable::CreateLevel2Table(unsigned long long)+0x150>
   11408:	e3a01000 	mov	r1, #0
   1140c:	e3e00101 	mvn	r0, #1073741824	; 0x40000000
   11410:	e1550001 	cmp	r5, r1
   11414:	01540000 	cmpeq	r4, r0
   11418:	9affffc7 	bls	1133c <CPageTable::CreateLevel2Table(unsigned long long)+0x70>
   1141c:	e5d30000 	ldrb	r0, [r3]
   11420:	e3a08002 	mov	r8, #2
   11424:	e3550000 	cmp	r5, #0
   11428:	035404fa 	cmpeq	r4, #-100663296	; 0xfa000000
   1142c:	e5d31001 	ldrb	r1, [r3, #1]
   11430:	e7c4011c 	bfi	r0, ip, #2, #3
   11434:	e7c11018 	bfi	r1, r8, #0, #2
   11438:	e5c30000 	strb	r0, [r3]
   1143c:	e5c31001 	strb	r1, [r3, #1]
   11440:	1affffc9 	bne	1136c <CPageTable::CreateLevel2Table(unsigned long long)+0xa0>
   11444:	e5d31002 	ldrb	r1, [r3, #2]
   11448:	e3a00006 	mov	r0, #6
   1144c:	e5c32003 	strb	r2, [r3, #3]
   11450:	e5c30004 	strb	r0, [r3, #4]
   11454:	e201101f 	and	r1, r1, #31
   11458:	e5c31002 	strb	r1, [r3, #2]
   1145c:	eaffffc2 	b	1136c <CPageTable::CreateLevel2Table(unsigned long long)+0xa0>
   11460:	e59d0004 	ldr	r0, [sp, #4]
   11464:	e28dd00c 	add	sp, sp, #12
   11468:	e1cd40d0 	ldrd	r4, [sp]
   1146c:	e1cd60d8 	ldrd	r6, [sp, #8]
   11470:	e1cd81d0 	ldrd	r8, [sp, #16]
   11474:	e1cda1d8 	ldrd	sl, [sp, #24]
   11478:	e28dd020 	add	sp, sp, #32
   1147c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11480:	e30612b4 	movw	r1, #25268	; 0x62b4
   11484:	e3401001 	movt	r1, #1
   11488:	e2810010 	add	r0, r1, #16
   1148c:	e3a0208e 	mov	r2, #142	; 0x8e
   11490:	ebffdca5 	bl	872c <assertion_failed>

00011494 <CurrentExecutionLevel>:
   11494:	e10f0000 	mrs	r0, CPSR
   11498:	e3100040 	tst	r0, #64	; 0x40
   1149c:	07e003d0 	ubfxeq	r0, r0, #7, #1
   114a0:	13a00002 	movne	r0, #2
   114a4:	e12fff1e 	bx	lr

000114a8 <EnterCritical>:
   114a8:	e2403001 	sub	r3, r0, #1
   114ac:	e52d4008 	str	r4, [sp, #-8]!
   114b0:	e3530001 	cmp	r3, #1
   114b4:	e58de004 	str	lr, [sp, #4]
   114b8:	8a000014 	bhi	11510 <EnterCritical+0x68>
   114bc:	e10f1000 	mrs	r1, CPSR
   114c0:	e3500002 	cmp	r0, #2
   114c4:	1a000017 	bne	11528 <EnterCritical+0x80>
   114c8:	f10c00c0 	cpsid	if
   114cc:	e30936bc 	movw	r3, #38588	; 0x96bc
   114d0:	e3403001 	movt	r3, #1
   114d4:	e5932000 	ldr	r2, [r3]
   114d8:	e3520013 	cmp	r2, #19
   114dc:	8a000019 	bhi	11548 <EnterCritical+0xa0>
   114e0:	e5932000 	ldr	r2, [r3]
   114e4:	e3500001 	cmp	r0, #1
   114e8:	e0830102 	add	r0, r3, r2, lsl #2
   114ec:	e2822001 	add	r2, r2, #1
   114f0:	e5832000 	str	r2, [r3]
   114f4:	e5801004 	str	r1, [r0, #4]
   114f8:	1a000000 	bne	11500 <EnterCritical+0x58>
   114fc:	f1080040 	cpsie	f
   11500:	f57ff05f 	dmb	sy
   11504:	e59d4000 	ldr	r4, [sp]
   11508:	e28dd004 	add	sp, sp, #4
   1150c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11510:	e30612d0 	movw	r1, #25296	; 0x62d0
   11514:	e3401001 	movt	r1, #1
   11518:	e30602e0 	movw	r0, #25312	; 0x62e0
   1151c:	e3400001 	movt	r0, #1
   11520:	e3a02064 	mov	r2, #100	; 0x64
   11524:	ebffdc80 	bl	872c <assertion_failed>
   11528:	e3110040 	tst	r1, #64	; 0x40
   1152c:	0affffe5 	beq	114c8 <EnterCritical+0x20>
   11530:	e30612d0 	movw	r1, #25296	; 0x62d0
   11534:	e3401001 	movt	r1, #1
   11538:	e3060318 	movw	r0, #25368	; 0x6318
   1153c:	e3400001 	movt	r0, #1
   11540:	e3a0206a 	mov	r2, #106	; 0x6a
   11544:	ebffdc78 	bl	872c <assertion_failed>
   11548:	e30612d0 	movw	r1, #25296	; 0x62d0
   1154c:	e3401001 	movt	r1, #1
   11550:	e3060348 	movw	r0, #25416	; 0x6348
   11554:	e3400001 	movt	r0, #1
   11558:	e3a0206e 	mov	r2, #110	; 0x6e
   1155c:	ebffdc72 	bl	872c <assertion_failed>

00011560 <LeaveCritical>:
   11560:	f57ff05f 	dmb	sy
   11564:	f10c0040 	cpsid	f
   11568:	e30936bc 	movw	r3, #38588	; 0x96bc
   1156c:	e3403001 	movt	r3, #1
   11570:	e5932000 	ldr	r2, [r3]
   11574:	e3520000 	cmp	r2, #0
   11578:	0a000006 	beq	11598 <LeaveCritical+0x38>
   1157c:	e5932000 	ldr	r2, [r3]
   11580:	e2422001 	sub	r2, r2, #1
   11584:	e0831102 	add	r1, r3, r2, lsl #2
   11588:	e5832000 	str	r2, [r3]
   1158c:	e5913004 	ldr	r3, [r1, #4]
   11590:	e121f003 	msr	CPSR_c, r3
   11594:	e12fff1e 	bx	lr
   11598:	e30612d0 	movw	r1, #25296	; 0x62d0
   1159c:	e3401001 	movt	r1, #1
   115a0:	e52d4008 	str	r4, [sp, #-8]!
   115a4:	e3060370 	movw	r0, #25456	; 0x6370
   115a8:	e3400001 	movt	r0, #1
   115ac:	e58de004 	str	lr, [sp, #4]
   115b0:	e3a0207f 	mov	r2, #127	; 0x7f
   115b4:	ebffdc5c 	bl	872c <assertion_failed>

000115b8 <SyncDataAndInstructionCache>:
   115b8:	e52d4008 	str	r4, [sp, #-8]!
   115bc:	e58de004 	str	lr, [sp, #4]
   115c0:	ebfffcd1 	bl	1090c <CleanDataCache>
   115c4:	e3a03000 	mov	r3, #0
   115c8:	ee073f15 	mcr	15, 0, r3, cr7, cr5, {0}
   115cc:	ee073fd5 	mcr	15, 0, r3, cr7, cr5, {6}
   115d0:	f57ff04f 	dsb	sy
   115d4:	f57ff06f 	isb	sy
   115d8:	e59d4000 	ldr	r4, [sp]
   115dc:	e28dd004 	add	sp, sp, #4
   115e0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000115e4 <CInterruptSystem::CInterruptSystem()>:
   115e4:	e3a02000 	mov	r2, #0
   115e8:	e2403004 	sub	r3, r0, #4
   115ec:	e2801fff 	add	r1, r0, #1020	; 0x3fc
   115f0:	e5a32004 	str	r2, [r3, #4]!
   115f4:	e1530001 	cmp	r3, r1
   115f8:	e5832400 	str	r2, [r3, #1024]	; 0x400
   115fc:	1afffffb 	bne	115f0 <CInterruptSystem::CInterruptSystem()+0xc>
   11600:	e3093710 	movw	r3, #38672	; 0x9710
   11604:	e3403001 	movt	r3, #1
   11608:	e5830000 	str	r0, [r3]
   1160c:	e12fff1e 	bx	lr

00011610 <CInterruptSystem::~CInterruptSystem()>:
   11610:	f10c0080 	cpsid	i
   11614:	e3a02000 	mov	r2, #0
   11618:	e3011fff 	movw	r1, #8191	; 0x1fff
   1161c:	e34f1f84 	movt	r1, #65412	; 0xff84
   11620:	e3093710 	movw	r3, #38672	; 0x9710
   11624:	e3403001 	movt	r3, #1
   11628:	e5012fff 	str	r2, [r1, #-4095]	; 0xfffff001
   1162c:	e5832000 	str	r2, [r3]
   11630:	e12fff1e 	bx	lr

00011634 <CInterruptSystem::Initialize()>:
   11634:	e3001dd0 	movw	r1, #3536	; 0xdd0
   11638:	e3401001 	movt	r1, #1
   1163c:	e52d4008 	str	r4, [sp, #-8]!
   11640:	e3002de8 	movw	r2, #3560	; 0xde8
   11644:	e3402001 	movt	r2, #1
   11648:	e58de004 	str	lr, [sp, #4]
   1164c:	e3003e1c 	movw	r3, #3612	; 0xe1c
   11650:	e3403001 	movt	r3, #1
   11654:	e2411018 	sub	r1, r1, #24
   11658:	e242201c 	sub	r2, r2, #28
   1165c:	e2433008 	sub	r3, r3, #8
   11660:	e1a01141 	asr	r1, r1, #2
   11664:	e3a04000 	mov	r4, #0
   11668:	e1a02142 	asr	r2, r2, #2
   1166c:	e1a03143 	asr	r3, r3, #2
   11670:	e2411002 	sub	r1, r1, #2
   11674:	e2422002 	sub	r2, r2, #2
   11678:	e38114ea 	orr	r1, r1, #-369098752	; 0xea000000
   1167c:	e2433002 	sub	r3, r3, #2
   11680:	e38224ea 	orr	r2, r2, #-369098752	; 0xea000000
   11684:	e38334ea 	orr	r3, r3, #-369098752	; 0xea000000
   11688:	e5843008 	str	r3, [r4, #8]
   1168c:	e5841018 	str	r1, [r4, #24]
   11690:	e584201c 	str	r2, [r4, #28]
   11694:	ebffffc7 	bl	115b8 <SyncDataAndInstructionCache>
   11698:	e3012fff 	movw	r2, #8191	; 0x1fff
   1169c:	e34f2f84 	movt	r2, #65412	; 0xff84
   116a0:	e3a03d46 	mov	r3, #4480	; 0x1180
   116a4:	e34f3f84 	movt	r3, #65412	; 0xff84
   116a8:	e30111a0 	movw	r1, #4512	; 0x11a0
   116ac:	e34f1f84 	movt	r1, #65412	; 0xff84
   116b0:	e5024fff 	str	r4, [r2, #-4095]	; 0xfffff001
   116b4:	e3e02000 	mvn	r2, #0
   116b8:	e2833004 	add	r3, r3, #4
   116bc:	e5032004 	str	r2, [r3, #-4]
   116c0:	e58320fc 	str	r2, [r3, #252]	; 0xfc
   116c4:	e58321fc 	str	r2, [r3, #508]	; 0x1fc
   116c8:	e1530001 	cmp	r3, r1
   116cc:	1afffff9 	bne	116b8 <CInterruptSystem::Initialize()+0x84>
   116d0:	e3a03b05 	mov	r3, #5120	; 0x1400
   116d4:	e34f3f84 	movt	r3, #65412	; 0xff84
   116d8:	e30a00a0 	movw	r0, #41120	; 0xa0a0
   116dc:	e34a00a0 	movt	r0, #41120	; 0xa0a0
   116e0:	e3001101 	movw	r1, #257	; 0x101
   116e4:	e3401101 	movt	r1, #257	; 0x101
   116e8:	e3a02c15 	mov	r2, #5376	; 0x1500
   116ec:	e34f2f84 	movt	r2, #65412	; 0xff84
   116f0:	e2833004 	add	r3, r3, #4
   116f4:	e5030004 	str	r0, [r3, #-4]
   116f8:	e58313fc 	str	r1, [r3, #1020]	; 0x3fc
   116fc:	e1530002 	cmp	r3, r2
   11700:	1afffffa 	bne	116f0 <CInterruptSystem::Initialize()+0xbc>
   11704:	e3a03b07 	mov	r3, #7168	; 0x1c00
   11708:	e34f3f84 	movt	r3, #65412	; 0xff84
   1170c:	e3a02d71 	mov	r2, #7232	; 0x1c40
   11710:	e34f2f84 	movt	r2, #65412	; 0xff84
   11714:	e3a01000 	mov	r1, #0
   11718:	e4831004 	str	r1, [r3], #4
   1171c:	e1530002 	cmp	r3, r2
   11720:	1afffffc 	bne	11718 <CInterruptSystem::Initialize()+0xe4>
   11724:	e3a00001 	mov	r0, #1
   11728:	e3a010f0 	mov	r1, #240	; 0xf0
   1172c:	e3012fff 	movw	r2, #8191	; 0x1fff
   11730:	e34f2f84 	movt	r2, #65412	; 0xff84
   11734:	e3023fff 	movw	r3, #12287	; 0x2fff
   11738:	e34f3f84 	movt	r3, #65412	; 0xff84
   1173c:	e5020fff 	str	r0, [r2, #-4095]	; 0xfffff001
   11740:	e5031ffb 	str	r1, [r3, #-4091]	; 0xfffff005
   11744:	e5030fff 	str	r0, [r3, #-4095]	; 0xfffff001
   11748:	f1080080 	cpsie	i
   1174c:	e59d4000 	ldr	r4, [sp]
   11750:	e28dd004 	add	sp, sp, #4
   11754:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011758 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>:
   11758:	e35100ff 	cmp	r1, #255	; 0xff
   1175c:	e52d4008 	str	r4, [sp, #-8]!
   11760:	e58de004 	str	lr, [sp, #4]
   11764:	8a000010 	bhi	117ac <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x54>
   11768:	e790c101 	ldr	ip, [r0, r1, lsl #2]
   1176c:	e080e101 	add	lr, r0, r1, lsl #2
   11770:	e35c0000 	cmp	ip, #0
   11774:	1a000012 	bne	117c4 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)+0x6c>
   11778:	e3a0cd11 	mov	ip, #1088	; 0x440
   1177c:	e343cfe1 	movt	ip, #16353	; 0x3fe1
   11780:	e7802101 	str	r2, [r0, r1, lsl #2]
   11784:	e08cc2a1 	add	ip, ip, r1, lsr #5
   11788:	e3a02001 	mov	r2, #1
   1178c:	e201101f 	and	r1, r1, #31
   11790:	e1a01112 	lsl	r1, r2, r1
   11794:	e59d4000 	ldr	r4, [sp]
   11798:	e28dd004 	add	sp, sp, #4
   1179c:	e1a0c10c 	lsl	ip, ip, #2
   117a0:	e58e3400 	str	r3, [lr, #1024]	; 0x400
   117a4:	e58c1000 	str	r1, [ip]
   117a8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   117ac:	e3061388 	movw	r1, #25480	; 0x6388
   117b0:	e3401001 	movt	r1, #1
   117b4:	e306039c 	movw	r0, #25500	; 0x639c
   117b8:	e3400001 	movt	r0, #1
   117bc:	e3a020b2 	mov	r2, #178	; 0xb2
   117c0:	ebffdbd9 	bl	872c <assertion_failed>
   117c4:	e3061388 	movw	r1, #25480	; 0x6388
   117c8:	e3401001 	movt	r1, #1
   117cc:	e30603b0 	movw	r0, #25520	; 0x63b0
   117d0:	e3400001 	movt	r0, #1
   117d4:	e3a020b3 	mov	r2, #179	; 0xb3
   117d8:	ebffdbd3 	bl	872c <assertion_failed>

000117dc <CInterruptSystem::DisconnectIRQ(unsigned int)>:
   117dc:	e35100ff 	cmp	r1, #255	; 0xff
   117e0:	e52d4008 	str	r4, [sp, #-8]!
   117e4:	e58de004 	str	lr, [sp, #4]
   117e8:	8a000011 	bhi	11834 <CInterruptSystem::DisconnectIRQ(unsigned int)+0x58>
   117ec:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   117f0:	e080e101 	add	lr, r0, r1, lsl #2
   117f4:	e3530000 	cmp	r3, #0
   117f8:	0a000013 	beq	1184c <CInterruptSystem::DisconnectIRQ(unsigned int)+0x70>
   117fc:	e3a03e46 	mov	r3, #1120	; 0x460
   11800:	e3433fe1 	movt	r3, #16353	; 0x3fe1
   11804:	e59d4000 	ldr	r4, [sp]
   11808:	e08332a1 	add	r3, r3, r1, lsr #5
   1180c:	e201c01f 	and	ip, r1, #31
   11810:	e3a02001 	mov	r2, #1
   11814:	e1a02c12 	lsl	r2, r2, ip
   11818:	e3a0c000 	mov	ip, #0
   1181c:	e28dd004 	add	sp, sp, #4
   11820:	e1a03103 	lsl	r3, r3, #2
   11824:	e5832000 	str	r2, [r3]
   11828:	e780c101 	str	ip, [r0, r1, lsl #2]
   1182c:	e58ec400 	str	ip, [lr, #1024]	; 0x400
   11830:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11834:	e3061388 	movw	r1, #25480	; 0x6388
   11838:	e3401001 	movt	r1, #1
   1183c:	e306039c 	movw	r0, #25500	; 0x639c
   11840:	e3400001 	movt	r0, #1
   11844:	e3a020bd 	mov	r2, #189	; 0xbd
   11848:	ebffdbb7 	bl	872c <assertion_failed>
   1184c:	e3061388 	movw	r1, #25480	; 0x6388
   11850:	e3401001 	movt	r1, #1
   11854:	e30603cc 	movw	r0, #25548	; 0x63cc
   11858:	e3400001 	movt	r0, #1
   1185c:	e3a020be 	mov	r2, #190	; 0xbe
   11860:	ebffdbb1 	bl	872c <assertion_failed>

00011864 <CInterruptSystem::DisconnectFIQ()>:
   11864:	e3083068 	movw	r3, #32872	; 0x8068
   11868:	e3403001 	movt	r3, #1
   1186c:	e5932000 	ldr	r2, [r3]
   11870:	e3520000 	cmp	r2, #0
   11874:	0a000015 	beq	118d0 <CInterruptSystem::DisconnectFIQ()+0x6c>
   11878:	e5932008 	ldr	r2, [r3, #8]
   1187c:	e3520000 	cmp	r2, #0
   11880:	0a000008 	beq	118a8 <CInterruptSystem::DisconnectFIQ()+0x44>
   11884:	e3a0c001 	mov	ip, #1
   11888:	e1a0000c 	mov	r0, ip
   1188c:	e1a01002 	mov	r1, r2
   11890:	e1600070 	smc	0
   11894:	e3a02000 	mov	r2, #0
   11898:	e5c32008 	strb	r2, [r3, #8]
   1189c:	e5c32009 	strb	r2, [r3, #9]
   118a0:	e5c3200a 	strb	r2, [r3, #10]
   118a4:	e5c3200b 	strb	r2, [r3, #11]
   118a8:	e3a02000 	mov	r2, #0
   118ac:	e5c32000 	strb	r2, [r3]
   118b0:	e5c32001 	strb	r2, [r3, #1]
   118b4:	e5c32002 	strb	r2, [r3, #2]
   118b8:	e5c32003 	strb	r2, [r3, #3]
   118bc:	e5c32004 	strb	r2, [r3, #4]
   118c0:	e5c32005 	strb	r2, [r3, #5]
   118c4:	e5c32006 	strb	r2, [r3, #6]
   118c8:	e5c32007 	strb	r2, [r3, #7]
   118cc:	e12fff1e 	bx	lr
   118d0:	e3061388 	movw	r1, #25480	; 0x6388
   118d4:	e3401001 	movt	r1, #1
   118d8:	e52d4008 	str	r4, [sp, #-8]!
   118dc:	e30603e8 	movw	r0, #25576	; 0x63e8
   118e0:	e3400001 	movt	r0, #1
   118e4:	e58de004 	str	lr, [sp, #4]
   118e8:	e3a020d4 	mov	r2, #212	; 0xd4
   118ec:	ebffdb8e 	bl	872c <assertion_failed>

000118f0 <CInterruptSystem::EnableIRQ(unsigned int)>:
   118f0:	e35000ff 	cmp	r0, #255	; 0xff
   118f4:	8a000008 	bhi	1191c <CInterruptSystem::EnableIRQ(unsigned int)+0x2c>
   118f8:	e3a03d11 	mov	r3, #1088	; 0x440
   118fc:	e3433fe1 	movt	r3, #16353	; 0x3fe1
   11900:	e08332a0 	add	r3, r3, r0, lsr #5
   11904:	e3a02001 	mov	r2, #1
   11908:	e200001f 	and	r0, r0, #31
   1190c:	e1a00012 	lsl	r0, r2, r0
   11910:	e1a03103 	lsl	r3, r3, #2
   11914:	e5830000 	str	r0, [r3]
   11918:	e12fff1e 	bx	lr
   1191c:	e3061388 	movw	r1, #25480	; 0x6388
   11920:	e3401001 	movt	r1, #1
   11924:	e52d4008 	str	r4, [sp, #-8]!
   11928:	e306039c 	movw	r0, #25500	; 0x639c
   1192c:	e3400001 	movt	r0, #1
   11930:	e58de004 	str	lr, [sp, #4]
   11934:	e3a020de 	mov	r2, #222	; 0xde
   11938:	ebffdb7b 	bl	872c <assertion_failed>

0001193c <CInterruptSystem::DisableIRQ(unsigned int)>:
   1193c:	e35000ff 	cmp	r0, #255	; 0xff
   11940:	8a000008 	bhi	11968 <CInterruptSystem::DisableIRQ(unsigned int)+0x2c>
   11944:	e3a03e46 	mov	r3, #1120	; 0x460
   11948:	e3433fe1 	movt	r3, #16353	; 0x3fe1
   1194c:	e08332a0 	add	r3, r3, r0, lsr #5
   11950:	e3a02001 	mov	r2, #1
   11954:	e200001f 	and	r0, r0, #31
   11958:	e1a00012 	lsl	r0, r2, r0
   1195c:	e1a03103 	lsl	r3, r3, #2
   11960:	e5830000 	str	r0, [r3]
   11964:	e12fff1e 	bx	lr
   11968:	e3061388 	movw	r1, #25480	; 0x6388
   1196c:	e3401001 	movt	r1, #1
   11970:	e52d4008 	str	r4, [sp, #-8]!
   11974:	e306039c 	movw	r0, #25500	; 0x639c
   11978:	e3400001 	movt	r0, #1
   1197c:	e58de004 	str	lr, [sp, #4]
   11980:	e3a020e5 	mov	r2, #229	; 0xe5
   11984:	ebffdb68 	bl	872c <assertion_failed>

00011988 <CInterruptSystem::EnableFIQ(unsigned int)>:
   11988:	e350000f 	cmp	r0, #15
   1198c:	e52d4008 	str	r4, [sp, #-8]!
   11990:	e58de004 	str	lr, [sp, #4]
   11994:	9a00000c 	bls	119cc <CInterruptSystem::EnableFIQ(unsigned int)+0x44>
   11998:	e35000ff 	cmp	r0, #255	; 0xff
   1199c:	e1a03000 	mov	r3, r0
   119a0:	8a00000f 	bhi	119e4 <CInterruptSystem::EnableFIQ(unsigned int)+0x5c>
   119a4:	e3082068 	movw	r2, #32872	; 0x8068
   119a8:	e3402001 	movt	r2, #1
   119ac:	e3a0c000 	mov	ip, #0
   119b0:	e5820008 	str	r0, [r2, #8]
   119b4:	e1a0000c 	mov	r0, ip
   119b8:	e1a01003 	mov	r1, r3
   119bc:	e1600070 	smc	0
   119c0:	e59d4000 	ldr	r4, [sp]
   119c4:	e28dd004 	add	sp, sp, #4
   119c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   119cc:	e3061388 	movw	r1, #25480	; 0x6388
   119d0:	e3401001 	movt	r1, #1
   119d4:	e3060400 	movw	r0, #25600	; 0x6400
   119d8:	e3400001 	movt	r0, #1
   119dc:	e3a020f4 	mov	r2, #244	; 0xf4
   119e0:	ebffdb51 	bl	872c <assertion_failed>
   119e4:	e3061388 	movw	r1, #25480	; 0x6388
   119e8:	e3401001 	movt	r1, #1
   119ec:	e306040c 	movw	r0, #25612	; 0x640c
   119f0:	e3400001 	movt	r0, #1
   119f4:	e3a020f5 	mov	r2, #245	; 0xf5
   119f8:	ebffdb4b 	bl	872c <assertion_failed>

000119fc <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)>:
   119fc:	e3510c01 	cmp	r1, #256	; 0x100
   11a00:	e52d4008 	str	r4, [sp, #-8]!
   11a04:	e58de004 	str	lr, [sp, #4]
   11a08:	8a00000d 	bhi	11a44 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x48>
   11a0c:	e3520000 	cmp	r2, #0
   11a10:	0a000011 	beq	11a5c <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x60>
   11a14:	e1a00001 	mov	r0, r1
   11a18:	e3081068 	movw	r1, #32872	; 0x8068
   11a1c:	e3401001 	movt	r1, #1
   11a20:	e591c000 	ldr	ip, [r1]
   11a24:	e35c0000 	cmp	ip, #0
   11a28:	1a000011 	bne	11a74 <CInterruptSystem::ConnectFIQ(unsigned int, void (*)(void*), void*)+0x78>
   11a2c:	e59d4000 	ldr	r4, [sp]
   11a30:	e5812000 	str	r2, [r1]
   11a34:	e59de004 	ldr	lr, [sp, #4]
   11a38:	e28dd008 	add	sp, sp, #8
   11a3c:	e5813004 	str	r3, [r1, #4]
   11a40:	eaffffd0 	b	11988 <CInterruptSystem::EnableFIQ(unsigned int)>
   11a44:	e3061388 	movw	r1, #25480	; 0x6388
   11a48:	e3401001 	movt	r1, #1
   11a4c:	e3060420 	movw	r0, #25632	; 0x6420
   11a50:	e3400001 	movt	r0, #1
   11a54:	e3a020c8 	mov	r2, #200	; 0xc8
   11a58:	ebffdb33 	bl	872c <assertion_failed>
   11a5c:	e3061388 	movw	r1, #25480	; 0x6388
   11a60:	e3401001 	movt	r1, #1
   11a64:	e30603f0 	movw	r0, #25584	; 0x63f0
   11a68:	e3400001 	movt	r0, #1
   11a6c:	e3a020c9 	mov	r2, #201	; 0xc9
   11a70:	ebffdb2d 	bl	872c <assertion_failed>
   11a74:	e3061388 	movw	r1, #25480	; 0x6388
   11a78:	e3401001 	movt	r1, #1
   11a7c:	e3060434 	movw	r0, #25652	; 0x6434
   11a80:	e3400001 	movt	r0, #1
   11a84:	e3a020ca 	mov	r2, #202	; 0xca
   11a88:	ebffdb27 	bl	872c <assertion_failed>

00011a8c <CInterruptSystem::DisableFIQ()>:
   11a8c:	e3083068 	movw	r3, #32872	; 0x8068
   11a90:	e3403001 	movt	r3, #1
   11a94:	e5932008 	ldr	r2, [r3, #8]
   11a98:	e3520000 	cmp	r2, #0
   11a9c:	0a000008 	beq	11ac4 <CInterruptSystem::DisableFIQ()+0x38>
   11aa0:	e3a0c001 	mov	ip, #1
   11aa4:	e1a0000c 	mov	r0, ip
   11aa8:	e1a01002 	mov	r1, r2
   11aac:	e1600070 	smc	0
   11ab0:	e3a02000 	mov	r2, #0
   11ab4:	e5c32008 	strb	r2, [r3, #8]
   11ab8:	e5c32009 	strb	r2, [r3, #9]
   11abc:	e5c3200a 	strb	r2, [r3, #10]
   11ac0:	e5c3200b 	strb	r2, [r3, #11]
   11ac4:	e12fff1e 	bx	lr

00011ac8 <CInterruptSystem::Get()>:
   11ac8:	e3093710 	movw	r3, #38672	; 0x9710
   11acc:	e3403001 	movt	r3, #1
   11ad0:	e5930000 	ldr	r0, [r3]
   11ad4:	e3500000 	cmp	r0, #0
   11ad8:	112fff1e 	bxne	lr
   11adc:	e3061388 	movw	r1, #25480	; 0x6388
   11ae0:	e3401001 	movt	r1, #1
   11ae4:	e52d4008 	str	r4, [sp, #-8]!
   11ae8:	e3050c48 	movw	r0, #23624	; 0x5c48
   11aec:	e3400001 	movt	r0, #1
   11af0:	e58de004 	str	lr, [sp, #4]
   11af4:	e300210f 	movw	r2, #271	; 0x10f
   11af8:	ebffdb0b 	bl	872c <assertion_failed>

00011afc <CInterruptSystem::CallIRQHandler(unsigned int)>:
   11afc:	e35100ff 	cmp	r1, #255	; 0xff
   11b00:	e52d4008 	str	r4, [sp, #-8]!
   11b04:	e58de004 	str	lr, [sp, #4]
   11b08:	8a000015 	bhi	11b64 <CInterruptSystem::CallIRQHandler(unsigned int)+0x68>
   11b0c:	e7903101 	ldr	r3, [r0, r1, lsl #2]
   11b10:	e0800101 	add	r0, r0, r1, lsl #2
   11b14:	e3530000 	cmp	r3, #0
   11b18:	0a000005 	beq	11b34 <CInterruptSystem::CallIRQHandler(unsigned int)+0x38>
   11b1c:	e5900400 	ldr	r0, [r0, #1024]	; 0x400
   11b20:	e12fff33 	blx	r3
   11b24:	e59d4000 	ldr	r4, [sp]
   11b28:	e28dd004 	add	sp, sp, #4
   11b2c:	e3a00001 	mov	r0, #1
   11b30:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11b34:	e3a02e46 	mov	r2, #1120	; 0x460
   11b38:	e3432fe1 	movt	r2, #16353	; 0x3fe1
   11b3c:	e59d4000 	ldr	r4, [sp]
   11b40:	e08222a1 	add	r2, r2, r1, lsr #5
   11b44:	e3a00001 	mov	r0, #1
   11b48:	e201101f 	and	r1, r1, #31
   11b4c:	e1a01110 	lsl	r1, r0, r1
   11b50:	e28dd004 	add	sp, sp, #4
   11b54:	e1a00003 	mov	r0, r3
   11b58:	e1a02102 	lsl	r2, r2, #2
   11b5c:	e5821000 	str	r1, [r2]
   11b60:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11b64:	e3061388 	movw	r1, #25480	; 0x6388
   11b68:	e3401001 	movt	r1, #1
   11b6c:	e306039c 	movw	r0, #25500	; 0x639c
   11b70:	e3400001 	movt	r0, #1
   11b74:	e3002115 	movw	r2, #277	; 0x115
   11b78:	ebffdaeb 	bl	872c <assertion_failed>

00011b7c <CInterruptSystem::InterruptHandler()>:
   11b7c:	e3023fff 	movw	r3, #12287	; 0x2fff
   11b80:	e34f3f84 	movt	r3, #65412	; 0xff84
   11b84:	e52d4008 	str	r4, [sp, #-8]!
   11b88:	e5134ff3 	ldr	r4, [r3, #-4083]	; 0xfffff00d
   11b8c:	e58de004 	str	lr, [sp, #4]
   11b90:	e3140c03 	tst	r4, #768	; 0x300
   11b94:	e7e91054 	ubfx	r1, r4, #0, #10
   11b98:	1a00000d 	bne	11bd4 <CInterruptSystem::InterruptHandler()+0x58>
   11b9c:	e3140e3f 	tst	r4, #1008	; 0x3f0
   11ba0:	0a000005 	beq	11bbc <CInterruptSystem::InterruptHandler()+0x40>
   11ba4:	e3093710 	movw	r3, #38672	; 0x9710
   11ba8:	e3403001 	movt	r3, #1
   11bac:	e5930000 	ldr	r0, [r3]
   11bb0:	e3500000 	cmp	r0, #0
   11bb4:	0a00000e 	beq	11bf4 <CInterruptSystem::InterruptHandler()+0x78>
   11bb8:	ebffffcf 	bl	11afc <CInterruptSystem::CallIRQHandler(unsigned int)>
   11bbc:	e3023fff 	movw	r3, #12287	; 0x2fff
   11bc0:	e34f3f84 	movt	r3, #65412	; 0xff84
   11bc4:	e5034fef 	str	r4, [r3, #-4079]	; 0xfffff011
   11bc8:	e59d4000 	ldr	r4, [sp]
   11bcc:	e28dd004 	add	sp, sp, #4
   11bd0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11bd4:	e3510fff 	cmp	r1, #1020	; 0x3fc
   11bd8:	2afffffa 	bcs	11bc8 <CInterruptSystem::InterruptHandler()+0x4c>
   11bdc:	e3061388 	movw	r1, #25480	; 0x6388
   11be0:	e3401001 	movt	r1, #1
   11be4:	e306044c 	movw	r0, #25676	; 0x644c
   11be8:	e3400001 	movt	r0, #1
   11bec:	e3002142 	movw	r2, #322	; 0x142
   11bf0:	ebffdacd 	bl	872c <assertion_failed>
   11bf4:	e3061388 	movw	r1, #25480	; 0x6388
   11bf8:	e3401001 	movt	r1, #1
   11bfc:	e3050c48 	movw	r0, #23624	; 0x5c48
   11c00:	e3400001 	movt	r0, #1
   11c04:	e3a02e13 	mov	r2, #304	; 0x130
   11c08:	ebffdac7 	bl	872c <assertion_failed>

00011c0c <InterruptHandler>:
   11c0c:	eaffffda 	b	11b7c <CInterruptSystem::InterruptHandler()>

00011c10 <CInterruptSystem::InitializeSecondary()>:
   11c10:	e3023fff 	movw	r3, #12287	; 0x2fff
   11c14:	e34f3f84 	movt	r3, #65412	; 0xff84
   11c18:	e3a010f0 	mov	r1, #240	; 0xf0
   11c1c:	e3a02001 	mov	r2, #1
   11c20:	e5031ffb 	str	r1, [r3, #-4091]	; 0xfffff005
   11c24:	e5032fff 	str	r2, [r3, #-4095]	; 0xfffff001
   11c28:	e12fff1e 	bx	lr

00011c2c <CInterruptSystem::SendIPI(unsigned int, unsigned int)>:
   11c2c:	e3500007 	cmp	r0, #7
   11c30:	e52d4008 	str	r4, [sp, #-8]!
   11c34:	e58de004 	str	lr, [sp, #4]
   11c38:	8a00000a 	bhi	11c68 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x3c>
   11c3c:	e351000f 	cmp	r1, #15
   11c40:	8a00000e 	bhi	11c80 <CInterruptSystem::SendIPI(unsigned int, unsigned int)+0x54>
   11c44:	e3a03001 	mov	r3, #1
   11c48:	e2800010 	add	r0, r0, #16
   11c4c:	e59d4000 	ldr	r4, [sp]
   11c50:	e1810013 	orr	r0, r1, r3, lsl r0
   11c54:	e3013fff 	movw	r3, #8191	; 0x1fff
   11c58:	e34f3f84 	movt	r3, #65412	; 0xff84
   11c5c:	e28dd004 	add	sp, sp, #4
   11c60:	e50300ff 	str	r0, [r3, #-255]	; 0xffffff01
   11c64:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11c68:	e3061388 	movw	r1, #25480	; 0x6388
   11c6c:	e3401001 	movt	r1, #1
   11c70:	e306045c 	movw	r0, #25692	; 0x645c
   11c74:	e3400001 	movt	r0, #1
   11c78:	e3002155 	movw	r2, #341	; 0x155
   11c7c:	ebffdaaa 	bl	872c <assertion_failed>
   11c80:	e3061388 	movw	r1, #25480	; 0x6388
   11c84:	e3401001 	movt	r1, #1
   11c88:	e3060468 	movw	r0, #25704	; 0x6468
   11c8c:	e3400001 	movt	r0, #1
   11c90:	e3002156 	movw	r2, #342	; 0x156
   11c94:	ebffdaa4 	bl	872c <assertion_failed>

00011c98 <CInterruptSystem::CallSecureMonitor(unsigned int, unsigned int)>:
   11c98:	e1a03000 	mov	r3, r0
   11c9c:	e1a02001 	mov	r2, r1
   11ca0:	e1a00003 	mov	r0, r3
   11ca4:	e1a01002 	mov	r1, r2
   11ca8:	e1600070 	smc	0
   11cac:	e12fff1e 	bx	lr

00011cb0 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>:
   11cb0:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
   11cb4:	e2014003 	and	r4, r1, #3
   11cb8:	e3c13003 	bic	r3, r1, #3
   11cbc:	e1a04184 	lsl	r4, r4, #3
   11cc0:	e243387b 	sub	r3, r3, #8060928	; 0x7b0000
   11cc4:	e3a0c001 	mov	ip, #1
   11cc8:	e1a052a1 	lsr	r5, r1, #5
   11ccc:	e3500000 	cmp	r0, #0
   11cd0:	e201101f 	and	r1, r1, #31
   11cd4:	e1a0111c 	lsl	r1, ip, r1
   11cd8:	e2433b3b 	sub	r3, r3, #60416	; 0xec00
   11cdc:	e1cd60f8 	strd	r6, [sp, #8]
   11ce0:	e58de010 	str	lr, [sp, #16]
   11ce4:	e3a0e0ff 	mov	lr, #255	; 0xff
   11ce8:	e1a0641e 	lsl	r6, lr, r4
   11cec:	1a000019 	bne	11d58 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0xa8>
   11cf0:	e3a07003 	mov	r7, #3
   11cf4:	e301cfff 	movw	ip, #8191	; 0x1fff
   11cf8:	e34fcf84 	movt	ip, #65412	; 0xff84
   11cfc:	e3a0e00b 	mov	lr, #11
   11d00:	e1a02105 	lsl	r2, r5, #2
   11d04:	e3020fff 	movw	r0, #12287	; 0x2fff
   11d08:	e34f0f84 	movt	r0, #65412	; 0xff84
   11d0c:	e50c7fff 	str	r7, [ip, #-4095]	; 0xfffff001
   11d10:	e3a0cd42 	mov	ip, #4224	; 0x1080
   11d14:	e34fcf84 	movt	ip, #65412	; 0xff84
   11d18:	e500efff 	str	lr, [r0, #-4095]	; 0xfffff001
   11d1c:	e3a07040 	mov	r7, #64	; 0x40
   11d20:	e242287b 	sub	r2, r2, #8060928	; 0x7b0000
   11d24:	e79ce105 	ldr	lr, [ip, r5, lsl #2]
   11d28:	e2422cef 	sub	r2, r2, #61184	; 0xef00
   11d2c:	e1cee001 	bic	lr, lr, r1
   11d30:	e78ce105 	str	lr, [ip, r5, lsl #2]
   11d34:	e5930000 	ldr	r0, [r3]
   11d38:	e1c00006 	bic	r0, r0, r6
   11d3c:	e1800417 	orr	r0, r0, r7, lsl r4
   11d40:	e5830000 	str	r0, [r3]
   11d44:	e5821000 	str	r1, [r2]
   11d48:	e1cd40d0 	ldrd	r4, [sp]
   11d4c:	e1cd60d8 	ldrd	r6, [sp, #8]
   11d50:	e28dd010 	add	sp, sp, #16
   11d54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11d58:	e3500001 	cmp	r0, #1
   11d5c:	1afffff9 	bne	11d48 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)+0x98>
   11d60:	e3a02d46 	mov	r2, #4480	; 0x1180
   11d64:	e34f2f84 	movt	r2, #65412	; 0xff84
   11d68:	e3a0e0a0 	mov	lr, #160	; 0xa0
   11d6c:	e3027fff 	movw	r7, #12287	; 0x2fff
   11d70:	e34f7f84 	movt	r7, #65412	; 0xff84
   11d74:	e7821105 	str	r1, [r2, r5, lsl #2]
   11d78:	e3a02d42 	mov	r2, #4224	; 0x1080
   11d7c:	e34f2f84 	movt	r2, #65412	; 0xff84
   11d80:	e5930000 	ldr	r0, [r3]
   11d84:	e301cfff 	movw	ip, #8191	; 0x1fff
   11d88:	e34fcf84 	movt	ip, #65412	; 0xff84
   11d8c:	e1c00006 	bic	r0, r0, r6
   11d90:	e180041e 	orr	r0, r0, lr, lsl r4
   11d94:	e3a0e002 	mov	lr, #2
   11d98:	e5830000 	str	r0, [r3]
   11d9c:	e7923105 	ldr	r3, [r2, r5, lsl #2]
   11da0:	e1811003 	orr	r1, r1, r3
   11da4:	e7821105 	str	r1, [r2, r5, lsl #2]
   11da8:	e507efff 	str	lr, [r7, #-4095]	; 0xfffff001
   11dac:	e1cd40d0 	ldrd	r4, [sp]
   11db0:	e50cefff 	str	lr, [ip, #-4095]	; 0xfffff001
   11db4:	e1cd60d8 	ldrd	r6, [sp, #8]
   11db8:	e28dd010 	add	sp, sp, #16
   11dbc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011dc0 <SecureMonitorHandler>:
   11dc0:	eaffffba 	b	11cb0 <CInterruptSystem::SecureMonitorHandler(unsigned int, unsigned int)>

00011dc4 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)>:
   11dc4:	e3a03000 	mov	r3, #0
   11dc8:	e16d41f0 	strd	r4, [sp, #-16]!
   11dcc:	e2514000 	subs	r4, r1, #0
   11dd0:	e1a05000 	mov	r5, r0
   11dd4:	e58d6008 	str	r6, [sp, #8]
   11dd8:	e58de00c 	str	lr, [sp, #12]
   11ddc:	e5803000 	str	r3, [r0]
   11de0:	0a00000e 	beq	11e20 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x5c>
   11de4:	e5942000 	ldr	r2, [r4]
   11de8:	e3a03edd 	mov	r3, #3536	; 0xdd0
   11dec:	e34e3dfe 	movt	r3, #60926	; 0xedfe
   11df0:	e1520003 	cmp	r2, r3
   11df4:	1a000009 	bne	11e20 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x5c>
   11df8:	e5943018 	ldr	r3, [r4, #24]
   11dfc:	e3530201 	cmp	r3, #268435456	; 0x10000000
   11e00:	1a000006 	bne	11e20 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x5c>
   11e04:	e5946004 	ldr	r6, [r4, #4]
   11e08:	e30f3fd8 	movw	r3, #65496	; 0xffd8
   11e0c:	e340300f 	movt	r3, #15
   11e10:	e6bf6f36 	rev	r6, r6
   11e14:	e2462028 	sub	r2, r6, #40	; 0x28
   11e18:	e1520003 	cmp	r2, r3
   11e1c:	9a000004 	bls	11e34 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x70>
   11e20:	e1a00005 	mov	r0, r5
   11e24:	e1cd40d0 	ldrd	r4, [sp]
   11e28:	e59d6008 	ldr	r6, [sp, #8]
   11e2c:	e28dd00c 	add	sp, sp, #12
   11e30:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11e34:	e1a00006 	mov	r0, r6
   11e38:	ebfff61e 	bl	f6b8 <operator new[](unsigned int)>
   11e3c:	e1a02006 	mov	r2, r6
   11e40:	e1a01004 	mov	r1, r4
   11e44:	e5850000 	str	r0, [r5]
   11e48:	ebfff576 	bl	f428 <memcpy>
   11e4c:	eafffff3 	b	11e20 <CDeviceTreeBlob::CDeviceTreeBlob(void const*)+0x5c>

00011e50 <CDeviceTreeBlob::~CDeviceTreeBlob()>:
   11e50:	e52d4008 	str	r4, [sp, #-8]!
   11e54:	e1a04000 	mov	r4, r0
   11e58:	e5900000 	ldr	r0, [r0]
   11e5c:	e58de004 	str	lr, [sp, #4]
   11e60:	e3500000 	cmp	r0, #0
   11e64:	0a000000 	beq	11e6c <CDeviceTreeBlob::~CDeviceTreeBlob()+0x1c>
   11e68:	ebfff61d 	bl	f6e4 <operator delete[](void*)>
   11e6c:	e1a00004 	mov	r0, r4
   11e70:	e59d4000 	ldr	r4, [sp]
   11e74:	e28dd004 	add	sp, sp, #4
   11e78:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00011e7c <CDeviceTreeBlob::FindNode(char const*, TDeviceTreeNode const*) const>:
   11e7c:	e3a03000 	mov	r3, #0
   11e80:	eaffffff 	b	11e84 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>

00011e84 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>:
   11e84:	e16d42f4 	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e88:	e2515000 	subs	r5, r1, #0
   11e8c:	e1cd60f8 	strd	r6, [sp, #8]
   11e90:	e1cd81f0 	strd	r8, [sp, #16]
   11e94:	e1cda1f8 	strd	sl, [sp, #24]
   11e98:	e28db020 	add	fp, sp, #32
   11e9c:	e58de020 	str	lr, [sp, #32]
   11ea0:	e24dd014 	sub	sp, sp, #20
   11ea4:	0a000090 	beq	120ec <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x268>
   11ea8:	e5908000 	ldr	r8, [r0]
   11eac:	e1a06000 	mov	r6, r0
   11eb0:	e3580000 	cmp	r8, #0
   11eb4:	0a00009b 	beq	12128 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2a4>
   11eb8:	e3520000 	cmp	r2, #0
   11ebc:	e1a04002 	mov	r4, r2
   11ec0:	e1a07003 	mov	r7, r3
   11ec4:	0a000036 	beq	11fa4 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x120>
   11ec8:	e594c000 	ldr	ip, [r4]
   11ecc:	e35c0301 	cmp	ip, #67108864	; 0x4000000
   11ed0:	e6bfcf3c 	rev	ip, ip
   11ed4:	1a000003 	bne	11ee8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x64>
   11ed8:	e5b4c004 	ldr	ip, [r4, #4]!
   11edc:	e35c0301 	cmp	ip, #67108864	; 0x4000000
   11ee0:	e6bfcf3c 	rev	ip, ip
   11ee4:	0afffffb 	beq	11ed8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x54>
   11ee8:	e35c0001 	cmp	ip, #1
   11eec:	1a000074 	bne	120c4 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x240>
   11ef0:	e1d530d0 	ldrsb	r3, [r5]
   11ef4:	e3530000 	cmp	r3, #0
   11ef8:	1a000007 	bne	11f1c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x98>
   11efc:	e1a00004 	mov	r0, r4
   11f00:	e24bd020 	sub	sp, fp, #32
   11f04:	e1cd40d0 	ldrd	r4, [sp]
   11f08:	e1cd60d8 	ldrd	r6, [sp, #8]
   11f0c:	e1cd81d0 	ldrd	r8, [sp, #16]
   11f10:	e1cda1d8 	ldrd	sl, [sp, #24]
   11f14:	e28dd020 	add	sp, sp, #32
   11f18:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   11f1c:	e3a0102f 	mov	r1, #47	; 0x2f
   11f20:	e1a00005 	mov	r0, r5
   11f24:	ebfff3f0 	bl	eeec <strchr>
   11f28:	e3500000 	cmp	r0, #0
   11f2c:	10408005 	subne	r8, r0, r5
   11f30:	0a000078 	beq	12118 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x294>
   11f34:	e3580000 	cmp	r8, #0
   11f38:	0a00006f 	beq	120fc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x278>
   11f3c:	e2883008 	add	r3, r8, #8
   11f40:	e1a02008 	mov	r2, r8
   11f44:	e3c33007 	bic	r3, r3, #7
   11f48:	e1a01005 	mov	r1, r5
   11f4c:	e04dd003 	sub	sp, sp, r3
   11f50:	e2849004 	add	r9, r4, #4
   11f54:	e28da008 	add	sl, sp, #8
   11f58:	e1a0000a 	mov	r0, sl
   11f5c:	ebfff531 	bl	f428 <memcpy>
   11f60:	e3a03000 	mov	r3, #0
   11f64:	e1a0100a 	mov	r1, sl
   11f68:	e1a00009 	mov	r0, r9
   11f6c:	e7ca3008 	strb	r3, [sl, r8]
   11f70:	ebfff314 	bl	ebc8 <strcmp>
   11f74:	e2503000 	subs	r3, r0, #0
   11f78:	1a000018 	bne	11fe0 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x15c>
   11f7c:	e19520d8 	ldrsb	r2, [r5, r8]
   11f80:	e0855008 	add	r5, r5, r8
   11f84:	e352002f 	cmp	r2, #47	; 0x2f
   11f88:	1affffdb 	bne	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   11f8c:	e1a02004 	mov	r2, r4
   11f90:	e2851001 	add	r1, r5, #1
   11f94:	e1a00006 	mov	r0, r6
   11f98:	ebffffb9 	bl	11e84 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   11f9c:	e1a04000 	mov	r4, r0
   11fa0:	eaffffd5 	b	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   11fa4:	e5983008 	ldr	r3, [r8, #8]
   11fa8:	e1d520d0 	ldrsb	r2, [r5]
   11fac:	e6bf3f33 	rev	r3, r3
   11fb0:	e0888003 	add	r8, r8, r3
   11fb4:	e352002f 	cmp	r2, #47	; 0x2f
   11fb8:	02855001 	addeq	r5, r5, #1
   11fbc:	01a04008 	moveq	r4, r8
   11fc0:	0affffc0 	beq	11ec8 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x44>
   11fc4:	ebffdead 	bl	9a80 <CLogger::Get()>
   11fc8:	e59f3174 	ldr	r3, [pc, #372]	; 12144 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2c0>
   11fcc:	e3a02002 	mov	r2, #2
   11fd0:	e58d5000 	str	r5, [sp]
   11fd4:	e2431038 	sub	r1, r3, #56	; 0x38
   11fd8:	ebffdde0 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   11fdc:	eaffffc6 	b	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   11fe0:	e1a00009 	mov	r0, r9
   11fe4:	ebfff2ed 	bl	eba0 <strlen>
   11fe8:	e2804004 	add	r4, r0, #4
   11fec:	e3c44003 	bic	r4, r4, #3
   11ff0:	e7993004 	ldr	r3, [r9, r4]
   11ff4:	e0894004 	add	r4, r9, r4
   11ff8:	e6bf3f33 	rev	r3, r3
   11ffc:	e2432003 	sub	r2, r3, #3
   12000:	e3520001 	cmp	r2, #1
   12004:	8a00000b 	bhi	12038 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1b4>
   12008:	e3530004 	cmp	r3, #4
   1200c:	0a000004 	beq	12024 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1a0>
   12010:	e5943004 	ldr	r3, [r4, #4]
   12014:	e6bf3f33 	rev	r3, r3
   12018:	e2833003 	add	r3, r3, #3
   1201c:	e3c33003 	bic	r3, r3, #3
   12020:	e283300c 	add	r3, r3, #12
   12024:	e7b43003 	ldr	r3, [r4, r3]!
   12028:	e6bf3f33 	rev	r3, r3
   1202c:	e2432003 	sub	r2, r3, #3
   12030:	e3520001 	cmp	r2, #1
   12034:	9afffff3 	bls	12008 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x184>
   12038:	e3530001 	cmp	r3, #1
   1203c:	1a000015 	bne	12098 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x214>
   12040:	e3a08000 	mov	r8, #0
   12044:	e1a02004 	mov	r2, r4
   12048:	e24b3028 	sub	r3, fp, #40	; 0x28
   1204c:	e50b8028 	str	r8, [fp, #-40]	; 0xffffffd8
   12050:	e1a01005 	mov	r1, r5
   12054:	e1a00006 	mov	r0, r6
   12058:	ebffff89 	bl	11e84 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const>
   1205c:	e2504000 	subs	r4, r0, #0
   12060:	1affffa5 	bne	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   12064:	e51b4028 	ldr	r4, [fp, #-40]	; 0xffffffd8
   12068:	e3540000 	cmp	r4, #0
   1206c:	0affffa2 	beq	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   12070:	e5943000 	ldr	r3, [r4]
   12074:	e3530401 	cmp	r3, #16777216	; 0x1000000
   12078:	e6bf3f33 	rev	r3, r3
   1207c:	0afffff0 	beq	12044 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x1c0>
   12080:	e3530004 	cmp	r3, #4
   12084:	1a000003 	bne	12098 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x214>
   12088:	e5b43004 	ldr	r3, [r4, #4]!
   1208c:	e3530301 	cmp	r3, #67108864	; 0x4000000
   12090:	e6bf3f33 	rev	r3, r3
   12094:	0afffffb 	beq	12088 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x204>
   12098:	e2433002 	sub	r3, r3, #2
   1209c:	e3570000 	cmp	r7, #0
   120a0:	e16f3f13 	clz	r3, r3
   120a4:	e1a032a3 	lsr	r3, r3, #5
   120a8:	03a03000 	moveq	r3, #0
   120ac:	e3530000 	cmp	r3, #0
   120b0:	12843004 	addne	r3, r4, #4
   120b4:	01a04003 	moveq	r4, r3
   120b8:	13a04000 	movne	r4, #0
   120bc:	15873000 	strne	r3, [r7]
   120c0:	eaffff8d 	b	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   120c4:	ebffde6d 	bl	9a80 <CLogger::Get()>
   120c8:	e594c000 	ldr	ip, [r4]
   120cc:	e3a02002 	mov	r2, #2
   120d0:	e3a04000 	mov	r4, #0
   120d4:	e59f306c 	ldr	r3, [pc, #108]	; 12148 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2c4>
   120d8:	e6bfcf3c 	rev	ip, ip
   120dc:	e243104c 	sub	r1, r3, #76	; 0x4c
   120e0:	e58dc000 	str	ip, [sp]
   120e4:	ebffdd9d 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   120e8:	eaffff83 	b	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   120ec:	e59f1058 	ldr	r1, [pc, #88]	; 1214c <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2c8>
   120f0:	e3a02084 	mov	r2, #132	; 0x84
   120f4:	e2810014 	add	r0, r1, #20
   120f8:	ebffd98b 	bl	872c <assertion_failed>
   120fc:	ebffde5f 	bl	9a80 <CLogger::Get()>
   12100:	e59f3048 	ldr	r3, [pc, #72]	; 12150 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2cc>
   12104:	e3a02002 	mov	r2, #2
   12108:	e1a04008 	mov	r4, r8
   1210c:	e243106c 	sub	r1, r3, #108	; 0x6c
   12110:	ebffdd92 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12114:	eaffff78 	b	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   12118:	e1a00005 	mov	r0, r5
   1211c:	ebfff29f 	bl	eba0 <strlen>
   12120:	e1a08000 	mov	r8, r0
   12124:	eaffff82 	b	11f34 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0xb0>
   12128:	ebffde54 	bl	9a80 <CLogger::Get()>
   1212c:	e59f3020 	ldr	r3, [pc, #32]	; 12154 <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x2d0>
   12130:	e3a02002 	mov	r2, #2
   12134:	e1a04008 	mov	r4, r8
   12138:	e2431024 	sub	r1, r3, #36	; 0x24
   1213c:	ebffdd87 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12140:	eaffff6d 	b	11efc <CDeviceTreeBlob::FindNodeInternal(char const*, TDeviceTreeNode const*, TDeviceTreeNode const**) const+0x78>
   12144:	000164ac 	.word	0x000164ac
   12148:	000164c0 	.word	0x000164c0
   1214c:	00016478 	.word	0x00016478
   12150:	000164e0 	.word	0x000164e0
   12154:	00016498 	.word	0x00016498

00012158 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const>:
   12158:	e16d41f4 	strd	r4, [sp, #-20]!	; 0xffffffec
   1215c:	e1cd60f8 	strd	r6, [sp, #8]
   12160:	e2517000 	subs	r7, r1, #0
   12164:	e58de010 	str	lr, [sp, #16]
   12168:	e24dd00c 	sub	sp, sp, #12
   1216c:	0a000043 	beq	12280 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x128>
   12170:	e3520000 	cmp	r2, #0
   12174:	e1a05002 	mov	r5, r2
   12178:	0a000044 	beq	12290 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x138>
   1217c:	e1a06000 	mov	r6, r0
   12180:	e5900000 	ldr	r0, [r0]
   12184:	e3500000 	cmp	r0, #0
   12188:	0a00002b 	beq	1223c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xe4>
   1218c:	e5973000 	ldr	r3, [r7]
   12190:	e3530401 	cmp	r3, #16777216	; 0x1000000
   12194:	1a00002d 	bne	12250 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xf8>
   12198:	e2870004 	add	r0, r7, #4
   1219c:	ebfff27f 	bl	eba0 <strlen>
   121a0:	e2804004 	add	r4, r0, #4
   121a4:	e3c44003 	bic	r4, r4, #3
   121a8:	e2844004 	add	r4, r4, #4
   121ac:	e7973004 	ldr	r3, [r7, r4]
   121b0:	e0874004 	add	r4, r7, r4
   121b4:	e6bf3f33 	rev	r3, r3
   121b8:	e2432003 	sub	r2, r3, #3
   121bc:	e3520001 	cmp	r2, #1
   121c0:	8a000016 	bhi	12220 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xc8>
   121c4:	e3530004 	cmp	r3, #4
   121c8:	0a00000f 	beq	1220c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xb4>
   121cc:	e5960000 	ldr	r0, [r6]
   121d0:	e1a01005 	mov	r1, r5
   121d4:	e5942008 	ldr	r2, [r4, #8]
   121d8:	e590300c 	ldr	r3, [r0, #12]
   121dc:	e6bf2f32 	rev	r2, r2
   121e0:	e6bf3f33 	rev	r3, r3
   121e4:	e0833002 	add	r3, r3, r2
   121e8:	e0800003 	add	r0, r0, r3
   121ec:	ebfff275 	bl	ebc8 <strcmp>
   121f0:	e3500000 	cmp	r0, #0
   121f4:	0a00001f 	beq	12278 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x120>
   121f8:	e5943004 	ldr	r3, [r4, #4]
   121fc:	e6bf3f33 	rev	r3, r3
   12200:	e2833003 	add	r3, r3, #3
   12204:	e3c33003 	bic	r3, r3, #3
   12208:	e283300c 	add	r3, r3, #12
   1220c:	e7b43003 	ldr	r3, [r4, r3]!
   12210:	e6bf3f33 	rev	r3, r3
   12214:	e2432003 	sub	r2, r3, #3
   12218:	e3520001 	cmp	r2, #1
   1221c:	9affffe8 	bls	121c4 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x6c>
   12220:	ebffde16 	bl	9a80 <CLogger::Get()>
   12224:	e59f3074 	ldr	r3, [pc, #116]	; 122a0 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x148>
   12228:	e3a02002 	mov	r2, #2
   1222c:	e58d5000 	str	r5, [sp]
   12230:	e24310a0 	sub	r1, r3, #160	; 0xa0
   12234:	ebffdd49 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12238:	e3a00000 	mov	r0, #0
   1223c:	e28dd00c 	add	sp, sp, #12
   12240:	e1cd40d0 	ldrd	r4, [sp]
   12244:	e1cd60d8 	ldrd	r6, [sp, #8]
   12248:	e28dd010 	add	sp, sp, #16
   1224c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12250:	ebffde0a 	bl	9a80 <CLogger::Get()>
   12254:	e597c000 	ldr	ip, [r7]
   12258:	e3a02002 	mov	r2, #2
   1225c:	e59f3040 	ldr	r3, [pc, #64]	; 122a4 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x14c>
   12260:	e6bfcf3c 	rev	ip, ip
   12264:	e243104c 	sub	r1, r3, #76	; 0x4c
   12268:	e58dc000 	str	ip, [sp]
   1226c:	ebffdd3b 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   12270:	e3a00000 	mov	r0, #0
   12274:	eafffff0 	b	1223c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xe4>
   12278:	e1a00004 	mov	r0, r4
   1227c:	eaffffee 	b	1223c <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0xe4>
   12280:	e59f1020 	ldr	r1, [pc, #32]	; 122a8 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x150>
   12284:	e300210b 	movw	r2, #267	; 0x10b
   12288:	e2810084 	add	r0, r1, #132	; 0x84
   1228c:	ebffd926 	bl	872c <assertion_failed>
   12290:	e59f1010 	ldr	r1, [pc, #16]	; 122a8 <CDeviceTreeBlob::FindProperty(TDeviceTreeNode const*, char const*) const+0x150>
   12294:	e3a02f43 	mov	r2, #268	; 0x10c
   12298:	e2810090 	add	r0, r1, #144	; 0x90
   1229c:	ebffd922 	bl	872c <assertion_failed>
   122a0:	00016514 	.word	0x00016514
   122a4:	000164c0 	.word	0x000164c0
   122a8:	00016478 	.word	0x00016478

000122ac <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const>:
   122ac:	e3510000 	cmp	r1, #0
   122b0:	0a000004 	beq	122c8 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const+0x1c>
   122b4:	e5900000 	ldr	r0, [r0]
   122b8:	e3500000 	cmp	r0, #0
   122bc:	15910004 	ldrne	r0, [r1, #4]
   122c0:	16bf0f30 	revne	r0, r0
   122c4:	e12fff1e 	bx	lr
   122c8:	e59f1010 	ldr	r1, [pc, #16]	; 122e0 <CDeviceTreeBlob::GetPropertyValueLength(TDeviceTreeProperty const*) const+0x34>
   122cc:	e3a02d05 	mov	r2, #320	; 0x140
   122d0:	e52d4008 	str	r4, [sp, #-8]!
   122d4:	e58de004 	str	lr, [sp, #4]
   122d8:	e28100b4 	add	r0, r1, #180	; 0xb4
   122dc:	ebffd912 	bl	872c <assertion_failed>
   122e0:	00016478 	.word	0x00016478

000122e4 <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const>:
   122e4:	e3510000 	cmp	r1, #0
   122e8:	0a000003 	beq	122fc <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const+0x18>
   122ec:	e5900000 	ldr	r0, [r0]
   122f0:	e3500000 	cmp	r0, #0
   122f4:	1281000c 	addne	r0, r1, #12
   122f8:	e12fff1e 	bx	lr
   122fc:	e59f1010 	ldr	r1, [pc, #16]	; 12314 <CDeviceTreeBlob::GetPropertyValue(TDeviceTreeProperty const*) const+0x30>
   12300:	e3a02f53 	mov	r2, #332	; 0x14c
   12304:	e52d4008 	str	r4, [sp, #-8]!
   12308:	e58de004 	str	lr, [sp, #4]
   1230c:	e28100b4 	add	r0, r1, #180	; 0xb4
   12310:	ebffd905 	bl	872c <assertion_failed>
   12314:	00016478 	.word	0x00016478

00012318 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const>:
   12318:	e52d4008 	str	r4, [sp, #-8]!
   1231c:	e2514000 	subs	r4, r1, #0
   12320:	e58de004 	str	lr, [sp, #4]
   12324:	e24dd008 	sub	sp, sp, #8
   12328:	0a00001c 	beq	123a0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x88>
   1232c:	e5900000 	ldr	r0, [r0]
   12330:	e3500000 	cmp	r0, #0
   12334:	0a000008 	beq	1235c <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x44>
   12338:	e5943004 	ldr	r3, [r4, #4]
   1233c:	e2822001 	add	r2, r2, #1
   12340:	e1a01102 	lsl	r1, r2, #2
   12344:	e6bf3f33 	rev	r3, r3
   12348:	e1530102 	cmp	r3, r2, lsl #2
   1234c:	3a000006 	bcc	1236c <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x54>
   12350:	e0841001 	add	r1, r4, r1
   12354:	e5910008 	ldr	r0, [r1, #8]
   12358:	e6bf0f30 	rev	r0, r0
   1235c:	e28dd008 	add	sp, sp, #8
   12360:	e59d4000 	ldr	r4, [sp]
   12364:	e28dd004 	add	sp, sp, #4
   12368:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1236c:	ebffddc3 	bl	9a80 <CLogger::Get()>
   12370:	e594c004 	ldr	ip, [r4, #4]
   12374:	e3a02002 	mov	r2, #2
   12378:	e59f3030 	ldr	r3, [pc, #48]	; 123b0 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x98>
   1237c:	e6bfcf3c 	rev	ip, ip
   12380:	e24310c8 	sub	r1, r3, #200	; 0xc8
   12384:	e58dc000 	str	ip, [sp]
   12388:	ebffdcf4 	bl	9760 <CLogger::Write(char const*, TLogSeverity, char const*, ...)>
   1238c:	e3a00000 	mov	r0, #0
   12390:	e28dd008 	add	sp, sp, #8
   12394:	e59d4000 	ldr	r4, [sp]
   12398:	e28dd004 	add	sp, sp, #4
   1239c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   123a0:	e59f100c 	ldr	r1, [pc, #12]	; 123b4 <CDeviceTreeBlob::GetPropertyValueWord(TDeviceTreeProperty const*, unsigned int) const+0x9c>
   123a4:	e3002159 	movw	r2, #345	; 0x159
   123a8:	e28100b4 	add	r0, r1, #180	; 0xb4
   123ac:	ebffd8de 	bl	872c <assertion_failed>
   123b0:	0001653c 	.word	0x0001653c
   123b4:	00016478 	.word	0x00016478

000123b8 <malloc>:
   123b8:	e30936b8 	movw	r3, #38584	; 0x96b8
   123bc:	e3403001 	movt	r3, #1
   123c0:	e5933000 	ldr	r3, [r3]
   123c4:	e1a01000 	mov	r1, r0
   123c8:	e283000c 	add	r0, r3, #12
   123cc:	eafff504 	b	f7e4 <CHeapAllocator::Allocate(unsigned int)>

000123d0 <memalign>:
   123d0:	e3500040 	cmp	r0, #64	; 0x40
   123d4:	8a000004 	bhi	123ec <memalign+0x1c>
   123d8:	e30936b8 	movw	r3, #38584	; 0x96b8
   123dc:	e3403001 	movt	r3, #1
   123e0:	e5930000 	ldr	r0, [r3]
   123e4:	e280000c 	add	r0, r0, #12
   123e8:	eafff4fd 	b	f7e4 <CHeapAllocator::Allocate(unsigned int)>
   123ec:	e3061558 	movw	r1, #25944	; 0x6558
   123f0:	e3401001 	movt	r1, #1
   123f4:	e52d4008 	str	r4, [sp, #-8]!
   123f8:	e281000c 	add	r0, r1, #12
   123fc:	e3a02021 	mov	r2, #33	; 0x21
   12400:	e58de004 	str	lr, [sp, #4]
   12404:	ebffd8c8 	bl	872c <assertion_failed>

00012408 <free>:
   12408:	e30936b8 	movw	r3, #38584	; 0x96b8
   1240c:	e3403001 	movt	r3, #1
   12410:	e3700107 	cmn	r0, #-1073741823	; 0xc0000001
   12414:	e1a01000 	mov	r1, r0
   12418:	e5930000 	ldr	r0, [r3]
   1241c:	8a000001 	bhi	12428 <free+0x20>
   12420:	e280000c 	add	r0, r0, #12
   12424:	eafff590 	b	fa6c <CHeapAllocator::Free(void*)>
   12428:	e28000c8 	add	r0, r0, #200	; 0xc8
   1242c:	eafff58e 	b	fa6c <CHeapAllocator::Free(void*)>

00012430 <calloc>:
   12430:	e16d41f0 	strd	r4, [sp, #-16]!
   12434:	e0040190 	mul	r4, r0, r1
   12438:	e58d6008 	str	r6, [sp, #8]
   1243c:	e58de00c 	str	lr, [sp, #12]
   12440:	e3540001 	cmp	r4, #1
   12444:	33a04001 	movcc	r4, #1
   12448:	e1500004 	cmp	r0, r4
   1244c:	8a00000f 	bhi	12490 <calloc+0x60>
   12450:	e30936b8 	movw	r3, #38584	; 0x96b8
   12454:	e3403001 	movt	r3, #1
   12458:	e5930000 	ldr	r0, [r3]
   1245c:	e1a01004 	mov	r1, r4
   12460:	e280000c 	add	r0, r0, #12
   12464:	ebfff4de 	bl	f7e4 <CHeapAllocator::Allocate(unsigned int)>
   12468:	e2505000 	subs	r5, r0, #0
   1246c:	0a000002 	beq	1247c <calloc+0x4c>
   12470:	e1a02004 	mov	r2, r4
   12474:	e3a01000 	mov	r1, #0
   12478:	ebfff15a 	bl	e9e8 <memset>
   1247c:	e1a00005 	mov	r0, r5
   12480:	e1cd40d0 	ldrd	r4, [sp]
   12484:	e59d6008 	ldr	r6, [sp, #8]
   12488:	e28dd00c 	add	sp, sp, #12
   1248c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12490:	e3061558 	movw	r1, #25944	; 0x6558
   12494:	e3401001 	movt	r1, #1
   12498:	e2810028 	add	r0, r1, #40	; 0x28
   1249c:	e3a02031 	mov	r2, #49	; 0x31
   124a0:	ebffd8a1 	bl	872c <assertion_failed>

000124a4 <realloc>:
   124a4:	e30936b8 	movw	r3, #38584	; 0x96b8
   124a8:	e3403001 	movt	r3, #1
   124ac:	e3700107 	cmn	r0, #-1073741823	; 0xc0000001
   124b0:	e1a02001 	mov	r2, r1
   124b4:	e5933000 	ldr	r3, [r3]
   124b8:	e1a01000 	mov	r1, r0
   124bc:	8a000001 	bhi	124c8 <realloc+0x24>
   124c0:	e283000c 	add	r0, r3, #12
   124c4:	eafff537 	b	f9a8 <CHeapAllocator::ReAllocate(void*, unsigned int)>
   124c8:	e28300c8 	add	r0, r3, #200	; 0xc8
   124cc:	eafff535 	b	f9a8 <CHeapAllocator::ReAllocate(void*, unsigned int)>

000124d0 <palloc>:
   124d0:	e30936b8 	movw	r3, #38584	; 0x96b8
   124d4:	e3403001 	movt	r3, #1
   124d8:	e5930000 	ldr	r0, [r3]
   124dc:	e2800f61 	add	r0, r0, #388	; 0x184
   124e0:	ea000777 	b	142c4 <CPageAllocator::Allocate()>

000124e4 <pfree>:
   124e4:	e30936b8 	movw	r3, #38584	; 0x96b8
   124e8:	e3403001 	movt	r3, #1
   124ec:	e5933000 	ldr	r3, [r3]
   124f0:	e1a01000 	mov	r1, r0
   124f4:	e2830f61 	add	r0, r3, #388	; 0x184
   124f8:	ea0007a8 	b	143a0 <CPageAllocator::Free(void*)>

000124fc <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)>:
   124fc:	e309c714 	movw	ip, #38676	; 0x9714
   12500:	e340c001 	movt	ip, #1
   12504:	e16d41f0 	strd	r4, [sp, #-16]!
   12508:	e58d6008 	str	r6, [sp, #8]
   1250c:	e1a04000 	mov	r4, r0
   12510:	e58de00c 	str	lr, [sp, #12]
   12514:	e24dd028 	sub	sp, sp, #40	; 0x28
   12518:	e59ce000 	ldr	lr, [ip]
   1251c:	e3a0c000 	mov	ip, #0
   12520:	e8800006 	stm	r0, {r1, r2}
   12524:	e5803010 	str	r3, [r0, #16]
   12528:	e59d6038 	ldr	r6, [sp, #56]	; 0x38
   1252c:	e59d003c 	ldr	r0, [sp, #60]	; 0x3c
   12530:	e15e000c 	cmp	lr, ip
   12534:	e59d5040 	ldr	r5, [sp, #64]	; 0x40
   12538:	e5846008 	str	r6, [r4, #8]
   1253c:	e5dd6044 	ldrb	r6, [sp, #68]	; 0x44
   12540:	e584000c 	str	r0, [r4, #12]
   12544:	e584c018 	str	ip, [r4, #24]
   12548:	e5845014 	str	r5, [r4, #20]
   1254c:	e584c01c 	str	ip, [r4, #28]
   12550:	e584c020 	str	ip, [r4, #32]
   12554:	e584c024 	str	ip, [r4, #36]	; 0x24
   12558:	1a000001 	bne	12564 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x68>
   1255c:	eb000198 	bl	12bc4 <CBcmFrameBuffer::GetNumDisplays() [clone .part.0]>
   12560:	e1a0e000 	mov	lr, r0
   12564:	e155000e 	cmp	r5, lr
   12568:	2a000038 	bcs	12650 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x154>
   1256c:	e5943000 	ldr	r3, [r4]
   12570:	e3530000 	cmp	r3, #0
   12574:	1a00003b 	bne	12668 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x16c>
   12578:	e3083078 	movw	r3, #32888	; 0x8078
   1257c:	e3403001 	movt	r3, #1
   12580:	e5942014 	ldr	r2, [r4, #20]
   12584:	e5933000 	ldr	r3, [r3]
   12588:	e1520003 	cmp	r2, r3
   1258c:	0a000001 	beq	12598 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x9c>
   12590:	e1a00004 	mov	r0, r4
   12594:	eb00013f 	bl	12a98 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   12598:	e3a01000 	mov	r1, #0
   1259c:	e28d000c 	add	r0, sp, #12
   125a0:	eb0001a2 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   125a4:	e3a02000 	mov	r2, #0
   125a8:	e3a03014 	mov	r3, #20
   125ac:	e28d000c 	add	r0, sp, #12
   125b0:	e3a01003 	mov	r1, #3
   125b4:	e3401004 	movt	r1, #4
   125b8:	e58d2000 	str	r2, [sp]
   125bc:	e08d2003 	add	r2, sp, r3
   125c0:	eb0001ac 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   125c4:	e3500000 	cmp	r0, #0
   125c8:	0a000006 	beq	125e8 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xec>
   125cc:	e1cd22d0 	ldrd	r2, [sp, #32]
   125d0:	e2421d0a 	sub	r1, r2, #640	; 0x280
   125d4:	e1c420f0 	strd	r2, [r4]
   125d8:	e2432e1e 	sub	r2, r3, #480	; 0x1e0
   125dc:	e3510d36 	cmp	r1, #3456	; 0xd80
   125e0:	93520e69 	cmpls	r2, #1680	; 0x690
   125e4:	9a000002 	bls	125f4 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0xf8>
   125e8:	e3a02d0a 	mov	r2, #640	; 0x280
   125ec:	e3a03e1e 	mov	r3, #480	; 0x1e0
   125f0:	e1c420f0 	strd	r2, [r4]
   125f4:	e28d000c 	add	r0, sp, #12
   125f8:	eb000196 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   125fc:	e5943008 	ldr	r3, [r4, #8]
   12600:	e3530000 	cmp	r3, #0
   12604:	0a00001d 	beq	12680 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x184>
   12608:	e594300c 	ldr	r3, [r4, #12]
   1260c:	e3530000 	cmp	r3, #0
   12610:	0a00001a 	beq	12680 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x184>
   12614:	e5943010 	ldr	r3, [r4, #16]
   12618:	e3530008 	cmp	r3, #8
   1261c:	9a00001d 	bls	12698 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x19c>
   12620:	e3a02070 	mov	r2, #112	; 0x70
   12624:	e3061594 	movw	r1, #26004	; 0x6594
   12628:	e3401001 	movt	r1, #1
   1262c:	e2840028 	add	r0, r4, #40	; 0x28
   12630:	ebfff37c 	bl	f428 <memcpy>
   12634:	e1c420d0 	ldrd	r2, [r4]
   12638:	e5941008 	ldr	r1, [r4, #8]
   1263c:	e1c423f4 	strd	r2, [r4, #52]	; 0x34
   12640:	e1c420dc 	ldrd	r2, [r4, #12]
   12644:	e5841048 	str	r1, [r4, #72]	; 0x48
   12648:	e584204c 	str	r2, [r4, #76]	; 0x4c
   1264c:	e584305c 	str	r3, [r4, #92]	; 0x5c
   12650:	e1a00004 	mov	r0, r4
   12654:	e28dd028 	add	sp, sp, #40	; 0x28
   12658:	e1cd40d0 	ldrd	r4, [sp]
   1265c:	e59d6008 	ldr	r6, [sp, #8]
   12660:	e28dd00c 	add	sp, sp, #12
   12664:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12668:	e5943004 	ldr	r3, [r4, #4]
   1266c:	e3530000 	cmp	r3, #0
   12670:	0affffc0 	beq	12578 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x7c>
   12674:	e5943008 	ldr	r3, [r4, #8]
   12678:	e3530000 	cmp	r3, #0
   1267c:	1affffe1 	bne	12608 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x10c>
   12680:	e1c420d0 	ldrd	r2, [r4]
   12684:	e0233396 	mla	r3, r6, r3, r3
   12688:	e1c420f8 	strd	r2, [r4, #8]
   1268c:	e5943010 	ldr	r3, [r4, #16]
   12690:	e3530008 	cmp	r3, #8
   12694:	8affffe1 	bhi	12620 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x124>
   12698:	e3000414 	movw	r0, #1044	; 0x414
   1269c:	ebfff405 	bl	f6b8 <operator new[](unsigned int)>
   126a0:	e1a03000 	mov	r3, r0
   126a4:	e3a02b01 	mov	r2, #1024	; 0x400
   126a8:	e3a01000 	mov	r1, #0
   126ac:	e2800014 	add	r0, r0, #20
   126b0:	e5843024 	str	r3, [r4, #36]	; 0x24
   126b4:	ebfff0cb 	bl	e9e8 <memset>
   126b8:	eaffffd8 	b	12620 <CBcmFrameBuffer::CBcmFrameBuffer(unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int, bool)+0x124>

000126bc <CBcmFrameBuffer::~CBcmFrameBuffer()>:
   126bc:	e52d4008 	str	r4, [sp, #-8]!
   126c0:	e1a04000 	mov	r4, r0
   126c4:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   126c8:	e58de004 	str	lr, [sp, #4]
   126cc:	e3500000 	cmp	r0, #0
   126d0:	0a000001 	beq	126dc <CBcmFrameBuffer::~CBcmFrameBuffer()+0x20>
   126d4:	e3a01014 	mov	r1, #20
   126d8:	ebfff40b 	bl	f70c <operator delete(void*, unsigned int)>
   126dc:	e1a00004 	mov	r0, r4
   126e0:	e59d4000 	ldr	r4, [sp]
   126e4:	e28dd004 	add	sp, sp, #4
   126e8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000126ec <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)>:
   126ec:	e5903010 	ldr	r3, [r0, #16]
   126f0:	e3530008 	cmp	r3, #8
   126f4:	8a00000a 	bhi	12724 <CBcmFrameBuffer::SetPalette(unsigned char, unsigned short)+0x38>
   126f8:	e1a03982 	lsl	r3, r2, #19
   126fc:	e5900024 	ldr	r0, [r0, #36]	; 0x24
   12700:	e1a0c5a2 	lsr	ip, r2, #11
   12704:	e203373e 	and	r3, r3, #16252928	; 0xf80000
   12708:	e1a02282 	lsl	r2, r2, #5
   1270c:	e183318c 	orr	r3, r3, ip, lsl #3
   12710:	e2022b3f 	and	r2, r2, #64512	; 0xfc00
   12714:	e0801101 	add	r1, r0, r1, lsl #2
   12718:	e1822003 	orr	r2, r2, r3
   1271c:	e38224ff 	orr	r2, r2, #-16777216	; 0xff000000
   12720:	e5812014 	str	r2, [r1, #20]
   12724:	e12fff1e 	bx	lr

00012728 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)>:
   12728:	e5903010 	ldr	r3, [r0, #16]
   1272c:	e3530008 	cmp	r3, #8
   12730:	8a000002 	bhi	12740 <CBcmFrameBuffer::SetPalette32(unsigned char, unsigned int)+0x18>
   12734:	e5903024 	ldr	r3, [r0, #36]	; 0x24
   12738:	e0831101 	add	r1, r3, r1, lsl #2
   1273c:	e5812014 	str	r2, [r1, #20]
   12740:	e12fff1e 	bx	lr

00012744 <CBcmFrameBuffer::Initialize()>:
   12744:	e3093714 	movw	r3, #38676	; 0x9714
   12748:	e3403001 	movt	r3, #1
   1274c:	e16d40fc 	strd	r4, [sp, #-12]!
   12750:	e5933000 	ldr	r3, [r3]
   12754:	e1a04000 	mov	r4, r0
   12758:	e5905014 	ldr	r5, [r0, #20]
   1275c:	e58de008 	str	lr, [sp, #8]
   12760:	e24dd00c 	sub	sp, sp, #12
   12764:	e3530000 	cmp	r3, #0
   12768:	1a000001 	bne	12774 <CBcmFrameBuffer::Initialize()+0x30>
   1276c:	eb000114 	bl	12bc4 <CBcmFrameBuffer::GetNumDisplays() [clone .part.0]>
   12770:	e1a03000 	mov	r3, r0
   12774:	e1550003 	cmp	r5, r3
   12778:	23a05000 	movcs	r5, #0
   1277c:	2a000030 	bcs	12844 <CBcmFrameBuffer::Initialize()+0x100>
   12780:	e3083078 	movw	r3, #32888	; 0x8078
   12784:	e3403001 	movt	r3, #1
   12788:	e5942014 	ldr	r2, [r4, #20]
   1278c:	e5933000 	ldr	r3, [r3]
   12790:	e1520003 	cmp	r2, r3
   12794:	0a000001 	beq	127a0 <CBcmFrameBuffer::Initialize()+0x5c>
   12798:	e1a00004 	mov	r0, r4
   1279c:	eb0000bd 	bl	12a98 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   127a0:	e3a01000 	mov	r1, #0
   127a4:	e1a0000d 	mov	r0, sp
   127a8:	eb000120 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   127ac:	e1a0000d 	mov	r0, sp
   127b0:	e3a02070 	mov	r2, #112	; 0x70
   127b4:	e2841028 	add	r1, r4, #40	; 0x28
   127b8:	eb000151 	bl	12d04 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   127bc:	e2505000 	subs	r5, r0, #0
   127c0:	0a00001d 	beq	1283c <CBcmFrameBuffer::Initialize()+0xf8>
   127c4:	e5943034 	ldr	r3, [r4, #52]	; 0x34
   127c8:	e3530000 	cmp	r3, #0
   127cc:	0a000021 	beq	12858 <CBcmFrameBuffer::Initialize()+0x114>
   127d0:	e5943038 	ldr	r3, [r4, #56]	; 0x38
   127d4:	e3530000 	cmp	r3, #0
   127d8:	0a00001e 	beq	12858 <CBcmFrameBuffer::Initialize()+0x114>
   127dc:	e5943048 	ldr	r3, [r4, #72]	; 0x48
   127e0:	e3530000 	cmp	r3, #0
   127e4:	0a00001b 	beq	12858 <CBcmFrameBuffer::Initialize()+0x114>
   127e8:	e594304c 	ldr	r3, [r4, #76]	; 0x4c
   127ec:	e3530000 	cmp	r3, #0
   127f0:	0a000018 	beq	12858 <CBcmFrameBuffer::Initialize()+0x114>
   127f4:	e594305c 	ldr	r3, [r4, #92]	; 0x5c
   127f8:	e3530000 	cmp	r3, #0
   127fc:	0a000015 	beq	12858 <CBcmFrameBuffer::Initialize()+0x114>
   12800:	e5943080 	ldr	r3, [r4, #128]	; 0x80
   12804:	e3530000 	cmp	r3, #0
   12808:	0a000012 	beq	12858 <CBcmFrameBuffer::Initialize()+0x114>
   1280c:	e3c33103 	bic	r3, r3, #-1073741824	; 0xc0000000
   12810:	e5941010 	ldr	r1, [r4, #16]
   12814:	e5843018 	str	r3, [r4, #24]
   12818:	e5942084 	ldr	r2, [r4, #132]	; 0x84
   1281c:	e5943094 	ldr	r3, [r4, #148]	; 0x94
   12820:	e3510008 	cmp	r1, #8
   12824:	e584201c 	str	r2, [r4, #28]
   12828:	e5843020 	str	r3, [r4, #32]
   1282c:	8a000002 	bhi	1283c <CBcmFrameBuffer::Initialize()+0xf8>
   12830:	e1a00004 	mov	r0, r4
   12834:	eb0000b4 	bl	12b0c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   12838:	e1a05000 	mov	r5, r0
   1283c:	e1a0000d 	mov	r0, sp
   12840:	eb000104 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   12844:	e1a00005 	mov	r0, r5
   12848:	e28dd00c 	add	sp, sp, #12
   1284c:	e1cd40d0 	ldrd	r4, [sp]
   12850:	e28dd008 	add	sp, sp, #8
   12854:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12858:	e1a05003 	mov	r5, r3
   1285c:	eafffff6 	b	1283c <CBcmFrameBuffer::Initialize()+0xf8>

00012860 <CBcmFrameBuffer::GetWidth() const>:
   12860:	e5900000 	ldr	r0, [r0]
   12864:	e12fff1e 	bx	lr

00012868 <CBcmFrameBuffer::GetHeight() const>:
   12868:	e5900004 	ldr	r0, [r0, #4]
   1286c:	e12fff1e 	bx	lr

00012870 <CBcmFrameBuffer::GetVirtWidth() const>:
   12870:	e5900008 	ldr	r0, [r0, #8]
   12874:	e12fff1e 	bx	lr

00012878 <CBcmFrameBuffer::GetVirtHeight() const>:
   12878:	e590000c 	ldr	r0, [r0, #12]
   1287c:	e12fff1e 	bx	lr

00012880 <CBcmFrameBuffer::GetPitch() const>:
   12880:	e5900020 	ldr	r0, [r0, #32]
   12884:	e12fff1e 	bx	lr

00012888 <CBcmFrameBuffer::GetDepth() const>:
   12888:	e5900010 	ldr	r0, [r0, #16]
   1288c:	e12fff1e 	bx	lr

00012890 <CBcmFrameBuffer::GetBuffer() const>:
   12890:	e5900018 	ldr	r0, [r0, #24]
   12894:	e12fff1e 	bx	lr

00012898 <CBcmFrameBuffer::GetSize() const>:
   12898:	e590001c 	ldr	r0, [r0, #28]
   1289c:	e12fff1e 	bx	lr

000128a0 <CBcmFrameBuffer::UpdatePalette()>:
   128a0:	e5903010 	ldr	r3, [r0, #16]
   128a4:	e3530008 	cmp	r3, #8
   128a8:	8a000000 	bhi	128b0 <CBcmFrameBuffer::UpdatePalette()+0x10>
   128ac:	ea000096 	b	12b0c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>
   128b0:	e3a00001 	mov	r0, #1
   128b4:	e12fff1e 	bx	lr

000128b8 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)>:
   128b8:	e3083078 	movw	r3, #32888	; 0x8078
   128bc:	e3403001 	movt	r3, #1
   128c0:	e16d41f0 	strd	r4, [sp, #-16]!
   128c4:	e1a05001 	mov	r5, r1
   128c8:	e5933000 	ldr	r3, [r3]
   128cc:	e5901014 	ldr	r1, [r0, #20]
   128d0:	e58d6008 	str	r6, [sp, #8]
   128d4:	e1a06002 	mov	r6, r2
   128d8:	e58de00c 	str	lr, [sp, #12]
   128dc:	e24dd028 	sub	sp, sp, #40	; 0x28
   128e0:	e1510003 	cmp	r1, r3
   128e4:	0a000000 	beq	128ec <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x34>
   128e8:	eb00006a 	bl	12a98 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   128ec:	e3a01000 	mov	r1, #0
   128f0:	e28d000c 	add	r0, sp, #12
   128f4:	eb0000cd 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   128f8:	e3a02008 	mov	r2, #8
   128fc:	e3a03014 	mov	r3, #20
   12900:	e28d000c 	add	r0, sp, #12
   12904:	e3081009 	movw	r1, #32777	; 0x8009
   12908:	e3401004 	movt	r1, #4
   1290c:	e58d2000 	str	r2, [sp]
   12910:	e08d2003 	add	r2, sp, r3
   12914:	e58d5020 	str	r5, [sp, #32]
   12918:	e58d6024 	str	r6, [sp, #36]	; 0x24
   1291c:	eb0000d5 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12920:	e2504000 	subs	r4, r0, #0
   12924:	0a000003 	beq	12938 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x80>
   12928:	e59d3020 	ldr	r3, [sp, #32]
   1292c:	e1530005 	cmp	r3, r5
   12930:	13a04000 	movne	r4, #0
   12934:	0a000007 	beq	12958 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0xa0>
   12938:	e28d000c 	add	r0, sp, #12
   1293c:	eb0000c5 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   12940:	e1a00004 	mov	r0, r4
   12944:	e28dd028 	add	sp, sp, #40	; 0x28
   12948:	e1cd40d0 	ldrd	r4, [sp]
   1294c:	e59d6008 	ldr	r6, [sp, #8]
   12950:	e28dd00c 	add	sp, sp, #12
   12954:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12958:	e59d0024 	ldr	r0, [sp, #36]	; 0x24
   1295c:	e0404006 	sub	r4, r0, r6
   12960:	e16f4f14 	clz	r4, r4
   12964:	e1a042a4 	lsr	r4, r4, #5
   12968:	eafffff2 	b	12938 <CBcmFrameBuffer::SetVirtualOffset(unsigned int, unsigned int)+0x80>

0001296c <CBcmFrameBuffer::WaitForVerticalSync()>:
   1296c:	e3083078 	movw	r3, #32888	; 0x8078
   12970:	e3403001 	movt	r3, #1
   12974:	e5902014 	ldr	r2, [r0, #20]
   12978:	e52d4008 	str	r4, [sp, #-8]!
   1297c:	e5933000 	ldr	r3, [r3]
   12980:	e58de004 	str	lr, [sp, #4]
   12984:	e24dd020 	sub	sp, sp, #32
   12988:	e1520003 	cmp	r2, r3
   1298c:	0a000000 	beq	12994 <CBcmFrameBuffer::WaitForVerticalSync()+0x28>
   12990:	eb000040 	bl	12a98 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   12994:	e3a01000 	mov	r1, #0
   12998:	e28d0008 	add	r0, sp, #8
   1299c:	eb0000a3 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   129a0:	e3a02000 	mov	r2, #0
   129a4:	e3a03010 	mov	r3, #16
   129a8:	e28d0008 	add	r0, sp, #8
   129ac:	e308100e 	movw	r1, #32782	; 0x800e
   129b0:	e3401004 	movt	r1, #4
   129b4:	e58d2000 	str	r2, [sp]
   129b8:	e08d2003 	add	r2, sp, r3
   129bc:	eb0000ad 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   129c0:	e1a04000 	mov	r4, r0
   129c4:	e28d0008 	add	r0, sp, #8
   129c8:	eb0000a2 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   129cc:	e1a00004 	mov	r0, r4
   129d0:	e28dd020 	add	sp, sp, #32
   129d4:	e59d4000 	ldr	r4, [sp]
   129d8:	e28dd004 	add	sp, sp, #4
   129dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

000129e0 <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)>:
   129e0:	e3083078 	movw	r3, #32888	; 0x8078
   129e4:	e3403001 	movt	r3, #1
   129e8:	e5902014 	ldr	r2, [r0, #20]
   129ec:	e52d4008 	str	r4, [sp, #-8]!
   129f0:	e1a04001 	mov	r4, r1
   129f4:	e5933000 	ldr	r3, [r3]
   129f8:	e58de004 	str	lr, [sp, #4]
   129fc:	e24dd020 	sub	sp, sp, #32
   12a00:	e1520003 	cmp	r2, r3
   12a04:	0a000000 	beq	12a0c <CBcmFrameBuffer::SetBacklightBrightness(unsigned int)+0x2c>
   12a08:	eb000022 	bl	12a98 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   12a0c:	e3a01000 	mov	r1, #0
   12a10:	e28d0008 	add	r0, sp, #8
   12a14:	eb000085 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12a18:	e3a02004 	mov	r2, #4
   12a1c:	e3a03010 	mov	r3, #16
   12a20:	e28d0008 	add	r0, sp, #8
   12a24:	e308100f 	movw	r1, #32783	; 0x800f
   12a28:	e3401004 	movt	r1, #4
   12a2c:	e58d2000 	str	r2, [sp]
   12a30:	e08d2003 	add	r2, sp, r3
   12a34:	e58d401c 	str	r4, [sp, #28]
   12a38:	eb00008e 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12a3c:	e1a04000 	mov	r4, r0
   12a40:	e28d0008 	add	r0, sp, #8
   12a44:	eb000083 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   12a48:	e1a00004 	mov	r0, r4
   12a4c:	e28dd020 	add	sp, sp, #32
   12a50:	e59d4000 	ldr	r4, [sp]
   12a54:	e28dd004 	add	sp, sp, #4
   12a58:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00012a5c <CBcmFrameBuffer::SetDisplay()>:
   12a5c:	e3083078 	movw	r3, #32888	; 0x8078
   12a60:	e3403001 	movt	r3, #1
   12a64:	e5902014 	ldr	r2, [r0, #20]
   12a68:	e5933000 	ldr	r3, [r3]
   12a6c:	e1520003 	cmp	r2, r3
   12a70:	0a000000 	beq	12a78 <CBcmFrameBuffer::SetDisplay()+0x1c>
   12a74:	ea000007 	b	12a98 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   12a78:	e12fff1e 	bx	lr

00012a7c <CBcmFrameBuffer::GetNumDisplays()>:
   12a7c:	e3093714 	movw	r3, #38676	; 0x9714
   12a80:	e3403001 	movt	r3, #1
   12a84:	e5930000 	ldr	r0, [r3]
   12a88:	e3500000 	cmp	r0, #0
   12a8c:	0a000000 	beq	12a94 <CBcmFrameBuffer::GetNumDisplays()+0x18>
   12a90:	e12fff1e 	bx	lr
   12a94:	ea00004a 	b	12bc4 <CBcmFrameBuffer::GetNumDisplays() [clone .part.0]>

00012a98 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>:
   12a98:	e52d4008 	str	r4, [sp, #-8]!
   12a9c:	e3a01000 	mov	r1, #0
   12aa0:	e1a04000 	mov	r4, r0
   12aa4:	e58de004 	str	lr, [sp, #4]
   12aa8:	e24dd020 	sub	sp, sp, #32
   12aac:	e28d0008 	add	r0, sp, #8
   12ab0:	eb00005e 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12ab4:	e594c014 	ldr	ip, [r4, #20]
   12ab8:	e3a03004 	mov	r3, #4
   12abc:	e28d0008 	add	r0, sp, #8
   12ac0:	e3081013 	movw	r1, #32787	; 0x8013
   12ac4:	e3401004 	movt	r1, #4
   12ac8:	e58d3000 	str	r3, [sp]
   12acc:	e3a03010 	mov	r3, #16
   12ad0:	e08d2003 	add	r2, sp, r3
   12ad4:	e58dc01c 	str	ip, [sp, #28]
   12ad8:	eb000066 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12adc:	e3500000 	cmp	r0, #0
   12ae0:	0a000003 	beq	12af4 <CBcmFrameBuffer::SetDisplay() [clone .part.0]+0x5c>
   12ae4:	e5942014 	ldr	r2, [r4, #20]
   12ae8:	e3083078 	movw	r3, #32888	; 0x8078
   12aec:	e3403001 	movt	r3, #1
   12af0:	e5832000 	str	r2, [r3]
   12af4:	e28d0008 	add	r0, sp, #8
   12af8:	eb000056 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   12afc:	e28dd020 	add	sp, sp, #32
   12b00:	e59d4000 	ldr	r4, [sp]
   12b04:	e28dd004 	add	sp, sp, #4
   12b08:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00012b0c <CBcmFrameBuffer::UpdatePalette() [clone .part.0]>:
   12b0c:	e3083078 	movw	r3, #32888	; 0x8078
   12b10:	e3403001 	movt	r3, #1
   12b14:	e5902014 	ldr	r2, [r0, #20]
   12b18:	e16d40fc 	strd	r4, [sp, #-12]!
   12b1c:	e1a04000 	mov	r4, r0
   12b20:	e5933000 	ldr	r3, [r3]
   12b24:	e58de008 	str	lr, [sp, #8]
   12b28:	e24dd014 	sub	sp, sp, #20
   12b2c:	e1520003 	cmp	r2, r3
   12b30:	0a000000 	beq	12b38 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x2c>
   12b34:	ebffffd7 	bl	12a98 <CBcmFrameBuffer::SetDisplay() [clone .part.0]>
   12b38:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12b3c:	e3a01000 	mov	r1, #0
   12b40:	e3a02001 	mov	r2, #1
   12b44:	e28d0008 	add	r0, sp, #8
   12b48:	e5c3100c 	strb	r1, [r3, #12]
   12b4c:	e5c3100d 	strb	r1, [r3, #13]
   12b50:	e5c3100e 	strb	r1, [r3, #14]
   12b54:	e5c3100f 	strb	r1, [r3, #15]
   12b58:	e5c31010 	strb	r1, [r3, #16]
   12b5c:	e5c32011 	strb	r2, [r3, #17]
   12b60:	e5c31012 	strb	r1, [r3, #18]
   12b64:	e5c31013 	strb	r1, [r3, #19]
   12b68:	eb000030 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12b6c:	e3003408 	movw	r3, #1032	; 0x408
   12b70:	e28d0008 	add	r0, sp, #8
   12b74:	e5942024 	ldr	r2, [r4, #36]	; 0x24
   12b78:	e308100b 	movw	r1, #32779	; 0x800b
   12b7c:	e3401004 	movt	r1, #4
   12b80:	e58d3000 	str	r3, [sp]
   12b84:	e3003414 	movw	r3, #1044	; 0x414
   12b88:	eb00003a 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12b8c:	e2505000 	subs	r5, r0, #0
   12b90:	e28d0008 	add	r0, sp, #8
   12b94:	0a000003 	beq	12ba8 <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0x9c>
   12b98:	e5943024 	ldr	r3, [r4, #36]	; 0x24
   12b9c:	e593300c 	ldr	r3, [r3, #12]
   12ba0:	e3530000 	cmp	r3, #0
   12ba4:	0a000000 	beq	12bac <CBcmFrameBuffer::UpdatePalette() [clone .part.0]+0xa0>
   12ba8:	e3a05000 	mov	r5, #0
   12bac:	eb000029 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   12bb0:	e1a00005 	mov	r0, r5
   12bb4:	e28dd014 	add	sp, sp, #20
   12bb8:	e1cd40d0 	ldrd	r4, [sp]
   12bbc:	e28dd008 	add	sp, sp, #8
   12bc0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00012bc4 <CBcmFrameBuffer::GetNumDisplays() [clone .part.0]>:
   12bc4:	e52d4008 	str	r4, [sp, #-8]!
   12bc8:	e3a01000 	mov	r1, #0
   12bcc:	e58de004 	str	lr, [sp, #4]
   12bd0:	e24dd020 	sub	sp, sp, #32
   12bd4:	e28d0008 	add	r0, sp, #8
   12bd8:	eb000014 	bl	12c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>
   12bdc:	e3a02000 	mov	r2, #0
   12be0:	e3a03010 	mov	r3, #16
   12be4:	e28d0008 	add	r0, sp, #8
   12be8:	e3a01013 	mov	r1, #19
   12bec:	e3401004 	movt	r1, #4
   12bf0:	e58d2000 	str	r2, [sp]
   12bf4:	e08d2003 	add	r2, sp, r3
   12bf8:	eb00001e 	bl	12c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>
   12bfc:	e3500000 	cmp	r0, #0
   12c00:	e3093714 	movw	r3, #38676	; 0x9714
   12c04:	e3403001 	movt	r3, #1
   12c08:	159d401c 	ldrne	r4, [sp, #28]
   12c0c:	03a04001 	moveq	r4, #1
   12c10:	e28d0008 	add	r0, sp, #8
   12c14:	e5834000 	str	r4, [r3]
   12c18:	eb00000e 	bl	12c58 <CBcmPropertyTags::~CBcmPropertyTags()>
   12c1c:	e1a00004 	mov	r0, r4
   12c20:	e28dd020 	add	sp, sp, #32
   12c24:	e59d4000 	ldr	r4, [sp]
   12c28:	e28dd004 	add	sp, sp, #4
   12c2c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00012c30 <CBcmPropertyTags::CBcmPropertyTags(bool)>:
   12c30:	e1a02001 	mov	r2, r1
   12c34:	e3a01008 	mov	r1, #8
   12c38:	e52d4008 	str	r4, [sp, #-8]!
   12c3c:	e1a04000 	mov	r4, r0
   12c40:	e58de004 	str	lr, [sp, #4]
   12c44:	eb0008f2 	bl	15014 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>
   12c48:	e1a00004 	mov	r0, r4
   12c4c:	e59d4000 	ldr	r4, [sp]
   12c50:	e28dd004 	add	sp, sp, #4
   12c54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00012c58 <CBcmPropertyTags::~CBcmPropertyTags()>:
   12c58:	e52d4008 	str	r4, [sp, #-8]!
   12c5c:	e1a04000 	mov	r4, r0
   12c60:	e58de004 	str	lr, [sp, #4]
   12c64:	eb0008ed 	bl	15020 <CBcmMailBox::~CBcmMailBox()>
   12c68:	e1a00004 	mov	r0, r4
   12c6c:	e59d4000 	ldr	r4, [sp]
   12c70:	e28dd004 	add	sp, sp, #4
   12c74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00012c78 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)>:
   12c78:	e52d4008 	str	r4, [sp, #-8]!
   12c7c:	e2524000 	subs	r4, r2, #0
   12c80:	e58de004 	str	lr, [sp, #4]
   12c84:	0a000014 	beq	12cdc <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x64>
   12c88:	e353000f 	cmp	r3, #15
   12c8c:	e1a02003 	mov	r2, r3
   12c90:	9a000016 	bls	12cf0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x78>
   12c94:	e243c00c 	sub	ip, r3, #12
   12c98:	e59d3008 	ldr	r3, [sp, #8]
   12c9c:	e5841000 	str	r1, [r4]
   12ca0:	e1a01004 	mov	r1, r4
   12ca4:	e584c004 	str	ip, [r4, #4]
   12ca8:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   12cac:	e5843008 	str	r3, [r4, #8]
   12cb0:	eb000013 	bl	12d04 <CBcmPropertyTags::GetTags(void*, unsigned int)>
   12cb4:	e3500000 	cmp	r0, #0
   12cb8:	0a000004 	beq	12cd0 <CBcmPropertyTags::GetTag(unsigned int, void*, unsigned int, unsigned int)+0x58>
   12cbc:	e5943008 	ldr	r3, [r4, #8]
   12cc0:	e3c33102 	bic	r3, r3, #-2147483648	; 0x80000000
   12cc4:	e2530000 	subs	r0, r3, #0
   12cc8:	13a00001 	movne	r0, #1
   12ccc:	e5843008 	str	r3, [r4, #8]
   12cd0:	e59d4000 	ldr	r4, [sp]
   12cd4:	e28dd004 	add	sp, sp, #4
   12cd8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12cdc:	e3061604 	movw	r1, #26116	; 0x6604
   12ce0:	e3401001 	movt	r1, #1
   12ce4:	e2810014 	add	r0, r1, #20
   12ce8:	e3a02033 	mov	r2, #51	; 0x33
   12cec:	ebffd68e 	bl	872c <assertion_failed>
   12cf0:	e3061604 	movw	r1, #26116	; 0x6604
   12cf4:	e3401001 	movt	r1, #1
   12cf8:	e2810020 	add	r0, r1, #32
   12cfc:	e3a02034 	mov	r2, #52	; 0x34
   12d00:	ebffd689 	bl	872c <assertion_failed>

00012d04 <CBcmPropertyTags::GetTags(void*, unsigned int)>:
   12d04:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
   12d08:	e1cd60f8 	strd	r6, [sp, #8]
   12d0c:	e1cd81f0 	strd	r8, [sp, #16]
   12d10:	e2518000 	subs	r8, r1, #0
   12d14:	e58da018 	str	sl, [sp, #24]
   12d18:	e58de01c 	str	lr, [sp, #28]
   12d1c:	0a00002c 	beq	12dd4 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xd0>
   12d20:	e352000f 	cmp	r2, #15
   12d24:	e1a04002 	mov	r4, r2
   12d28:	9a00002e 	bls	12de8 <CBcmPropertyTags::GetTags(void*, unsigned int)+0xe4>
   12d2c:	e2126003 	ands	r6, r2, #3
   12d30:	e282a00c 	add	sl, r2, #12
   12d34:	1a000030 	bne	12dfc <CBcmPropertyTags::GetTags(void*, unsigned int)+0xf8>
   12d38:	e1a09000 	mov	r9, r0
   12d3c:	e1a00006 	mov	r0, r6
   12d40:	ebfff90f 	bl	11184 <CMemorySystem::GetCoherentPage(unsigned int)>
   12d44:	e1a05000 	mov	r5, r0
   12d48:	e2807008 	add	r7, r0, #8
   12d4c:	e580a000 	str	sl, [r0]
   12d50:	e1a02004 	mov	r2, r4
   12d54:	e1a01008 	mov	r1, r8
   12d58:	e1a00007 	mov	r0, r7
   12d5c:	e5c56004 	strb	r6, [r5, #4]
   12d60:	e5c56005 	strb	r6, [r5, #5]
   12d64:	e5c56006 	strb	r6, [r5, #6]
   12d68:	e5c56007 	strb	r6, [r5, #7]
   12d6c:	ebfff1ad 	bl	f428 <memcpy>
   12d70:	e7876004 	str	r6, [r7, r4]
   12d74:	f57ff04f 	dsb	sy
   12d78:	e3856103 	orr	r6, r5, #-1073741824	; 0xc0000000
   12d7c:	e1a00009 	mov	r0, r9
   12d80:	e1a01006 	mov	r1, r6
   12d84:	eb0008a6 	bl	15024 <CBcmMailBox::WriteRead(unsigned int)>
   12d88:	e1500006 	cmp	r0, r6
   12d8c:	0a000006 	beq	12dac <CBcmPropertyTags::GetTags(void*, unsigned int)+0xa8>
   12d90:	e3a00000 	mov	r0, #0
   12d94:	e1cd40d0 	ldrd	r4, [sp]
   12d98:	e1cd60d8 	ldrd	r6, [sp, #8]
   12d9c:	e1cd81d0 	ldrd	r8, [sp, #16]
   12da0:	e59da018 	ldr	sl, [sp, #24]
   12da4:	e28dd01c 	add	sp, sp, #28
   12da8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12dac:	f57ff05f 	dmb	sy
   12db0:	e5953004 	ldr	r3, [r5, #4]
   12db4:	e3530102 	cmp	r3, #-2147483648	; 0x80000000
   12db8:	1afffff4 	bne	12d90 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x8c>
   12dbc:	e1a02004 	mov	r2, r4
   12dc0:	e1a01007 	mov	r1, r7
   12dc4:	e1a00008 	mov	r0, r8
   12dc8:	ebfff196 	bl	f428 <memcpy>
   12dcc:	e3a00001 	mov	r0, #1
   12dd0:	eaffffef 	b	12d94 <CBcmPropertyTags::GetTags(void*, unsigned int)+0x90>
   12dd4:	e3061604 	movw	r1, #26116	; 0x6604
   12dd8:	e3401001 	movt	r1, #1
   12ddc:	e2810048 	add	r0, r1, #72	; 0x48
   12de0:	e3a0204b 	mov	r2, #75	; 0x4b
   12de4:	ebffd650 	bl	872c <assertion_failed>
   12de8:	e3061604 	movw	r1, #26116	; 0x6604
   12dec:	e3401001 	movt	r1, #1
   12df0:	e2810054 	add	r0, r1, #84	; 0x54
   12df4:	e3a0204c 	mov	r2, #76	; 0x4c
   12df8:	ebffd64b 	bl	872c <assertion_failed>
   12dfc:	e3061604 	movw	r1, #26116	; 0x6604
   12e00:	e3401001 	movt	r1, #1
   12e04:	e2810080 	add	r0, r1, #128	; 0x80
   12e08:	e3a0204e 	mov	r2, #78	; 0x4e
   12e0c:	ebffd646 	bl	872c <assertion_failed>

00012e10 <CCharGenerator::CCharGenerator()>:
   12e10:	e3a03008 	mov	r3, #8
   12e14:	e5803000 	str	r3, [r0]
   12e18:	e12fff1e 	bx	lr

00012e1c <CCharGenerator::~CCharGenerator()>:
   12e1c:	e12fff1e 	bx	lr

00012e20 <CCharGenerator::GetCharWidth() const>:
   12e20:	e5900000 	ldr	r0, [r0]
   12e24:	e12fff1e 	bx	lr

00012e28 <CCharGenerator::GetCharHeight() const>:
   12e28:	e3a00013 	mov	r0, #19
   12e2c:	e12fff1e 	bx	lr

00012e30 <CCharGenerator::GetUnderline() const>:
   12e30:	e3a00010 	mov	r0, #16
   12e34:	e12fff1e 	bx	lr

00012e38 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const>:
   12e38:	e6ef1071 	uxtb	r1, r1
   12e3c:	e2411021 	sub	r1, r1, #33	; 0x21
   12e40:	e35100de 	cmp	r1, #222	; 0xde
   12e44:	8a00000d 	bhi	12e80 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   12e48:	e5900000 	ldr	r0, [r0]
   12e4c:	e1500002 	cmp	r0, r2
   12e50:	9a00000c 	bls	12e88 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x50>
   12e54:	e353000f 	cmp	r3, #15
   12e58:	8a000008 	bhi	12e80 <CCharGenerator::GetPixel(char, unsigned int, unsigned int) const+0x48>
   12e5c:	e30606c8 	movw	r0, #26312	; 0x66c8
   12e60:	e3400001 	movt	r0, #1
   12e64:	e0801201 	add	r1, r0, r1, lsl #4
   12e68:	e3a00080 	mov	r0, #128	; 0x80
   12e6c:	e7d13003 	ldrb	r3, [r1, r3]
   12e70:	e0133250 	ands	r3, r3, r0, asr r2
   12e74:	13a00001 	movne	r0, #1
   12e78:	03a00000 	moveq	r0, #0
   12e7c:	e12fff1e 	bx	lr
   12e80:	e3a00000 	mov	r0, #0
   12e84:	e12fff1e 	bx	lr
   12e88:	e306169c 	movw	r1, #26268	; 0x669c
   12e8c:	e3401001 	movt	r1, #1
   12e90:	e52d4008 	str	r4, [sp, #-8]!
   12e94:	e30606b0 	movw	r0, #26288	; 0x66b0
   12e98:	e3400001 	movt	r0, #1
   12e9c:	e58de004 	str	lr, [sp, #4]
   12ea0:	e3a0204e 	mov	r2, #78	; 0x4e
   12ea4:	ebffd620 	bl	872c <assertion_failed>

00012ea8 <DelayLoop>:
   12ea8:	e1a01001 	mov	r1, r1
   12eac:	e1a02002 	mov	r2, r2
   12eb0:	e2500001 	subs	r0, r0, #1
   12eb4:	8afffffb 	bhi	12ea8 <DelayLoop>
   12eb8:	e1a0f00e 	mov	pc, lr

00012ebc <CDevice::~CDevice()>:
   12ebc:	e5903004 	ldr	r3, [r0, #4]
   12ec0:	e52d4008 	str	r4, [sp, #-8]!
   12ec4:	e1a04000 	mov	r4, r0
   12ec8:	e59f2024 	ldr	r2, [pc, #36]	; 12ef4 <CDevice::~CDevice()+0x38>
   12ecc:	e58de004 	str	lr, [sp, #4]
   12ed0:	e3530000 	cmp	r3, #0
   12ed4:	e5802000 	str	r2, [r0]
   12ed8:	0a000001 	beq	12ee4 <CDevice::~CDevice()+0x28>
   12edc:	e5901008 	ldr	r1, [r0, #8]
   12ee0:	e12fff33 	blx	r3
   12ee4:	e1a00004 	mov	r0, r4
   12ee8:	e59d4000 	ldr	r4, [sp]
   12eec:	e28dd004 	add	sp, sp, #4
   12ef0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12ef4:	000174c0 	.word	0x000174c0

00012ef8 <CDevice::Read(void*, unsigned int)>:
   12ef8:	e3e00000 	mvn	r0, #0
   12efc:	e12fff1e 	bx	lr

00012f00 <CDevice::Seek(unsigned long long)>:
   12f00:	e3e00000 	mvn	r0, #0
   12f04:	e3e01000 	mvn	r1, #0
   12f08:	e12fff1e 	bx	lr

00012f0c <CDevice::RemoveDevice()>:
   12f0c:	e3a00000 	mov	r0, #0
   12f10:	e12fff1e 	bx	lr

00012f14 <CDevice::~CDevice()>:
   12f14:	e5903004 	ldr	r3, [r0, #4]
   12f18:	e52d4008 	str	r4, [sp, #-8]!
   12f1c:	e1a04000 	mov	r4, r0
   12f20:	e59f2030 	ldr	r2, [pc, #48]	; 12f58 <CDevice::~CDevice()+0x44>
   12f24:	e58de004 	str	lr, [sp, #4]
   12f28:	e3530000 	cmp	r3, #0
   12f2c:	e5802000 	str	r2, [r0]
   12f30:	0a000001 	beq	12f3c <CDevice::~CDevice()+0x28>
   12f34:	e5901008 	ldr	r1, [r0, #8]
   12f38:	e12fff33 	blx	r3
   12f3c:	e1a00004 	mov	r0, r4
   12f40:	e3a0100c 	mov	r1, #12
   12f44:	ebfff1f0 	bl	f70c <operator delete(void*, unsigned int)>
   12f48:	e1a00004 	mov	r0, r4
   12f4c:	e59d4000 	ldr	r4, [sp]
   12f50:	e28dd004 	add	sp, sp, #4
   12f54:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   12f58:	000174c0 	.word	0x000174c0

00012f5c <CDevice::CDevice()>:
   12f5c:	e59f200c 	ldr	r2, [pc, #12]	; 12f70 <CDevice::CDevice()+0x14>
   12f60:	e3a01000 	mov	r1, #0
   12f64:	e5802000 	str	r2, [r0]
   12f68:	e5801004 	str	r1, [r0, #4]
   12f6c:	e12fff1e 	bx	lr
   12f70:	000174c0 	.word	0x000174c0

00012f74 <CDevice::RegisterRemovedHandler(void (*)(CDevice*, void*), void*)>:
   12f74:	e9800006 	stmib	r0, {r1, r2}
   12f78:	e12fff1e 	bx	lr

00012f7c <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)>:
   12f7c:	e16d41f0 	strd	r4, [sp, #-16]!
   12f80:	e1a05001 	mov	r5, r1
   12f84:	e1a04000 	mov	r4, r0
   12f88:	e58d6008 	str	r6, [sp, #8]
   12f8c:	e1a06002 	mov	r6, r2
   12f90:	e58de00c 	str	lr, [sp, #12]
   12f94:	ebffdee0 	bl	ab1c <CMachineInfo::Get()>
   12f98:	e1a01005 	mov	r1, r5
   12f9c:	ebffdde4 	bl	a734 <CMachineInfo::AllocateDMAChannel(unsigned int)>
   12fa0:	e3a03000 	mov	r3, #0
   12fa4:	e245100b 	sub	r1, r5, #11
   12fa8:	e3550083 	cmp	r5, #131	; 0x83
   12fac:	13510003 	cmpne	r1, #3
   12fb0:	93a05001 	movls	r5, #1
   12fb4:	83a05000 	movhi	r5, #0
   12fb8:	e8840009 	stm	r4, {r0, r3}
   12fbc:	e5843008 	str	r3, [r4, #8]
   12fc0:	e584600c 	str	r6, [r4, #12]
   12fc4:	e5c43010 	strb	r3, [r4, #16]
   12fc8:	e5843014 	str	r3, [r4, #20]
   12fcc:	e5843018 	str	r3, [r4, #24]
   12fd0:	e5c4301c 	strb	r3, [r4, #28]
   12fd4:	e5843028 	str	r3, [r4, #40]	; 0x28
   12fd8:	8a00000d 	bhi	13014 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x98>
   12fdc:	e3500080 	cmp	r0, #128	; 0x80
   12fe0:	0a00002e 	beq	130a0 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x124>
   12fe4:	e3a00028 	mov	r0, #40	; 0x28
   12fe8:	ebfff1ac 	bl	f6a0 <operator new(unsigned int)>
   12fec:	e1a05000 	mov	r5, r0
   12ff0:	e5941000 	ldr	r1, [r4]
   12ff4:	e594200c 	ldr	r2, [r4, #12]
   12ff8:	eb000505 	bl	14414 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)>
   12ffc:	e5845028 	str	r5, [r4, #40]	; 0x28
   13000:	e1a00004 	mov	r0, r4
   13004:	e1cd40d0 	ldrd	r4, [sp]
   13008:	e59d6008 	ldr	r6, [sp, #8]
   1300c:	e28dd00c 	add	sp, sp, #12
   13010:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13014:	e3500080 	cmp	r0, #128	; 0x80
   13018:	0a000025 	beq	130b4 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x138>
   1301c:	e3500007 	cmp	r0, #7
   13020:	8a000028 	bhi	130c8 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x14c>
   13024:	e1a01005 	mov	r1, r5
   13028:	e3a0003f 	mov	r0, #63	; 0x3f
   1302c:	ebfff16e 	bl	f5ec <operator new[](unsigned int, int)>
   13030:	e280301f 	add	r3, r0, #31
   13034:	e3a02a07 	mov	r2, #28672	; 0x7000
   13038:	e34f2e00 	movt	r2, #65024	; 0xfe00
   1303c:	e3c3301f 	bic	r3, r3, #31
   13040:	e5941000 	ldr	r1, [r4]
   13044:	e3a0c001 	mov	ip, #1
   13048:	e9840009 	stmib	r4, {r0, r3}
   1304c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   13050:	e5835018 	str	r5, [r3, #24]
   13054:	e583501c 	str	r5, [r3, #28]
   13058:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   1305c:	e183311c 	orr	r3, r3, ip, lsl r1
   13060:	e5823ff0 	str	r3, [r2, #4080]	; 0xff0
   13064:	ebffee23 	bl	e8f8 <CTimer::SimpleusDelay(unsigned int)>
   13068:	e5943000 	ldr	r3, [r4]
   1306c:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   13070:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   13074:	e2833070 	add	r3, r3, #112	; 0x70
   13078:	e1a03403 	lsl	r3, r3, #8
   1307c:	e5832000 	str	r2, [r3]
   13080:	e5942000 	ldr	r2, [r4]
   13084:	e28228fe 	add	r2, r2, #16646144	; 0xfe0000
   13088:	e2822070 	add	r2, r2, #112	; 0x70
   1308c:	e1a02402 	lsl	r2, r2, #8
   13090:	e5923000 	ldr	r3, [r2]
   13094:	e3530000 	cmp	r3, #0
   13098:	bafffffc 	blt	13090 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x114>
   1309c:	eaffffd7 	b	13000 <CDMAChannel::CDMAChannel(unsigned int, CInterruptSystem*)+0x84>
   130a0:	e30714d8 	movw	r1, #29912	; 0x74d8
   130a4:	e3401001 	movt	r1, #1
   130a8:	e2810010 	add	r0, r1, #16
   130ac:	e3a0202f 	mov	r2, #47	; 0x2f
   130b0:	ebffd59d 	bl	872c <assertion_failed>
   130b4:	e30714d8 	movw	r1, #29912	; 0x74d8
   130b8:	e3401001 	movt	r1, #1
   130bc:	e2810010 	add	r0, r1, #16
   130c0:	e3a02039 	mov	r2, #57	; 0x39
   130c4:	ebffd598 	bl	872c <assertion_failed>
   130c8:	e30714d8 	movw	r1, #29912	; 0x74d8
   130cc:	e3401001 	movt	r1, #1
   130d0:	e2810030 	add	r0, r1, #48	; 0x30
   130d4:	e3a0203a 	mov	r2, #58	; 0x3a
   130d8:	ebffd593 	bl	872c <assertion_failed>

000130dc <CDMAChannel::~CDMAChannel()>:
   130dc:	e16d41f0 	strd	r4, [sp, #-16]!
   130e0:	e1a04000 	mov	r4, r0
   130e4:	e5903000 	ldr	r3, [r0]
   130e8:	e5905028 	ldr	r5, [r0, #40]	; 0x28
   130ec:	e58d6008 	str	r6, [sp, #8]
   130f0:	e58de00c 	str	lr, [sp, #12]
   130f4:	e3550000 	cmp	r5, #0
   130f8:	0a000011 	beq	13144 <CDMAChannel::~CDMAChannel()+0x68>
   130fc:	e243300b 	sub	r3, r3, #11
   13100:	e3530003 	cmp	r3, #3
   13104:	8a00003b 	bhi	131f8 <CDMAChannel::~CDMAChannel()+0x11c>
   13108:	e1a00005 	mov	r0, r5
   1310c:	eb000502 	bl	1451c <CDMA4Channel::~CDMA4Channel()>
   13110:	e3a01028 	mov	r1, #40	; 0x28
   13114:	e1a00005 	mov	r0, r5
   13118:	ebfff17b 	bl	f70c <operator delete(void*, unsigned int)>
   1311c:	e3a03000 	mov	r3, #0
   13120:	e5843028 	str	r3, [r4, #40]	; 0x28
   13124:	ebffde7c 	bl	ab1c <CMachineInfo::Get()>
   13128:	e5941000 	ldr	r1, [r4]
   1312c:	ebffddc2 	bl	a83c <CMachineInfo::FreeDMAChannel(unsigned int)>
   13130:	e1a00004 	mov	r0, r4
   13134:	e1cd40d0 	ldrd	r4, [sp]
   13138:	e59d6008 	ldr	r6, [sp, #8]
   1313c:	e28dd00c 	add	sp, sp, #12
   13140:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13144:	e3530007 	cmp	r3, #7
   13148:	8a00002f 	bhi	1320c <CDMAChannel::~CDMAChannel()+0x130>
   1314c:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   13150:	e3a02102 	mov	r2, #-2147483648	; 0x80000000
   13154:	e2833070 	add	r3, r3, #112	; 0x70
   13158:	e1a03403 	lsl	r3, r3, #8
   1315c:	e5832000 	str	r2, [r3]
   13160:	e5901000 	ldr	r1, [r0]
   13164:	e28128fe 	add	r2, r1, #16646144	; 0xfe0000
   13168:	e2822070 	add	r2, r2, #112	; 0x70
   1316c:	e1a02402 	lsl	r2, r2, #8
   13170:	e5923000 	ldr	r3, [r2]
   13174:	e3530000 	cmp	r3, #0
   13178:	bafffffc 	blt	13170 <CDMAChannel::~CDMAChannel()+0x94>
   1317c:	e3a03a07 	mov	r3, #28672	; 0x7000
   13180:	e34f3e00 	movt	r3, #65024	; 0xfe00
   13184:	e594000c 	ldr	r0, [r4, #12]
   13188:	e3a0e001 	mov	lr, #1
   1318c:	e3a0c000 	mov	ip, #0
   13190:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   13194:	e150000c 	cmp	r0, ip
   13198:	e1c2211e 	bic	r2, r2, lr, lsl r1
   1319c:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   131a0:	e584c014 	str	ip, [r4, #20]
   131a4:	0a000009 	beq	131d0 <CDMAChannel::~CDMAChannel()+0xf4>
   131a8:	e5d43010 	ldrb	r3, [r4, #16]
   131ac:	e153000c 	cmp	r3, ip
   131b0:	0a000004 	beq	131c8 <CDMAChannel::~CDMAChannel()+0xec>
   131b4:	e5941000 	ldr	r1, [r4]
   131b8:	e351000c 	cmp	r1, #12
   131bc:	8a000017 	bhi	13220 <CDMAChannel::~CDMAChannel()+0x144>
   131c0:	e2811070 	add	r1, r1, #112	; 0x70
   131c4:	ebfff984 	bl	117dc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   131c8:	e3a03000 	mov	r3, #0
   131cc:	e584300c 	str	r3, [r4, #12]
   131d0:	ebffde51 	bl	ab1c <CMachineInfo::Get()>
   131d4:	e5941000 	ldr	r1, [r4]
   131d8:	ebffdd97 	bl	a83c <CMachineInfo::FreeDMAChannel(unsigned int)>
   131dc:	e5940004 	ldr	r0, [r4, #4]
   131e0:	e3a03000 	mov	r3, #0
   131e4:	e5843008 	str	r3, [r4, #8]
   131e8:	e1500003 	cmp	r0, r3
   131ec:	0affffcf 	beq	13130 <CDMAChannel::~CDMAChannel()+0x54>
   131f0:	ebfff13b 	bl	f6e4 <operator delete[](void*)>
   131f4:	eaffffcd 	b	13130 <CDMAChannel::~CDMAChannel()+0x54>
   131f8:	e30714d8 	movw	r1, #29912	; 0x74d8
   131fc:	e3401001 	movt	r1, #1
   13200:	e281004c 	add	r0, r1, #76	; 0x4c
   13204:	e3a02055 	mov	r2, #85	; 0x55
   13208:	ebffd547 	bl	872c <assertion_failed>
   1320c:	e30714d8 	movw	r1, #29912	; 0x74d8
   13210:	e3401001 	movt	r1, #1
   13214:	e2810030 	add	r0, r1, #48	; 0x30
   13218:	e3a02062 	mov	r2, #98	; 0x62
   1321c:	ebffd542 	bl	872c <assertion_failed>
   13220:	e30714d8 	movw	r1, #29912	; 0x74d8
   13224:	e3401001 	movt	r1, #1
   13228:	e2810094 	add	r0, r1, #148	; 0x94
   1322c:	e3a02074 	mov	r2, #116	; 0x74
   13230:	ebffd53d 	bl	872c <assertion_failed>

00013234 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   13234:	e1a0c000 	mov	ip, r0
   13238:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   1323c:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
   13240:	e1cd60f8 	strd	r6, [sp, #8]
   13244:	e5dd701c 	ldrb	r7, [sp, #28]
   13248:	e58d8010 	str	r8, [sp, #16]
   1324c:	e3500000 	cmp	r0, #0
   13250:	e58de014 	str	lr, [sp, #20]
   13254:	e59d6018 	ldr	r6, [sp, #24]
   13258:	1a000032 	bne	13328 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xf4>
   1325c:	e3510000 	cmp	r1, #0
   13260:	e1a05001 	mov	r5, r1
   13264:	0a000048 	beq	1338c <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x158>
   13268:	e3520000 	cmp	r2, #0
   1326c:	e1a0e002 	mov	lr, r2
   13270:	0a00004a 	beq	133a0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x16c>
   13274:	e3530000 	cmp	r3, #0
   13278:	e1a04003 	mov	r4, r3
   1327c:	0a000030 	beq	13344 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x110>
   13280:	e356000f 	cmp	r6, #15
   13284:	8a00004a 	bhi	133b4 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x180>
   13288:	e59c3008 	ldr	r3, [ip, #8]
   1328c:	e3530000 	cmp	r3, #0
   13290:	0a00004c 	beq	133c8 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x194>
   13294:	e3740107 	cmn	r4, #-1073741823	; 0xc0000001
   13298:	8a00004f 	bhi	133dc <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1a8>
   1329c:	e59c2000 	ldr	r2, [ip]
   132a0:	e28228fe 	add	r2, r2, #16646144	; 0xfe0000
   132a4:	e2822070 	add	r2, r2, #112	; 0x70
   132a8:	e1a02402 	lsl	r2, r2, #8
   132ac:	e5922020 	ldr	r2, [r2, #32]
   132b0:	e2222201 	eor	r2, r2, #268435456	; 0x10000000
   132b4:	e7e02e52 	ubfx	r2, r2, #28, #1
   132b8:	e3540801 	cmp	r4, #65536	; 0x10000
   132bc:	33822001 	orrcc	r2, r2, #1
   132c0:	e3520000 	cmp	r2, #0
   132c4:	0a000049 	beq	133f0 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x1bc>
   132c8:	e1a06606 	lsl	r6, r6, #12
   132cc:	e38e1103 	orr	r1, lr, #-1073741824	; 0xc0000000
   132d0:	e3852103 	orr	r2, r5, #-1073741824	; 0xc0000000
   132d4:	e3570000 	cmp	r7, #0
   132d8:	e3866e33 	orr	r6, r6, #816	; 0x330
   132dc:	e5836000 	str	r6, [r3]
   132e0:	e5831004 	str	r1, [r3, #4]
   132e4:	e5832008 	str	r2, [r3, #8]
   132e8:	e583400c 	str	r4, [r3, #12]
   132ec:	e5c30010 	strb	r0, [r3, #16]
   132f0:	e5c30011 	strb	r0, [r3, #17]
   132f4:	e5c30012 	strb	r0, [r3, #18]
   132f8:	e5c30013 	strb	r0, [r3, #19]
   132fc:	e5c30014 	strb	r0, [r3, #20]
   13300:	e5c30015 	strb	r0, [r3, #21]
   13304:	e5c30016 	strb	r0, [r3, #22]
   13308:	e5c30017 	strb	r0, [r3, #23]
   1330c:	1a000011 	bne	13358 <CDMAChannel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x124>
   13310:	e1cd40d0 	ldrd	r4, [sp]
   13314:	e59d8010 	ldr	r8, [sp, #16]
   13318:	e58c7020 	str	r7, [ip, #32]
   1331c:	e1cd60d8 	ldrd	r6, [sp, #8]
   13320:	e28dd014 	add	sp, sp, #20
   13324:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13328:	e58d701c 	str	r7, [sp, #28]
   1332c:	e1cd40d0 	ldrd	r4, [sp]
   13330:	e1cd60d8 	ldrd	r6, [sp, #8]
   13334:	e59d8010 	ldr	r8, [sp, #16]
   13338:	e59de014 	ldr	lr, [sp, #20]
   1333c:	e28dd018 	add	sp, sp, #24
   13340:	ea0004b3 	b	14614 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>
   13344:	e30714d8 	movw	r1, #29912	; 0x74d8
   13348:	e3401001 	movt	r1, #1
   1334c:	e28100cc 	add	r0, r1, #204	; 0xcc
   13350:	e3a02091 	mov	r2, #145	; 0x91
   13354:	ebffd4f4 	bl	872c <assertion_failed>
   13358:	e1a0000e 	mov	r0, lr
   1335c:	e1a01004 	mov	r1, r4
   13360:	e58c5020 	str	r5, [ip, #32]
   13364:	e58c4024 	str	r4, [ip, #36]	; 0x24
   13368:	ebfff591 	bl	109b4 <CleanAndInvalidateDataCacheRange>
   1336c:	e1a01004 	mov	r1, r4
   13370:	e1a00005 	mov	r0, r5
   13374:	e1cd40d0 	ldrd	r4, [sp]
   13378:	e1cd60d8 	ldrd	r6, [sp, #8]
   1337c:	e59d8010 	ldr	r8, [sp, #16]
   13380:	e59de014 	ldr	lr, [sp, #20]
   13384:	e28dd018 	add	sp, sp, #24
   13388:	eafff589 	b	109b4 <CleanAndInvalidateDataCacheRange>
   1338c:	e30714d8 	movw	r1, #29912	; 0x74d8
   13390:	e3401001 	movt	r1, #1
   13394:	e28100a8 	add	r0, r1, #168	; 0xa8
   13398:	e3a0208f 	mov	r2, #143	; 0x8f
   1339c:	ebffd4e2 	bl	872c <assertion_failed>
   133a0:	e30714d8 	movw	r1, #29912	; 0x74d8
   133a4:	e3401001 	movt	r1, #1
   133a8:	e28100bc 	add	r0, r1, #188	; 0xbc
   133ac:	e3a02090 	mov	r2, #144	; 0x90
   133b0:	ebffd4dd 	bl	872c <assertion_failed>
   133b4:	e30714d8 	movw	r1, #29912	; 0x74d8
   133b8:	e3401001 	movt	r1, #1
   133bc:	e28100d8 	add	r0, r1, #216	; 0xd8
   133c0:	e3a02092 	mov	r2, #146	; 0x92
   133c4:	ebffd4d8 	bl	872c <assertion_failed>
   133c8:	e30714d8 	movw	r1, #29912	; 0x74d8
   133cc:	e3401001 	movt	r1, #1
   133d0:	e28100ec 	add	r0, r1, #236	; 0xec
   133d4:	e3a02094 	mov	r2, #148	; 0x94
   133d8:	ebffd4d3 	bl	872c <assertion_failed>
   133dc:	e30714d8 	movw	r1, #29912	; 0x74d8
   133e0:	e3401001 	movt	r1, #1
   133e4:	e2810f41 	add	r0, r1, #260	; 0x104
   133e8:	e3a02095 	mov	r2, #149	; 0x95
   133ec:	ebffd4ce 	bl	872c <assertion_failed>
   133f0:	e30714d8 	movw	r1, #29912	; 0x74d8
   133f4:	e3401001 	movt	r1, #1
   133f8:	e2810f47 	add	r0, r1, #284	; 0x11c
   133fc:	e3a02096 	mov	r2, #150	; 0x96
   13400:	ebffd4c9 	bl	872c <assertion_failed>

00013404 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   13404:	e16d41f0 	strd	r4, [sp, #-16]!
   13408:	e5905028 	ldr	r5, [r0, #40]	; 0x28
   1340c:	e58d6008 	str	r6, [sp, #8]
   13410:	e5dd6010 	ldrb	r6, [sp, #16]
   13414:	e58de00c 	str	lr, [sp, #12]
   13418:	e3550000 	cmp	r5, #0
   1341c:	1a000030 	bne	134e4 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xe0>
   13420:	e3510000 	cmp	r1, #0
   13424:	e1a0e000 	mov	lr, r0
   13428:	e1a00001 	mov	r0, r1
   1342c:	0a000038 	beq	13514 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x110>
   13430:	e3530000 	cmp	r3, #0
   13434:	e1a0c003 	mov	ip, r3
   13438:	0a00003a 	beq	13528 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x124>
   1343c:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   13440:	8a00002e 	bhi	13500 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xfc>
   13444:	e59e3000 	ldr	r3, [lr]
   13448:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   1344c:	e2833070 	add	r3, r3, #112	; 0x70
   13450:	e1a03403 	lsl	r3, r3, #8
   13454:	e5933020 	ldr	r3, [r3, #32]
   13458:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   1345c:	e7e03e53 	ubfx	r3, r3, #28, #1
   13460:	e35c0801 	cmp	ip, #65536	; 0x10000
   13464:	33833001 	orrcc	r3, r3, #1
   13468:	e3530000 	cmp	r3, #0
   1346c:	0a00003c 	beq	13564 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x160>
   13470:	e3d244ff 	bics	r4, r2, #-16777216	; 0xff000000
   13474:	0a000030 	beq	1353c <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x138>
   13478:	e59e3008 	ldr	r3, [lr, #8]
   1347c:	e284447e 	add	r4, r4, #2113929216	; 0x7e000000
   13480:	e3530000 	cmp	r3, #0
   13484:	0a000031 	beq	13550 <CDMAChannel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x14c>
   13488:	e3002438 	movw	r2, #1080	; 0x438
   1348c:	e5834004 	str	r4, [r3, #4]
   13490:	e3814103 	orr	r4, r1, #-1073741824	; 0xc0000000
   13494:	e1826806 	orr	r6, r2, r6, lsl #16
   13498:	e1a0100c 	mov	r1, ip
   1349c:	e5836000 	str	r6, [r3]
   134a0:	e5834008 	str	r4, [r3, #8]
   134a4:	e583c00c 	str	ip, [r3, #12]
   134a8:	e59d6008 	ldr	r6, [sp, #8]
   134ac:	e5c35010 	strb	r5, [r3, #16]
   134b0:	e5c35011 	strb	r5, [r3, #17]
   134b4:	e5c35012 	strb	r5, [r3, #18]
   134b8:	e5c35013 	strb	r5, [r3, #19]
   134bc:	e5c35014 	strb	r5, [r3, #20]
   134c0:	e5c35015 	strb	r5, [r3, #21]
   134c4:	e5c35016 	strb	r5, [r3, #22]
   134c8:	e5c35017 	strb	r5, [r3, #23]
   134cc:	e58e0020 	str	r0, [lr, #32]
   134d0:	e58ec024 	str	ip, [lr, #36]	; 0x24
   134d4:	e1cd40d0 	ldrd	r4, [sp]
   134d8:	e59de00c 	ldr	lr, [sp, #12]
   134dc:	e28dd010 	add	sp, sp, #16
   134e0:	eafff533 	b	109b4 <CleanAndInvalidateDataCacheRange>
   134e4:	e1a00005 	mov	r0, r5
   134e8:	e58d6010 	str	r6, [sp, #16]
   134ec:	e1cd40d0 	ldrd	r4, [sp]
   134f0:	e59d6008 	ldr	r6, [sp, #8]
   134f4:	e59de00c 	ldr	lr, [sp, #12]
   134f8:	e28dd010 	add	sp, sp, #16
   134fc:	ea00049d 	b	14778 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>
   13500:	e30714d8 	movw	r1, #29912	; 0x74d8
   13504:	e3401001 	movt	r1, #1
   13508:	e2810f41 	add	r0, r1, #260	; 0x104
   1350c:	e3a020bf 	mov	r2, #191	; 0xbf
   13510:	ebffd485 	bl	872c <assertion_failed>
   13514:	e30714d8 	movw	r1, #29912	; 0x74d8
   13518:	e3401001 	movt	r1, #1
   1351c:	e28100a8 	add	r0, r1, #168	; 0xa8
   13520:	e3a020bd 	mov	r2, #189	; 0xbd
   13524:	ebffd480 	bl	872c <assertion_failed>
   13528:	e30714d8 	movw	r1, #29912	; 0x74d8
   1352c:	e3401001 	movt	r1, #1
   13530:	e28100cc 	add	r0, r1, #204	; 0xcc
   13534:	e3a020be 	mov	r2, #190	; 0xbe
   13538:	ebffd47b 	bl	872c <assertion_failed>
   1353c:	e30714d8 	movw	r1, #29912	; 0x74d8
   13540:	e3401001 	movt	r1, #1
   13544:	e2810f5d 	add	r0, r1, #372	; 0x174
   13548:	e3a020c4 	mov	r2, #196	; 0xc4
   1354c:	ebffd476 	bl	872c <assertion_failed>
   13550:	e30714d8 	movw	r1, #29912	; 0x74d8
   13554:	e3401001 	movt	r1, #1
   13558:	e28100ec 	add	r0, r1, #236	; 0xec
   1355c:	e3a020c7 	mov	r2, #199	; 0xc7
   13560:	ebffd471 	bl	872c <assertion_failed>
   13564:	e30714d8 	movw	r1, #29912	; 0x74d8
   13568:	e3401001 	movt	r1, #1
   1356c:	e2810f47 	add	r0, r1, #284	; 0x11c
   13570:	e3a020c0 	mov	r2, #192	; 0xc0
   13574:	ebffd46c 	bl	872c <assertion_failed>

00013578 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   13578:	e590c028 	ldr	ip, [r0, #40]	; 0x28
   1357c:	e16d41f0 	strd	r4, [sp, #-16]!
   13580:	e58d6008 	str	r6, [sp, #8]
   13584:	e5dd6010 	ldrb	r6, [sp, #16]
   13588:	e58de00c 	str	lr, [sp, #12]
   1358c:	e35c0000 	cmp	ip, #0
   13590:	1a00002f 	bne	13654 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xdc>
   13594:	e3520000 	cmp	r2, #0
   13598:	e1a05000 	mov	r5, r0
   1359c:	e1a00002 	mov	r0, r2
   135a0:	0a000037 	beq	13684 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x10c>
   135a4:	e3530000 	cmp	r3, #0
   135a8:	e1a04003 	mov	r4, r3
   135ac:	0a000039 	beq	13698 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x120>
   135b0:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   135b4:	8a00002d 	bhi	13670 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xf8>
   135b8:	e5953000 	ldr	r3, [r5]
   135bc:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   135c0:	e2833070 	add	r3, r3, #112	; 0x70
   135c4:	e1a03403 	lsl	r3, r3, #8
   135c8:	e5933020 	ldr	r3, [r3, #32]
   135cc:	e2233201 	eor	r3, r3, #268435456	; 0x10000000
   135d0:	e7e03e53 	ubfx	r3, r3, #28, #1
   135d4:	e3540801 	cmp	r4, #65536	; 0x10000
   135d8:	33833001 	orrcc	r3, r3, #1
   135dc:	e3530000 	cmp	r3, #0
   135e0:	0a00003b 	beq	136d4 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x15c>
   135e4:	e3d1e4ff 	bics	lr, r1, #-16777216	; 0xff000000
   135e8:	0a00002f 	beq	136ac <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x134>
   135ec:	e5953008 	ldr	r3, [r5, #8]
   135f0:	e28ee47e 	add	lr, lr, #2113929216	; 0x7e000000
   135f4:	e3530000 	cmp	r3, #0
   135f8:	0a000030 	beq	136c0 <CDMAChannel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x148>
   135fc:	e1a06806 	lsl	r6, r6, #16
   13600:	e3822103 	orr	r2, r2, #-1073741824	; 0xc0000000
   13604:	e1a01004 	mov	r1, r4
   13608:	e3866fd2 	orr	r6, r6, #840	; 0x348
   1360c:	e5836000 	str	r6, [r3]
   13610:	e5832004 	str	r2, [r3, #4]
   13614:	e583e008 	str	lr, [r3, #8]
   13618:	e583400c 	str	r4, [r3, #12]
   1361c:	e59d6008 	ldr	r6, [sp, #8]
   13620:	e59de00c 	ldr	lr, [sp, #12]
   13624:	e5c3c010 	strb	ip, [r3, #16]
   13628:	e5c3c011 	strb	ip, [r3, #17]
   1362c:	e5c3c012 	strb	ip, [r3, #18]
   13630:	e5c3c013 	strb	ip, [r3, #19]
   13634:	e5c3c014 	strb	ip, [r3, #20]
   13638:	e5c3c015 	strb	ip, [r3, #21]
   1363c:	e5c3c016 	strb	ip, [r3, #22]
   13640:	e5c3c017 	strb	ip, [r3, #23]
   13644:	e585c020 	str	ip, [r5, #32]
   13648:	e1cd40d0 	ldrd	r4, [sp]
   1364c:	e28dd010 	add	sp, sp, #16
   13650:	eafff4d7 	b	109b4 <CleanAndInvalidateDataCacheRange>
   13654:	e1a0000c 	mov	r0, ip
   13658:	e58d6010 	str	r6, [sp, #16]
   1365c:	e1cd40d0 	ldrd	r4, [sp]
   13660:	e59d6008 	ldr	r6, [sp, #8]
   13664:	e59de00c 	ldr	lr, [sp, #12]
   13668:	e28dd010 	add	sp, sp, #16
   1366c:	ea000489 	b	14898 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>
   13670:	e30714d8 	movw	r1, #29912	; 0x74d8
   13674:	e3401001 	movt	r1, #1
   13678:	e2810f41 	add	r0, r1, #260	; 0x104
   1367c:	e3a020e7 	mov	r2, #231	; 0xe7
   13680:	ebffd429 	bl	872c <assertion_failed>
   13684:	e30714d8 	movw	r1, #29912	; 0x74d8
   13688:	e3401001 	movt	r1, #1
   1368c:	e28100bc 	add	r0, r1, #188	; 0xbc
   13690:	e3a020e5 	mov	r2, #229	; 0xe5
   13694:	ebffd424 	bl	872c <assertion_failed>
   13698:	e30714d8 	movw	r1, #29912	; 0x74d8
   1369c:	e3401001 	movt	r1, #1
   136a0:	e28100cc 	add	r0, r1, #204	; 0xcc
   136a4:	e3a020e6 	mov	r2, #230	; 0xe6
   136a8:	ebffd41f 	bl	872c <assertion_failed>
   136ac:	e30714d8 	movw	r1, #29912	; 0x74d8
   136b0:	e3401001 	movt	r1, #1
   136b4:	e2810f5d 	add	r0, r1, #372	; 0x174
   136b8:	e3a020ec 	mov	r2, #236	; 0xec
   136bc:	ebffd41a 	bl	872c <assertion_failed>
   136c0:	e30714d8 	movw	r1, #29912	; 0x74d8
   136c4:	e3401001 	movt	r1, #1
   136c8:	e28100ec 	add	r0, r1, #236	; 0xec
   136cc:	e3a020ef 	mov	r2, #239	; 0xef
   136d0:	ebffd415 	bl	872c <assertion_failed>
   136d4:	e30714d8 	movw	r1, #29912	; 0x74d8
   136d8:	e3401001 	movt	r1, #1
   136dc:	e2810f47 	add	r0, r1, #284	; 0x11c
   136e0:	e3a020e8 	mov	r2, #232	; 0xe8
   136e4:	ebffd410 	bl	872c <assertion_failed>

000136e8 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   136e8:	e1a0c000 	mov	ip, r0
   136ec:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   136f0:	e16d42f0 	strd	r4, [sp, #-32]!	; 0xffffffe0
   136f4:	e1cd60f8 	strd	r6, [sp, #8]
   136f8:	e1cd81f0 	strd	r8, [sp, #16]
   136fc:	e58da018 	str	sl, [sp, #24]
   13700:	e3500000 	cmp	r0, #0
   13704:	e58de01c 	str	lr, [sp, #28]
   13708:	e59d6020 	ldr	r6, [sp, #32]
   1370c:	e59d8024 	ldr	r8, [sp, #36]	; 0x24
   13710:	e59d7028 	ldr	r7, [sp, #40]	; 0x28
   13714:	1a000036 	bne	137f4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x10c>
   13718:	e3510000 	cmp	r1, #0
   1371c:	0a000040 	beq	13824 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x13c>
   13720:	e3520000 	cmp	r2, #0
   13724:	e1a05002 	mov	r5, r2
   13728:	0a000042 	beq	13838 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x150>
   1372c:	e3530000 	cmp	r3, #0
   13730:	e1a0e003 	mov	lr, r3
   13734:	0a000035 	beq	13810 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
   13738:	e3530801 	cmp	r3, #65536	; 0x10000
   1373c:	2a000042 	bcs	1384c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x164>
   13740:	e3560000 	cmp	r6, #0
   13744:	0a000045 	beq	13860 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x178>
   13748:	e3560901 	cmp	r6, #16384	; 0x4000
   1374c:	2a000048 	bcs	13874 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x18c>
   13750:	e3580801 	cmp	r8, #65536	; 0x10000
   13754:	2a00004b 	bcs	13888 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a0>
   13758:	e357000f 	cmp	r7, #15
   1375c:	8a00004e 	bhi	1389c <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1b4>
   13760:	e59c3000 	ldr	r3, [ip]
   13764:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   13768:	e2833070 	add	r3, r3, #112	; 0x70
   1376c:	e1a03403 	lsl	r3, r3, #8
   13770:	e5933020 	ldr	r3, [r3, #32]
   13774:	e3130201 	tst	r3, #268435456	; 0x10000000
   13778:	1a00004c 	bne	138b0 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c8>
   1377c:	e59c3008 	ldr	r3, [ip, #8]
   13780:	e3530000 	cmp	r3, #0
   13784:	0a00004e 	beq	138c4 <CDMAChannel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x1dc>
   13788:	e3814103 	orr	r4, r1, #-1073741824	; 0xc0000000
   1378c:	e3002332 	movw	r2, #818	; 0x332
   13790:	e1a08808 	lsl	r8, r8, #16
   13794:	e2469001 	sub	r9, r6, #1
   13798:	e1827607 	orr	r7, r2, r7, lsl #12
   1379c:	e3a02000 	mov	r2, #0
   137a0:	e18e9809 	orr	r9, lr, r9, lsl #16
   137a4:	e1a00005 	mov	r0, r5
   137a8:	e59da018 	ldr	sl, [sp, #24]
   137ac:	e0010e96 	mul	r1, r6, lr
   137b0:	e5837000 	str	r7, [r3]
   137b4:	e5834008 	str	r4, [r3, #8]
   137b8:	e3854103 	orr	r4, r5, #-1073741824	; 0xc0000000
   137bc:	e1cd60d8 	ldrd	r6, [sp, #8]
   137c0:	e5834004 	str	r4, [r3, #4]
   137c4:	e583900c 	str	r9, [r3, #12]
   137c8:	e5838010 	str	r8, [r3, #16]
   137cc:	e1cd40d0 	ldrd	r4, [sp]
   137d0:	e1cd81d0 	ldrd	r8, [sp, #16]
   137d4:	e59de01c 	ldr	lr, [sp, #28]
   137d8:	e28dd020 	add	sp, sp, #32
   137dc:	e5c32014 	strb	r2, [r3, #20]
   137e0:	e5c32015 	strb	r2, [r3, #21]
   137e4:	e5c32016 	strb	r2, [r3, #22]
   137e8:	e5c32017 	strb	r2, [r3, #23]
   137ec:	e58c2020 	str	r2, [ip, #32]
   137f0:	eafff46f 	b	109b4 <CleanAndInvalidateDataCacheRange>
   137f4:	e1cd40d0 	ldrd	r4, [sp]
   137f8:	e1cd60d8 	ldrd	r6, [sp, #8]
   137fc:	e1cd81d0 	ldrd	r8, [sp, #16]
   13800:	e59da018 	ldr	sl, [sp, #24]
   13804:	e59de01c 	ldr	lr, [sp, #28]
   13808:	e28dd020 	add	sp, sp, #32
   1380c:	ea000469 	b	149b8 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>
   13810:	e30714d8 	movw	r1, #29912	; 0x74d8
   13814:	e3401001 	movt	r1, #1
   13818:	e2810f61 	add	r0, r1, #388	; 0x184
   1381c:	e3002111 	movw	r2, #273	; 0x111
   13820:	ebffd3c1 	bl	872c <assertion_failed>
   13824:	e30714d8 	movw	r1, #29912	; 0x74d8
   13828:	e3401001 	movt	r1, #1
   1382c:	e28100a8 	add	r0, r1, #168	; 0xa8
   13830:	e300210f 	movw	r2, #271	; 0x10f
   13834:	ebffd3bc 	bl	872c <assertion_failed>
   13838:	e30714d8 	movw	r1, #29912	; 0x74d8
   1383c:	e3401001 	movt	r1, #1
   13840:	e28100bc 	add	r0, r1, #188	; 0xbc
   13844:	e3a02e11 	mov	r2, #272	; 0x110
   13848:	ebffd3b7 	bl	872c <assertion_failed>
   1384c:	e30714d8 	movw	r1, #29912	; 0x74d8
   13850:	e3401001 	movt	r1, #1
   13854:	e2810f66 	add	r0, r1, #408	; 0x198
   13858:	e3002112 	movw	r2, #274	; 0x112
   1385c:	ebffd3b2 	bl	872c <assertion_failed>
   13860:	e30714d8 	movw	r1, #29912	; 0x74d8
   13864:	e3401001 	movt	r1, #1
   13868:	e2810e1b 	add	r0, r1, #432	; 0x1b0
   1386c:	e3002113 	movw	r2, #275	; 0x113
   13870:	ebffd3ad 	bl	872c <assertion_failed>
   13874:	e30714d8 	movw	r1, #29912	; 0x74d8
   13878:	e3401001 	movt	r1, #1
   1387c:	e2810d07 	add	r0, r1, #448	; 0x1c0
   13880:	e3a02f45 	mov	r2, #276	; 0x114
   13884:	ebffd3a8 	bl	872c <assertion_failed>
   13888:	e30714d8 	movw	r1, #29912	; 0x74d8
   1388c:	e3401001 	movt	r1, #1
   13890:	e2810f76 	add	r0, r1, #472	; 0x1d8
   13894:	e3002115 	movw	r2, #277	; 0x115
   13898:	ebffd3a3 	bl	872c <assertion_failed>
   1389c:	e30714d8 	movw	r1, #29912	; 0x74d8
   138a0:	e3401001 	movt	r1, #1
   138a4:	e28100d8 	add	r0, r1, #216	; 0xd8
   138a8:	e3002116 	movw	r2, #278	; 0x116
   138ac:	ebffd39e 	bl	872c <assertion_failed>
   138b0:	e30714d8 	movw	r1, #29912	; 0x74d8
   138b4:	e3401001 	movt	r1, #1
   138b8:	e2810e1f 	add	r0, r1, #496	; 0x1f0
   138bc:	e3a02f46 	mov	r2, #280	; 0x118
   138c0:	ebffd399 	bl	872c <assertion_failed>
   138c4:	e30714d8 	movw	r1, #29912	; 0x74d8
   138c8:	e3401001 	movt	r1, #1
   138cc:	e28100ec 	add	r0, r1, #236	; 0xec
   138d0:	e300211a 	movw	r2, #282	; 0x11a
   138d4:	ebffd394 	bl	872c <assertion_failed>

000138d8 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   138d8:	e16d41f0 	strd	r4, [sp, #-16]!
   138dc:	e1a04000 	mov	r4, r0
   138e0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   138e4:	e58d6008 	str	r6, [sp, #8]
   138e8:	e58de00c 	str	lr, [sp, #12]
   138ec:	e3500000 	cmp	r0, #0
   138f0:	1a000012 	bne	13940 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x68>
   138f4:	e1a06001 	mov	r6, r1
   138f8:	e5941000 	ldr	r1, [r4]
   138fc:	e3510008 	cmp	r1, #8
   13900:	8a000022 	bhi	13990 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xb8>
   13904:	e594000c 	ldr	r0, [r4, #12]
   13908:	e3500000 	cmp	r0, #0
   1390c:	0a000024 	beq	139a4 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xcc>
   13910:	e5d43010 	ldrb	r3, [r4, #16]
   13914:	e1a05002 	mov	r5, r2
   13918:	e3530000 	cmp	r3, #0
   1391c:	0a00000c 	beq	13954 <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x7c>
   13920:	e3560000 	cmp	r6, #0
   13924:	e5846014 	str	r6, [r4, #20]
   13928:	0a000013 	beq	1397c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xa4>
   1392c:	e59d6008 	ldr	r6, [sp, #8]
   13930:	e5845018 	str	r5, [r4, #24]
   13934:	e1cd40d0 	ldrd	r4, [sp]
   13938:	e28dd00c 	add	sp, sp, #12
   1393c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13940:	e1cd40d0 	ldrd	r4, [sp]
   13944:	e59d6008 	ldr	r6, [sp, #8]
   13948:	e59de00c 	ldr	lr, [sp, #12]
   1394c:	e28dd010 	add	sp, sp, #16
   13950:	ea00047e 	b	14b50 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>
   13954:	e1a03004 	mov	r3, r4
   13958:	e2811070 	add	r1, r1, #112	; 0x70
   1395c:	e3032d5c 	movw	r2, #15708	; 0x3d5c
   13960:	e3402001 	movt	r2, #1
   13964:	ebfff77b 	bl	11758 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   13968:	e3a03001 	mov	r3, #1
   1396c:	e3560000 	cmp	r6, #0
   13970:	e5c43010 	strb	r3, [r4, #16]
   13974:	e5846014 	str	r6, [r4, #20]
   13978:	1affffeb 	bne	1392c <CDMAChannel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x54>
   1397c:	e30714d8 	movw	r1, #29912	; 0x74d8
   13980:	e3401001 	movt	r1, #1
   13984:	e2810f97 	add	r0, r1, #604	; 0x25c
   13988:	e3a02f51 	mov	r2, #324	; 0x144
   1398c:	ebffd366 	bl	872c <assertion_failed>
   13990:	e30714d8 	movw	r1, #29912	; 0x74d8
   13994:	e3401001 	movt	r1, #1
   13998:	e2810f8a 	add	r0, r1, #552	; 0x228
   1399c:	e3002139 	movw	r2, #313	; 0x139
   139a0:	ebffd361 	bl	872c <assertion_failed>
   139a4:	e30714d8 	movw	r1, #29912	; 0x74d8
   139a8:	e3401001 	movt	r1, #1
   139ac:	e2810f91 	add	r0, r1, #580	; 0x244
   139b0:	e300213a 	movw	r2, #314	; 0x13a
   139b4:	ebffd35c 	bl	872c <assertion_failed>

000139b8 <CDMAChannel::Start()>:
   139b8:	e52d4008 	str	r4, [sp, #-8]!
   139bc:	e1a04000 	mov	r4, r0
   139c0:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   139c4:	e58de004 	str	lr, [sp, #4]
   139c8:	e3500000 	cmp	r0, #0
   139cc:	1a00002b 	bne	13a80 <CDMAChannel::Start()+0xc8>
   139d0:	e5942000 	ldr	r2, [r4]
   139d4:	e3520007 	cmp	r2, #7
   139d8:	8a00002c 	bhi	13a90 <CDMAChannel::Start()+0xd8>
   139dc:	e5940008 	ldr	r0, [r4, #8]
   139e0:	e3500000 	cmp	r0, #0
   139e4:	0a00002e 	beq	13aa4 <CDMAChannel::Start()+0xec>
   139e8:	e5943014 	ldr	r3, [r4, #20]
   139ec:	e3530000 	cmp	r3, #0
   139f0:	0a000008 	beq	13a18 <CDMAChannel::Start()+0x60>
   139f4:	e594300c 	ldr	r3, [r4, #12]
   139f8:	e3530000 	cmp	r3, #0
   139fc:	0a000037 	beq	13ae0 <CDMAChannel::Start()+0x128>
   13a00:	e5d43010 	ldrb	r3, [r4, #16]
   13a04:	e3530000 	cmp	r3, #0
   13a08:	0a000039 	beq	13af4 <CDMAChannel::Start()+0x13c>
   13a0c:	e5903000 	ldr	r3, [r0]
   13a10:	e3833001 	orr	r3, r3, #1
   13a14:	e5803000 	str	r3, [r0]
   13a18:	e28238fe 	add	r3, r2, #16646144	; 0xfe0000
   13a1c:	e2833070 	add	r3, r3, #112	; 0x70
   13a20:	e1a03403 	lsl	r3, r3, #8
   13a24:	e5931000 	ldr	r1, [r3]
   13a28:	e3110004 	tst	r1, #4
   13a2c:	1a000021 	bne	13ab8 <CDMAChannel::Start()+0x100>
   13a30:	e3a01a07 	mov	r1, #28672	; 0x7000
   13a34:	e34f1e00 	movt	r1, #65024	; 0xfe00
   13a38:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   13a3c:	e3a0c001 	mov	ip, #1
   13a40:	e011221c 	ands	r2, r1, ip, lsl r2
   13a44:	1a000020 	bne	13acc <CDMAChannel::Start()+0x114>
   13a48:	e3802103 	orr	r2, r0, #-1073741824	; 0xc0000000
   13a4c:	e3a01020 	mov	r1, #32
   13a50:	e5832004 	str	r2, [r3, #4]
   13a54:	ebfff3d6 	bl	109b4 <CleanAndInvalidateDataCacheRange>
   13a58:	e5943000 	ldr	r3, [r4]
   13a5c:	e3a02001 	mov	r2, #1
   13a60:	e34120f1 	movt	r2, #4337	; 0x10f1
   13a64:	e59d4000 	ldr	r4, [sp]
   13a68:	e28dd004 	add	sp, sp, #4
   13a6c:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   13a70:	e2833070 	add	r3, r3, #112	; 0x70
   13a74:	e1a03403 	lsl	r3, r3, #8
   13a78:	e5832000 	str	r2, [r3]
   13a7c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13a80:	e59d4000 	ldr	r4, [sp]
   13a84:	e59de004 	ldr	lr, [sp, #4]
   13a88:	e28dd008 	add	sp, sp, #8
   13a8c:	ea000464 	b	14c24 <CDMA4Channel::Start()>
   13a90:	e30714d8 	movw	r1, #29912	; 0x74d8
   13a94:	e3401001 	movt	r1, #1
   13a98:	e2810030 	add	r0, r1, #48	; 0x30
   13a9c:	e3a02f55 	mov	r2, #340	; 0x154
   13aa0:	ebffd321 	bl	872c <assertion_failed>
   13aa4:	e30714d8 	movw	r1, #29912	; 0x74d8
   13aa8:	e3401001 	movt	r1, #1
   13aac:	e28100ec 	add	r0, r1, #236	; 0xec
   13ab0:	e3002155 	movw	r2, #341	; 0x155
   13ab4:	ebffd31c 	bl	872c <assertion_failed>
   13ab8:	e30714d8 	movw	r1, #29912	; 0x74d8
   13abc:	e3401001 	movt	r1, #1
   13ac0:	e2810fa2 	add	r0, r1, #648	; 0x288
   13ac4:	e3a02e16 	mov	r2, #352	; 0x160
   13ac8:	ebffd317 	bl	872c <assertion_failed>
   13acc:	e30714d8 	movw	r1, #29912	; 0x74d8
   13ad0:	e3401001 	movt	r1, #1
   13ad4:	e2810faf 	add	r0, r1, #700	; 0x2bc
   13ad8:	e3002161 	movw	r2, #353	; 0x161
   13adc:	ebffd312 	bl	872c <assertion_failed>
   13ae0:	e30714d8 	movw	r1, #29912	; 0x74d8
   13ae4:	e3401001 	movt	r1, #1
   13ae8:	e2810f91 	add	r0, r1, #580	; 0x244
   13aec:	e3002159 	movw	r2, #345	; 0x159
   13af0:	ebffd30d 	bl	872c <assertion_failed>
   13af4:	e30714d8 	movw	r1, #29912	; 0x74d8
   13af8:	e3401001 	movt	r1, #1
   13afc:	e2810f9e 	add	r0, r1, #632	; 0x278
   13b00:	e300215a 	movw	r2, #346	; 0x15a
   13b04:	ebffd308 	bl	872c <assertion_failed>

00013b08 <CDMAChannel::Wait()>:
   13b08:	e52d4008 	str	r4, [sp, #-8]!
   13b0c:	e1a04000 	mov	r4, r0
   13b10:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   13b14:	e58de004 	str	lr, [sp, #4]
   13b18:	e3500000 	cmp	r0, #0
   13b1c:	0a000003 	beq	13b30 <CDMAChannel::Wait()+0x28>
   13b20:	e59d4000 	ldr	r4, [sp]
   13b24:	e59de004 	ldr	lr, [sp, #4]
   13b28:	e28dd008 	add	sp, sp, #8
   13b2c:	ea000490 	b	14d74 <CDMA4Channel::Wait()>
   13b30:	e5942000 	ldr	r2, [r4]
   13b34:	e3520007 	cmp	r2, #7
   13b38:	8a000018 	bhi	13ba0 <CDMAChannel::Wait()+0x98>
   13b3c:	e5943014 	ldr	r3, [r4, #20]
   13b40:	e3530000 	cmp	r3, #0
   13b44:	028228fe 	addeq	r2, r2, #16646144	; 0xfe0000
   13b48:	02822070 	addeq	r2, r2, #112	; 0x70
   13b4c:	01a02402 	lsleq	r2, r2, #8
   13b50:	1a000017 	bne	13bb4 <CDMAChannel::Wait()+0xac>
   13b54:	e5923000 	ldr	r3, [r2]
   13b58:	e3130001 	tst	r3, #1
   13b5c:	1afffffc 	bne	13b54 <CDMAChannel::Wait()+0x4c>
   13b60:	e5942020 	ldr	r2, [r4, #32]
   13b64:	e2233c01 	eor	r3, r3, #256	; 0x100
   13b68:	e7e00453 	ubfx	r0, r3, #8, #1
   13b6c:	e5c4001c 	strb	r0, [r4, #28]
   13b70:	e3520000 	cmp	r2, #0
   13b74:	1a000002 	bne	13b84 <CDMAChannel::Wait()+0x7c>
   13b78:	e59d4000 	ldr	r4, [sp]
   13b7c:	e28dd004 	add	sp, sp, #4
   13b80:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13b84:	e1a00002 	mov	r0, r2
   13b88:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   13b8c:	ebfff388 	bl	109b4 <CleanAndInvalidateDataCacheRange>
   13b90:	e5d4001c 	ldrb	r0, [r4, #28]
   13b94:	e59d4000 	ldr	r4, [sp]
   13b98:	e28dd004 	add	sp, sp, #4
   13b9c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13ba0:	e30714d8 	movw	r1, #29912	; 0x74d8
   13ba4:	e3401001 	movt	r1, #1
   13ba8:	e2810030 	add	r0, r1, #48	; 0x30
   13bac:	e3a02f5e 	mov	r2, #376	; 0x178
   13bb0:	ebffd2dd 	bl	872c <assertion_failed>
   13bb4:	e30714d8 	movw	r1, #29912	; 0x74d8
   13bb8:	e3401001 	movt	r1, #1
   13bbc:	e2810e2f 	add	r0, r1, #752	; 0x2f0
   13bc0:	e3002179 	movw	r2, #377	; 0x179
   13bc4:	ebffd2d8 	bl	872c <assertion_failed>

00013bc8 <CDMAChannel::GetStatus()>:
   13bc8:	e1a03000 	mov	r3, r0
   13bcc:	e5900028 	ldr	r0, [r0, #40]	; 0x28
   13bd0:	e3500000 	cmp	r0, #0
   13bd4:	0a000000 	beq	13bdc <CDMAChannel::GetStatus()+0x14>
   13bd8:	ea000495 	b	14e34 <CDMA4Channel::GetStatus()>
   13bdc:	e5932000 	ldr	r2, [r3]
   13be0:	e52d4008 	str	r4, [sp, #-8]!
   13be4:	e58de004 	str	lr, [sp, #4]
   13be8:	e3520007 	cmp	r2, #7
   13bec:	8a000009 	bhi	13c18 <CDMAChannel::GetStatus()+0x50>
   13bf0:	e28228fe 	add	r2, r2, #16646144	; 0xfe0000
   13bf4:	e2822070 	add	r2, r2, #112	; 0x70
   13bf8:	e1a02402 	lsl	r2, r2, #8
   13bfc:	e5922000 	ldr	r2, [r2]
   13c00:	e3120001 	tst	r2, #1
   13c04:	1a000008 	bne	13c2c <CDMAChannel::GetStatus()+0x64>
   13c08:	e59d4000 	ldr	r4, [sp]
   13c0c:	e28dd004 	add	sp, sp, #4
   13c10:	e5d3001c 	ldrb	r0, [r3, #28]
   13c14:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13c18:	e30714d8 	movw	r1, #29912	; 0x74d8
   13c1c:	e3401001 	movt	r1, #1
   13c20:	e2810030 	add	r0, r1, #48	; 0x30
   13c24:	e3a02f66 	mov	r2, #408	; 0x198
   13c28:	ebffd2bf 	bl	872c <assertion_failed>
   13c2c:	e30714d8 	movw	r1, #29912	; 0x74d8
   13c30:	e3401001 	movt	r1, #1
   13c34:	e2810fc3 	add	r0, r1, #780	; 0x30c
   13c38:	e3002199 	movw	r2, #409	; 0x199
   13c3c:	ebffd2ba 	bl	872c <assertion_failed>

00013c40 <CDMAChannel::InterruptHandler()>:
   13c40:	e52d4008 	str	r4, [sp, #-8]!
   13c44:	e1a04000 	mov	r4, r0
   13c48:	e5900020 	ldr	r0, [r0, #32]
   13c4c:	e58de004 	str	lr, [sp, #4]
   13c50:	e3500000 	cmp	r0, #0
   13c54:	1a000022 	bne	13ce4 <CDMAChannel::InterruptHandler()+0xa4>
   13c58:	e5941000 	ldr	r1, [r4]
   13c5c:	e3510007 	cmp	r1, #7
   13c60:	8a000024 	bhi	13cf8 <CDMAChannel::InterruptHandler()+0xb8>
   13c64:	e3a02a07 	mov	r2, #28672	; 0x7000
   13c68:	e34f2e00 	movt	r2, #65024	; 0xfe00
   13c6c:	e5920fe0 	ldr	r0, [r2, #4064]	; 0xfe0
   13c70:	e3a03001 	mov	r3, #1
   13c74:	e1a03113 	lsl	r3, r3, r1
   13c78:	e1130000 	tst	r3, r0
   13c7c:	0a000022 	beq	13d0c <CDMAChannel::InterruptHandler()+0xcc>
   13c80:	e5823fe0 	str	r3, [r2, #4064]	; 0xfe0
   13c84:	e5943000 	ldr	r3, [r4]
   13c88:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   13c8c:	e2833070 	add	r3, r3, #112	; 0x70
   13c90:	e1a03403 	lsl	r3, r3, #8
   13c94:	e5931000 	ldr	r1, [r3]
   13c98:	e3110004 	tst	r1, #4
   13c9c:	0a00001f 	beq	13d20 <CDMAChannel::InterruptHandler()+0xe0>
   13ca0:	e3110001 	tst	r1, #1
   13ca4:	1a000022 	bne	13d34 <CDMAChannel::InterruptHandler()+0xf4>
   13ca8:	e594e014 	ldr	lr, [r4, #20]
   13cac:	e2211c01 	eor	r1, r1, #256	; 0x100
   13cb0:	e3a02004 	mov	r2, #4
   13cb4:	e7e01451 	ubfx	r1, r1, #8, #1
   13cb8:	e5832000 	str	r2, [r3]
   13cbc:	e5c4101c 	strb	r1, [r4, #28]
   13cc0:	e35e0000 	cmp	lr, #0
   13cc4:	0a00001f 	beq	13d48 <CDMAChannel::InterruptHandler()+0x108>
   13cc8:	e1a0300e 	mov	r3, lr
   13ccc:	e5940000 	ldr	r0, [r4]
   13cd0:	e59de004 	ldr	lr, [sp, #4]
   13cd4:	e5942018 	ldr	r2, [r4, #24]
   13cd8:	e59d4000 	ldr	r4, [sp]
   13cdc:	e28dd008 	add	sp, sp, #8
   13ce0:	e12fff13 	bx	r3
   13ce4:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   13ce8:	ebfff331 	bl	109b4 <CleanAndInvalidateDataCacheRange>
   13cec:	e5941000 	ldr	r1, [r4]
   13cf0:	e3510007 	cmp	r1, #7
   13cf4:	9affffda 	bls	13c64 <CDMAChannel::InterruptHandler()+0x24>
   13cf8:	e30714d8 	movw	r1, #29912	; 0x74d8
   13cfc:	e3401001 	movt	r1, #1
   13d00:	e2810030 	add	r0, r1, #48	; 0x30
   13d04:	e30021a7 	movw	r2, #423	; 0x1a7
   13d08:	ebffd287 	bl	872c <assertion_failed>
   13d0c:	e30714d8 	movw	r1, #29912	; 0x74d8
   13d10:	e3401001 	movt	r1, #1
   13d14:	e2810d0d 	add	r0, r1, #832	; 0x340
   13d18:	e30021ad 	movw	r2, #429	; 0x1ad
   13d1c:	ebffd282 	bl	872c <assertion_failed>
   13d20:	e30714d8 	movw	r1, #29912	; 0x74d8
   13d24:	e3401001 	movt	r1, #1
   13d28:	e2810fd6 	add	r0, r1, #856	; 0x358
   13d2c:	e30021b1 	movw	r2, #433	; 0x1b1
   13d30:	ebffd27d 	bl	872c <assertion_failed>
   13d34:	e30714d8 	movw	r1, #29912	; 0x74d8
   13d38:	e3401001 	movt	r1, #1
   13d3c:	e2810fda 	add	r0, r1, #872	; 0x368
   13d40:	e30021b2 	movw	r2, #434	; 0x1b2
   13d44:	ebffd278 	bl	872c <assertion_failed>
   13d48:	e30714d8 	movw	r1, #29912	; 0x74d8
   13d4c:	e3401001 	movt	r1, #1
   13d50:	e2810f97 	add	r0, r1, #604	; 0x25c
   13d54:	e30021b9 	movw	r2, #441	; 0x1b9
   13d58:	ebffd273 	bl	872c <assertion_failed>

00013d5c <CDMAChannel::InterruptStub(void*)>:
   13d5c:	e3500000 	cmp	r0, #0
   13d60:	0a000000 	beq	13d68 <CDMAChannel::InterruptStub(void*)+0xc>
   13d64:	eaffffb5 	b	13c40 <CDMAChannel::InterruptHandler()>
   13d68:	e30714d8 	movw	r1, #29912	; 0x74d8
   13d6c:	e3401001 	movt	r1, #1
   13d70:	e52d4008 	str	r4, [sp, #-8]!
   13d74:	e2810fdf 	add	r0, r1, #892	; 0x37c
   13d78:	e3a02d07 	mov	r2, #448	; 0x1c0
   13d7c:	e58de004 	str	lr, [sp, #4]
   13d80:	ebffd269 	bl	872c <assertion_failed>

00013d84 <CPtrList::CPtrList()>:
   13d84:	e3a02000 	mov	r2, #0
   13d88:	e5802000 	str	r2, [r0]
   13d8c:	e12fff1e 	bx	lr

00013d90 <CPtrList::~CPtrList()>:
   13d90:	e5903000 	ldr	r3, [r0]
   13d94:	e3530000 	cmp	r3, #0
   13d98:	012fff1e 	bxeq	lr
   13d9c:	e3071860 	movw	r1, #30816	; 0x7860
   13da0:	e3401001 	movt	r1, #1
   13da4:	e52d4008 	str	r4, [sp, #-8]!
   13da8:	e307086c 	movw	r0, #30828	; 0x786c
   13dac:	e3400001 	movt	r0, #1
   13db0:	e58de004 	str	lr, [sp, #4]
   13db4:	e3a0202a 	mov	r2, #42	; 0x2a
   13db8:	ebffd25b 	bl	872c <assertion_failed>

00013dbc <CPtrList::GetFirst()>:
   13dbc:	e5900000 	ldr	r0, [r0]
   13dc0:	e12fff1e 	bx	lr

00013dc4 <CPtrList::GetNext(TPtrListElement*)>:
   13dc4:	e3510000 	cmp	r1, #0
   13dc8:	e52d4008 	str	r4, [sp, #-8]!
   13dcc:	e58de004 	str	lr, [sp, #4]
   13dd0:	0a000008 	beq	13df8 <CPtrList::GetNext(TPtrListElement*)+0x34>
   13dd4:	e5912000 	ldr	r2, [r1]
   13dd8:	e3043d43 	movw	r3, #19779	; 0x4d43
   13ddc:	e345304c 	movt	r3, #20556	; 0x504c
   13de0:	e1520003 	cmp	r2, r3
   13de4:	1a000009 	bne	13e10 <CPtrList::GetNext(TPtrListElement*)+0x4c>
   13de8:	e59d4000 	ldr	r4, [sp]
   13dec:	e28dd004 	add	sp, sp, #4
   13df0:	e5910008 	ldr	r0, [r1, #8]
   13df4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13df8:	e3071860 	movw	r1, #30816	; 0x7860
   13dfc:	e3401001 	movt	r1, #1
   13e00:	e307087c 	movw	r0, #30844	; 0x787c
   13e04:	e3400001 	movt	r0, #1
   13e08:	e3a02034 	mov	r2, #52	; 0x34
   13e0c:	ebffd246 	bl	872c <assertion_failed>
   13e10:	e3071860 	movw	r1, #30816	; 0x7860
   13e14:	e3401001 	movt	r1, #1
   13e18:	e307088c 	movw	r0, #30860	; 0x788c
   13e1c:	e3400001 	movt	r0, #1
   13e20:	e3a02035 	mov	r2, #53	; 0x35
   13e24:	ebffd240 	bl	872c <assertion_failed>

00013e28 <CPtrList::GetPtr(TPtrListElement*)>:
   13e28:	e3510000 	cmp	r1, #0
   13e2c:	e52d4008 	str	r4, [sp, #-8]!
   13e30:	e58de004 	str	lr, [sp, #4]
   13e34:	0a000008 	beq	13e5c <CPtrList::GetPtr(TPtrListElement*)+0x34>
   13e38:	e5912000 	ldr	r2, [r1]
   13e3c:	e3043d43 	movw	r3, #19779	; 0x4d43
   13e40:	e345304c 	movt	r3, #20556	; 0x504c
   13e44:	e1520003 	cmp	r2, r3
   13e48:	1a000009 	bne	13e74 <CPtrList::GetPtr(TPtrListElement*)+0x4c>
   13e4c:	e59d4000 	ldr	r4, [sp]
   13e50:	e28dd004 	add	sp, sp, #4
   13e54:	e591000c 	ldr	r0, [r1, #12]
   13e58:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13e5c:	e3071860 	movw	r1, #30816	; 0x7860
   13e60:	e3401001 	movt	r1, #1
   13e64:	e307087c 	movw	r0, #30844	; 0x787c
   13e68:	e3400001 	movt	r0, #1
   13e6c:	e3a0203c 	mov	r2, #60	; 0x3c
   13e70:	ebffd22d 	bl	872c <assertion_failed>
   13e74:	e3071860 	movw	r1, #30816	; 0x7860
   13e78:	e3401001 	movt	r1, #1
   13e7c:	e307088c 	movw	r0, #30860	; 0x788c
   13e80:	e3400001 	movt	r0, #1
   13e84:	e3a0203d 	mov	r2, #61	; 0x3d
   13e88:	ebffd227 	bl	872c <assertion_failed>

00013e8c <CPtrList::InsertBefore(TPtrListElement*, void*)>:
   13e8c:	e16d41f0 	strd	r4, [sp, #-16]!
   13e90:	e1a05000 	mov	r5, r0
   13e94:	e3a00010 	mov	r0, #16
   13e98:	e1a04001 	mov	r4, r1
   13e9c:	e58d6008 	str	r6, [sp, #8]
   13ea0:	e1a06002 	mov	r6, r2
   13ea4:	e58de00c 	str	lr, [sp, #12]
   13ea8:	ebffedfc 	bl	f6a0 <operator new(unsigned int)>
   13eac:	e5952000 	ldr	r2, [r5]
   13eb0:	e3043d43 	movw	r3, #19779	; 0x4d43
   13eb4:	e345304c 	movt	r3, #20556	; 0x504c
   13eb8:	e5803000 	str	r3, [r0]
   13ebc:	e580600c 	str	r6, [r0, #12]
   13ec0:	e3520000 	cmp	r2, #0
   13ec4:	0a00001c 	beq	13f3c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xb0>
   13ec8:	e3540000 	cmp	r4, #0
   13ecc:	0a000020 	beq	13f54 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xc8>
   13ed0:	e5941000 	ldr	r1, [r4]
   13ed4:	e1510003 	cmp	r1, r3
   13ed8:	1a000023 	bne	13f6c <CPtrList::InsertBefore(TPtrListElement*, void*)+0xe0>
   13edc:	e1520004 	cmp	r2, r4
   13ee0:	0a00000c 	beq	13f18 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x8c>
   13ee4:	e5943004 	ldr	r3, [r4, #4]
   13ee8:	e3530000 	cmp	r3, #0
   13eec:	e9800018 	stmib	r0, {r3, r4}
   13ef0:	0a000003 	beq	13f04 <CPtrList::InsertBefore(TPtrListElement*, void*)+0x78>
   13ef4:	e5932000 	ldr	r2, [r3]
   13ef8:	e1520001 	cmp	r2, r1
   13efc:	05830008 	streq	r0, [r3, #8]
   13f00:	1a00001f 	bne	13f84 <CPtrList::InsertBefore(TPtrListElement*, void*)+0xf8>
   13f04:	e5840004 	str	r0, [r4, #4]
   13f08:	e1cd40d0 	ldrd	r4, [sp]
   13f0c:	e59d6008 	ldr	r6, [sp, #8]
   13f10:	e28dd00c 	add	sp, sp, #12
   13f14:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13f18:	e3a03000 	mov	r3, #0
   13f1c:	e5820004 	str	r0, [r2, #4]
   13f20:	e5850000 	str	r0, [r5]
   13f24:	e1cd40d0 	ldrd	r4, [sp]
   13f28:	e5803004 	str	r3, [r0, #4]
   13f2c:	e59d6008 	ldr	r6, [sp, #8]
   13f30:	e28dd00c 	add	sp, sp, #12
   13f34:	e5802008 	str	r2, [r0, #8]
   13f38:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   13f3c:	e3071860 	movw	r1, #30816	; 0x7860
   13f40:	e3401001 	movt	r1, #1
   13f44:	e30708b0 	movw	r0, #30896	; 0x78b0
   13f48:	e3400001 	movt	r0, #1
   13f4c:	e3a0204c 	mov	r2, #76	; 0x4c
   13f50:	ebffd1f5 	bl	872c <assertion_failed>
   13f54:	e3071860 	movw	r1, #30816	; 0x7860
   13f58:	e3401001 	movt	r1, #1
   13f5c:	e30708c0 	movw	r0, #30912	; 0x78c0
   13f60:	e3400001 	movt	r0, #1
   13f64:	e3a0204d 	mov	r2, #77	; 0x4d
   13f68:	ebffd1ef 	bl	872c <assertion_failed>
   13f6c:	e3071860 	movw	r1, #30816	; 0x7860
   13f70:	e3401001 	movt	r1, #1
   13f74:	e30708cc 	movw	r0, #30924	; 0x78cc
   13f78:	e3400001 	movt	r0, #1
   13f7c:	e3a0204e 	mov	r2, #78	; 0x4e
   13f80:	ebffd1e9 	bl	872c <assertion_failed>
   13f84:	e3071860 	movw	r1, #30816	; 0x7860
   13f88:	e3401001 	movt	r1, #1
   13f8c:	e30708f0 	movw	r0, #30960	; 0x78f0
   13f90:	e3400001 	movt	r0, #1
   13f94:	e3a02060 	mov	r2, #96	; 0x60
   13f98:	ebffd1e3 	bl	872c <assertion_failed>

00013f9c <CPtrList::InsertAfter(TPtrListElement*, void*)>:
   13f9c:	e16d41f0 	strd	r4, [sp, #-16]!
   13fa0:	e1a05000 	mov	r5, r0
   13fa4:	e3a00010 	mov	r0, #16
   13fa8:	e1a04001 	mov	r4, r1
   13fac:	e58d6008 	str	r6, [sp, #8]
   13fb0:	e1a06002 	mov	r6, r2
   13fb4:	e58de00c 	str	lr, [sp, #12]
   13fb8:	ebffedb8 	bl	f6a0 <operator new(unsigned int)>
   13fbc:	e3043d43 	movw	r3, #19779	; 0x4d43
   13fc0:	e345304c 	movt	r3, #20556	; 0x504c
   13fc4:	e3540000 	cmp	r4, #0
   13fc8:	e5803000 	str	r3, [r0]
   13fcc:	e580600c 	str	r6, [r0, #12]
   13fd0:	0a000013 	beq	14024 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x88>
   13fd4:	e5952000 	ldr	r2, [r5]
   13fd8:	e3520000 	cmp	r2, #0
   13fdc:	0a00001c 	beq	14054 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xb8>
   13fe0:	e5942000 	ldr	r2, [r4]
   13fe4:	e1520003 	cmp	r2, r3
   13fe8:	1a00001f 	bne	1406c <CPtrList::InsertAfter(TPtrListElement*, void*)+0xd0>
   13fec:	e5943008 	ldr	r3, [r4, #8]
   13ff0:	e5804004 	str	r4, [r0, #4]
   13ff4:	e3530000 	cmp	r3, #0
   13ff8:	e5803008 	str	r3, [r0, #8]
   13ffc:	0a000003 	beq	14010 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x74>
   14000:	e5931000 	ldr	r1, [r3]
   14004:	e1510002 	cmp	r1, r2
   14008:	05830004 	streq	r0, [r3, #4]
   1400c:	1a00001c 	bne	14084 <CPtrList::InsertAfter(TPtrListElement*, void*)+0xe8>
   14010:	e5840008 	str	r0, [r4, #8]
   14014:	e1cd40d0 	ldrd	r4, [sp]
   14018:	e59d6008 	ldr	r6, [sp, #8]
   1401c:	e28dd00c 	add	sp, sp, #12
   14020:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   14024:	e5953000 	ldr	r3, [r5]
   14028:	e3530000 	cmp	r3, #0
   1402c:	05803004 	streq	r3, [r0, #4]
   14030:	05803008 	streq	r3, [r0, #8]
   14034:	05850000 	streq	r0, [r5]
   14038:	0afffff5 	beq	14014 <CPtrList::InsertAfter(TPtrListElement*, void*)+0x78>
   1403c:	e3071860 	movw	r1, #30816	; 0x7860
   14040:	e3401001 	movt	r1, #1
   14044:	e307086c 	movw	r0, #30828	; 0x786c
   14048:	e3400001 	movt	r0, #1
   1404c:	e3a02074 	mov	r2, #116	; 0x74
   14050:	ebffd1b5 	bl	872c <assertion_failed>
   14054:	e3071860 	movw	r1, #30816	; 0x7860
   14058:	e3401001 	movt	r1, #1
   1405c:	e30708b0 	movw	r0, #30896	; 0x78b0
   14060:	e3400001 	movt	r0, #1
   14064:	e3a0207d 	mov	r2, #125	; 0x7d
   14068:	ebffd1af 	bl	872c <assertion_failed>
   1406c:	e3071860 	movw	r1, #30816	; 0x7860
   14070:	e3401001 	movt	r1, #1
   14074:	e3070918 	movw	r0, #31000	; 0x7918
   14078:	e3400001 	movt	r0, #1
   1407c:	e3a0207e 	mov	r2, #126	; 0x7e
   14080:	ebffd1a9 	bl	872c <assertion_failed>
   14084:	e3071860 	movw	r1, #30816	; 0x7860
   14088:	e3401001 	movt	r1, #1
   1408c:	e307093c 	movw	r0, #31036	; 0x793c
   14090:	e3400001 	movt	r0, #1
   14094:	e3a02085 	mov	r2, #133	; 0x85
   14098:	ebffd1a3 	bl	872c <assertion_failed>

0001409c <CPtrList::Remove(TPtrListElement*)>:
   1409c:	e3510000 	cmp	r1, #0
   140a0:	e52d4008 	str	r4, [sp, #-8]!
   140a4:	e58de004 	str	lr, [sp, #4]
   140a8:	0a000030 	beq	14170 <CPtrList::Remove(TPtrListElement*)+0xd4>
   140ac:	e5912000 	ldr	r2, [r1]
   140b0:	e3043d43 	movw	r3, #19779	; 0x4d43
   140b4:	e345304c 	movt	r3, #20556	; 0x504c
   140b8:	e1520003 	cmp	r2, r3
   140bc:	1a000031 	bne	14188 <CPtrList::Remove(TPtrListElement*)+0xec>
   140c0:	e5903000 	ldr	r3, [r0]
   140c4:	e1530001 	cmp	r3, r1
   140c8:	0a000013 	beq	1411c <CPtrList::Remove(TPtrListElement*)+0x80>
   140cc:	e5913004 	ldr	r3, [r1, #4]
   140d0:	e3530000 	cmp	r3, #0
   140d4:	0a000031 	beq	141a0 <CPtrList::Remove(TPtrListElement*)+0x104>
   140d8:	e5930000 	ldr	r0, [r3]
   140dc:	e1500002 	cmp	r0, r2
   140e0:	1a00001c 	bne	14158 <CPtrList::Remove(TPtrListElement*)+0xbc>
   140e4:	e5912008 	ldr	r2, [r1, #8]
   140e8:	e3520000 	cmp	r2, #0
   140ec:	e5832008 	str	r2, [r3, #8]
   140f0:	0a000003 	beq	14104 <CPtrList::Remove(TPtrListElement*)+0x68>
   140f4:	e592c000 	ldr	ip, [r2]
   140f8:	e15c0000 	cmp	ip, r0
   140fc:	05823004 	streq	r3, [r2, #4]
   14100:	1a00002c 	bne	141b8 <CPtrList::Remove(TPtrListElement*)+0x11c>
   14104:	e1a00001 	mov	r0, r1
   14108:	e3a01010 	mov	r1, #16
   1410c:	e59d4000 	ldr	r4, [sp]
   14110:	e59de004 	ldr	lr, [sp, #4]
   14114:	e28dd008 	add	sp, sp, #8
   14118:	eaffed7b 	b	f70c <operator delete(void*, unsigned int)>
   1411c:	e5933008 	ldr	r3, [r3, #8]
   14120:	e3530000 	cmp	r3, #0
   14124:	e5803000 	str	r3, [r0]
   14128:	0afffff5 	beq	14104 <CPtrList::Remove(TPtrListElement*)+0x68>
   1412c:	e5930000 	ldr	r0, [r3]
   14130:	e1500002 	cmp	r0, r2
   14134:	03a02000 	moveq	r2, #0
   14138:	05832004 	streq	r2, [r3, #4]
   1413c:	0afffff0 	beq	14104 <CPtrList::Remove(TPtrListElement*)+0x68>
   14140:	e3071860 	movw	r1, #30816	; 0x7860
   14144:	e3401001 	movt	r1, #1
   14148:	e3070968 	movw	r0, #31080	; 0x7968
   1414c:	e3400001 	movt	r0, #1
   14150:	e3a02098 	mov	r2, #152	; 0x98
   14154:	ebffd174 	bl	872c <assertion_failed>
   14158:	e3071860 	movw	r1, #30816	; 0x7860
   1415c:	e3401001 	movt	r1, #1
   14160:	e30709ac 	movw	r0, #31148	; 0x79ac
   14164:	e3400001 	movt	r0, #1
   14168:	e3a0209f 	mov	r2, #159	; 0x9f
   1416c:	ebffd16e 	bl	872c <assertion_failed>
   14170:	e3071860 	movw	r1, #30816	; 0x7860
   14174:	e3401001 	movt	r1, #1
   14178:	e307087c 	movw	r0, #30844	; 0x787c
   1417c:	e3400001 	movt	r0, #1
   14180:	e3a0208f 	mov	r2, #143	; 0x8f
   14184:	ebffd168 	bl	872c <assertion_failed>
   14188:	e3071860 	movw	r1, #30816	; 0x7860
   1418c:	e3401001 	movt	r1, #1
   14190:	e307088c 	movw	r0, #30860	; 0x788c
   14194:	e3400001 	movt	r0, #1
   14198:	e3a02090 	mov	r2, #144	; 0x90
   1419c:	ebffd162 	bl	872c <assertion_failed>
   141a0:	e3071860 	movw	r1, #30816	; 0x7860
   141a4:	e3401001 	movt	r1, #1
   141a8:	e3070994 	movw	r0, #31124	; 0x7994
   141ac:	e3400001 	movt	r0, #1
   141b0:	e3a0209e 	mov	r2, #158	; 0x9e
   141b4:	ebffd15c 	bl	872c <assertion_failed>
   141b8:	e3071860 	movw	r1, #30816	; 0x7860
   141bc:	e3401001 	movt	r1, #1
   141c0:	e3070968 	movw	r0, #31080	; 0x7968
   141c4:	e3400001 	movt	r0, #1
   141c8:	e3a020a4 	mov	r2, #164	; 0xa4
   141cc:	ebffd156 	bl	872c <assertion_failed>

000141d0 <CPtrList::Find(void*)>:
   141d0:	e5900000 	ldr	r0, [r0]
   141d4:	e3500000 	cmp	r0, #0
   141d8:	012fff1e 	bxeq	lr
   141dc:	e3042d43 	movw	r2, #19779	; 0x4d43
   141e0:	e345204c 	movt	r2, #20556	; 0x504c
   141e4:	ea000005 	b	14200 <CPtrList::Find(void*)+0x30>
   141e8:	e590300c 	ldr	r3, [r0, #12]
   141ec:	e1530001 	cmp	r3, r1
   141f0:	012fff1e 	bxeq	lr
   141f4:	e5900008 	ldr	r0, [r0, #8]
   141f8:	e3500000 	cmp	r0, #0
   141fc:	012fff1e 	bxeq	lr
   14200:	e5903000 	ldr	r3, [r0]
   14204:	e1530002 	cmp	r3, r2
   14208:	0afffff6 	beq	141e8 <CPtrList::Find(void*)+0x18>
   1420c:	e3071860 	movw	r1, #30816	; 0x7860
   14210:	e3401001 	movt	r1, #1
   14214:	e52d4008 	str	r4, [sp, #-8]!
   14218:	e307088c 	movw	r0, #30860	; 0x788c
   1421c:	e3400001 	movt	r0, #1
   14220:	e58de004 	str	lr, [sp, #4]
   14224:	e3a020b3 	mov	r2, #179	; 0xb3
   14228:	ebffd13f 	bl	872c <assertion_failed>

0001422c <CPageAllocator::CPageAllocator()>:
   1422c:	e3a02000 	mov	r2, #0
   14230:	e3a01001 	mov	r1, #1
   14234:	e5802000 	str	r2, [r0]
   14238:	e5802004 	str	r2, [r0, #4]
   1423c:	e5802008 	str	r2, [r0, #8]
   14240:	e580100c 	str	r1, [r0, #12]
   14244:	e12fff1e 	bx	lr

00014248 <CPageAllocator::~CPageAllocator()>:
   14248:	e12fff1e 	bx	lr

0001424c <CPageAllocator::Setup(unsigned int, unsigned int)>:
   1424c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
   14250:	e28db000 	add	fp, sp, #0
   14254:	e24dd014 	sub	sp, sp, #20
   14258:	e50b0008 	str	r0, [fp, #-8]
   1425c:	e50b100c 	str	r1, [fp, #-12]
   14260:	e50b2010 	str	r2, [fp, #-16]
   14264:	e51b300c 	ldr	r3, [fp, #-12]
   14268:	e2833eff 	add	r3, r3, #4080	; 0xff0
   1426c:	e283300f 	add	r3, r3, #15
   14270:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   14274:	e3c3300f 	bic	r3, r3, #15
   14278:	e1a02003 	mov	r2, r3
   1427c:	e51b3008 	ldr	r3, [fp, #-8]
   14280:	e5832000 	str	r2, [r3]
   14284:	e51b200c 	ldr	r2, [fp, #-12]
   14288:	e51b3010 	ldr	r3, [fp, #-16]
   1428c:	e0823003 	add	r3, r2, r3
   14290:	e3c33eff 	bic	r3, r3, #4080	; 0xff0
   14294:	e3c3300f 	bic	r3, r3, #15
   14298:	e1a02003 	mov	r2, r3
   1429c:	e51b3008 	ldr	r3, [fp, #-8]
   142a0:	e5832004 	str	r2, [r3, #4]
   142a4:	e320f000 	nop	{0}
   142a8:	e28bd000 	add	sp, fp, #0
   142ac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
   142b0:	e12fff1e 	bx	lr

000142b4 <CPageAllocator::GetFreeSpace() const>:
   142b4:	e5903000 	ldr	r3, [r0]
   142b8:	e5900004 	ldr	r0, [r0, #4]
   142bc:	e0400003 	sub	r0, r0, r3
   142c0:	e12fff1e 	bx	lr

000142c4 <CPageAllocator::Allocate()>:
   142c4:	e5903000 	ldr	r3, [r0]
   142c8:	e16d41f0 	strd	r4, [sp, #-16]!
   142cc:	e58d6008 	str	r6, [sp, #8]
   142d0:	e58de00c 	str	lr, [sp, #12]
   142d4:	e3530000 	cmp	r3, #0
   142d8:	0a000026 	beq	14378 <CPageAllocator::Allocate()+0xb4>
   142dc:	e1a04000 	mov	r4, r0
   142e0:	e590000c 	ldr	r0, [r0, #12]
   142e4:	e3500000 	cmp	r0, #0
   142e8:	1a000013 	bne	1433c <CPageAllocator::Allocate()+0x78>
   142ec:	e5945008 	ldr	r5, [r4, #8]
   142f0:	e3550000 	cmp	r5, #0
   142f4:	0a000014 	beq	1434c <CPageAllocator::Allocate()+0x88>
   142f8:	e5952000 	ldr	r2, [r5]
   142fc:	e3043d43 	movw	r3, #19779	; 0x4d43
   14300:	e3453047 	movt	r3, #20551	; 0x5047
   14304:	e1520003 	cmp	r2, r3
   14308:	1a00001f 	bne	1438c <CPageAllocator::Allocate()+0xc8>
   1430c:	e5952004 	ldr	r2, [r5, #4]
   14310:	e3a03000 	mov	r3, #0
   14314:	e5842008 	str	r2, [r4, #8]
   14318:	e5853000 	str	r3, [r5]
   1431c:	e594300c 	ldr	r3, [r4, #12]
   14320:	e3530000 	cmp	r3, #0
   14324:	1a000011 	bne	14370 <CPageAllocator::Allocate()+0xac>
   14328:	e1a00005 	mov	r0, r5
   1432c:	e1cd40d0 	ldrd	r4, [sp]
   14330:	e59d6008 	ldr	r6, [sp, #8]
   14334:	e28dd00c 	add	sp, sp, #12
   14338:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   1433c:	ebfff459 	bl	114a8 <EnterCritical>
   14340:	e5945008 	ldr	r5, [r4, #8]
   14344:	e3550000 	cmp	r5, #0
   14348:	1affffea 	bne	142f8 <CPageAllocator::Allocate()+0x34>
   1434c:	e5942000 	ldr	r2, [r4]
   14350:	e5941004 	ldr	r1, [r4, #4]
   14354:	e2823a01 	add	r3, r2, #4096	; 0x1000
   14358:	e1530001 	cmp	r3, r1
   1435c:	e5843000 	str	r3, [r4]
   14360:	e594300c 	ldr	r3, [r4, #12]
   14364:	91a05002 	movls	r5, r2
   14368:	e3530000 	cmp	r3, #0
   1436c:	0affffed 	beq	14328 <CPageAllocator::Allocate()+0x64>
   14370:	ebfff47a 	bl	11560 <LeaveCritical>
   14374:	eaffffeb 	b	14328 <CPageAllocator::Allocate()+0x64>
   14378:	e30719d8 	movw	r1, #31192	; 0x79d8
   1437c:	e3401001 	movt	r1, #1
   14380:	e2810014 	add	r0, r1, #20
   14384:	e3a02036 	mov	r2, #54	; 0x36
   14388:	ebffd0e7 	bl	872c <assertion_failed>
   1438c:	e30719d8 	movw	r1, #31192	; 0x79d8
   14390:	e3401001 	movt	r1, #1
   14394:	e2810024 	add	r0, r1, #36	; 0x24
   14398:	e3a02044 	mov	r2, #68	; 0x44
   1439c:	ebffd0e2 	bl	872c <assertion_failed>

000143a0 <CPageAllocator::Free(void*)>:
   143a0:	e16d41f0 	strd	r4, [sp, #-16]!
   143a4:	e2514000 	subs	r4, r1, #0
   143a8:	e58d6008 	str	r6, [sp, #8]
   143ac:	e58de00c 	str	lr, [sp, #12]
   143b0:	0a00000c 	beq	143e8 <CPageAllocator::Free(void*)+0x48>
   143b4:	e1a05000 	mov	r5, r0
   143b8:	e590000c 	ldr	r0, [r0, #12]
   143bc:	e3500000 	cmp	r0, #0
   143c0:	1a00000c 	bne	143f8 <CPageAllocator::Free(void*)+0x58>
   143c4:	e3043d43 	movw	r3, #19779	; 0x4d43
   143c8:	e3453047 	movt	r3, #20551	; 0x5047
   143cc:	e5952008 	ldr	r2, [r5, #8]
   143d0:	e5843000 	str	r3, [r4]
   143d4:	e595300c 	ldr	r3, [r5, #12]
   143d8:	e5842004 	str	r2, [r4, #4]
   143dc:	e5854008 	str	r4, [r5, #8]
   143e0:	e3530000 	cmp	r3, #0
   143e4:	1a000005 	bne	14400 <CPageAllocator::Free(void*)+0x60>
   143e8:	e1cd40d0 	ldrd	r4, [sp]
   143ec:	e59d6008 	ldr	r6, [sp, #8]
   143f0:	e28dd00c 	add	sp, sp, #12
   143f4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   143f8:	ebfff42a 	bl	114a8 <EnterCritical>
   143fc:	eafffff0 	b	143c4 <CPageAllocator::Free(void*)+0x24>
   14400:	e1cd40d0 	ldrd	r4, [sp]
   14404:	e59d6008 	ldr	r6, [sp, #8]
   14408:	e59de00c 	ldr	lr, [sp, #12]
   1440c:	e28dd010 	add	sp, sp, #16
   14410:	eafff452 	b	11560 <LeaveCritical>

00014414 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)>:
   14414:	e16d41f0 	strd	r4, [sp, #-16]!
   14418:	e3a05000 	mov	r5, #0
   1441c:	e351000a 	cmp	r1, #10
   14420:	e58d6008 	str	r6, [sp, #8]
   14424:	e58de00c 	str	lr, [sp, #12]
   14428:	e8800022 	stm	r0, {r1, r5}
   1442c:	e5805008 	str	r5, [r0, #8]
   14430:	e580200c 	str	r2, [r0, #12]
   14434:	e5c05010 	strb	r5, [r0, #16]
   14438:	e5805014 	str	r5, [r0, #20]
   1443c:	e5805018 	str	r5, [r0, #24]
   14440:	e5c0501c 	strb	r5, [r0, #28]
   14444:	9a000025 	bls	144e0 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0xcc>
   14448:	e351000e 	cmp	r1, #14
   1444c:	8a000028 	bhi	144f4 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0xe0>
   14450:	e28118fe 	add	r1, r1, #16646144	; 0xfe0000
   14454:	e2811070 	add	r1, r1, #112	; 0x70
   14458:	e1a01401 	lsl	r1, r1, #8
   1445c:	e591600c 	ldr	r6, [r1, #12]
   14460:	e1a06e26 	lsr	r6, r6, #28
   14464:	e3560001 	cmp	r6, #1
   14468:	1a000026 	bne	14508 <CDMA4Channel::CDMA4Channel(unsigned int, CInterruptSystem*)+0xf4>
   1446c:	e1a04000 	mov	r4, r0
   14470:	e3a01002 	mov	r1, #2
   14474:	e300011f 	movw	r0, #287	; 0x11f
   14478:	ebffec5b 	bl	f5ec <operator new[](unsigned int, int)>
   1447c:	e28030ff 	add	r3, r0, #255	; 0xff
   14480:	e3a02a07 	mov	r2, #28672	; 0x7000
   14484:	e34f2e00 	movt	r2, #65024	; 0xfe00
   14488:	e3c330ff 	bic	r3, r3, #255	; 0xff
   1448c:	e5941000 	ldr	r1, [r4]
   14490:	e9840009 	stmib	r4, {r0, r3}
   14494:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   14498:	e583501c 	str	r5, [r3, #28]
   1449c:	e5923ff0 	ldr	r3, [r2, #4080]	; 0xff0
   144a0:	e1836116 	orr	r6, r3, r6, lsl r1
   144a4:	e5826ff0 	str	r6, [r2, #4080]	; 0xff0
   144a8:	ebffe912 	bl	e8f8 <CTimer::SimpleusDelay(unsigned int)>
   144ac:	e5943000 	ldr	r3, [r4]
   144b0:	e3a02502 	mov	r2, #8388608	; 0x800000
   144b4:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   144b8:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   144bc:	e2833070 	add	r3, r3, #112	; 0x70
   144c0:	e1a03403 	lsl	r3, r3, #8
   144c4:	e583200c 	str	r2, [r3, #12]
   144c8:	ebffe90a 	bl	e8f8 <CTimer::SimpleusDelay(unsigned int)>
   144cc:	e1a00004 	mov	r0, r4
   144d0:	e1cd40d0 	ldrd	r4, [sp]
   144d4:	e59d6008 	ldr	r6, [sp, #8]
   144d8:	e28dd00c 	add	sp, sp, #12
   144dc:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   144e0:	e3071a20 	movw	r1, #31264	; 0x7a20
   144e4:	e3401001 	movt	r1, #1
   144e8:	e2810010 	add	r0, r1, #16
   144ec:	e3a0206f 	mov	r2, #111	; 0x6f
   144f0:	ebffd08d 	bl	872c <assertion_failed>
   144f4:	e3071a20 	movw	r1, #31264	; 0x7a20
   144f8:	e3401001 	movt	r1, #1
   144fc:	e2810030 	add	r0, r1, #48	; 0x30
   14500:	e3a02070 	mov	r2, #112	; 0x70
   14504:	ebffd088 	bl	872c <assertion_failed>
   14508:	e3071a20 	movw	r1, #31264	; 0x7a20
   1450c:	e3401001 	movt	r1, #1
   14510:	e2810050 	add	r0, r1, #80	; 0x50
   14514:	e3a02071 	mov	r2, #113	; 0x71
   14518:	ebffd083 	bl	872c <assertion_failed>

0001451c <CDMA4Channel::~CDMA4Channel()>:
   1451c:	e5903000 	ldr	r3, [r0]
   14520:	e52d4008 	str	r4, [sp, #-8]!
   14524:	e58de004 	str	lr, [sp, #4]
   14528:	e353000a 	cmp	r3, #10
   1452c:	9a000029 	bls	145d8 <CDMA4Channel::~CDMA4Channel()+0xbc>
   14530:	e353000e 	cmp	r3, #14
   14534:	8a00002c 	bhi	145ec <CDMA4Channel::~CDMA4Channel()+0xd0>
   14538:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   1453c:	e3a02502 	mov	r2, #8388608	; 0x800000
   14540:	e2833070 	add	r3, r3, #112	; 0x70
   14544:	e1a04000 	mov	r4, r0
   14548:	e1a03403 	lsl	r3, r3, #8
   1454c:	e3a00ffa 	mov	r0, #1000	; 0x3e8
   14550:	e583200c 	str	r2, [r3, #12]
   14554:	ebffe8e7 	bl	e8f8 <CTimer::SimpleusDelay(unsigned int)>
   14558:	e3a03a07 	mov	r3, #28672	; 0x7000
   1455c:	e34f3e00 	movt	r3, #65024	; 0xfe00
   14560:	e594c000 	ldr	ip, [r4]
   14564:	e3a0e001 	mov	lr, #1
   14568:	e3a01000 	mov	r1, #0
   1456c:	e5932ff0 	ldr	r2, [r3, #4080]	; 0xff0
   14570:	e594000c 	ldr	r0, [r4, #12]
   14574:	e1c22c1e 	bic	r2, r2, lr, lsl ip
   14578:	e1500001 	cmp	r0, r1
   1457c:	e5832ff0 	str	r2, [r3, #4080]	; 0xff0
   14580:	e5841014 	str	r1, [r4, #20]
   14584:	0a000009 	beq	145b0 <CDMA4Channel::~CDMA4Channel()+0x94>
   14588:	e5d43010 	ldrb	r3, [r4, #16]
   1458c:	e1530001 	cmp	r3, r1
   14590:	0a000004 	beq	145a8 <CDMA4Channel::~CDMA4Channel()+0x8c>
   14594:	e5941000 	ldr	r1, [r4]
   14598:	e351000a 	cmp	r1, #10
   1459c:	9a000017 	bls	14600 <CDMA4Channel::~CDMA4Channel()+0xe4>
   145a0:	e281106e 	add	r1, r1, #110	; 0x6e
   145a4:	ebfff48c 	bl	117dc <CInterruptSystem::DisconnectIRQ(unsigned int)>
   145a8:	e3a03000 	mov	r3, #0
   145ac:	e584300c 	str	r3, [r4, #12]
   145b0:	e5940004 	ldr	r0, [r4, #4]
   145b4:	e3a03000 	mov	r3, #0
   145b8:	e5843008 	str	r3, [r4, #8]
   145bc:	e1500003 	cmp	r0, r3
   145c0:	0a000000 	beq	145c8 <CDMA4Channel::~CDMA4Channel()+0xac>
   145c4:	ebffec46 	bl	f6e4 <operator delete[](void*)>
   145c8:	e1a00004 	mov	r0, r4
   145cc:	e59d4000 	ldr	r4, [sp]
   145d0:	e28dd004 	add	sp, sp, #4
   145d4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   145d8:	e3071a20 	movw	r1, #31264	; 0x7a20
   145dc:	e3401001 	movt	r1, #1
   145e0:	e2810010 	add	r0, r1, #16
   145e4:	e3a02083 	mov	r2, #131	; 0x83
   145e8:	ebffd04f 	bl	872c <assertion_failed>
   145ec:	e3071a20 	movw	r1, #31264	; 0x7a20
   145f0:	e3401001 	movt	r1, #1
   145f4:	e2810030 	add	r0, r1, #48	; 0x30
   145f8:	e3a02084 	mov	r2, #132	; 0x84
   145fc:	ebffd04a 	bl	872c <assertion_failed>
   14600:	e3071a20 	movw	r1, #31264	; 0x7a20
   14604:	e3401001 	movt	r1, #1
   14608:	e28100bc 	add	r0, r1, #188	; 0xbc
   1460c:	e3a02091 	mov	r2, #145	; 0x91
   14610:	ebffd045 	bl	872c <assertion_failed>

00014614 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)>:
   14614:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
   14618:	e2515000 	subs	r5, r1, #0
   1461c:	e1cd60f8 	strd	r6, [sp, #8]
   14620:	e5dd701c 	ldrb	r7, [sp, #28]
   14624:	e58d8010 	str	r8, [sp, #16]
   14628:	e58de014 	str	lr, [sp, #20]
   1462c:	e59de018 	ldr	lr, [sp, #24]
   14630:	0a000032 	beq	14700 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xec>
   14634:	e3520000 	cmp	r2, #0
   14638:	0a000035 	beq	14714 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x100>
   1463c:	e3530000 	cmp	r3, #0
   14640:	e1a04003 	mov	r4, r3
   14644:	0a000037 	beq	14728 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x114>
   14648:	e35e000f 	cmp	lr, #15
   1464c:	8a00003a 	bhi	1473c <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x128>
   14650:	e590c008 	ldr	ip, [r0, #8]
   14654:	e1a06000 	mov	r6, r0
   14658:	e35c0000 	cmp	ip, #0
   1465c:	0a00003b 	beq	14750 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x13c>
   14660:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   14664:	8a00003e 	bhi	14764 <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0x150>
   14668:	e1a0e40e 	lsl	lr, lr, #8
   1466c:	e3a03000 	mov	r3, #0
   14670:	e3a0100c 	mov	r1, #12
   14674:	e1570003 	cmp	r7, r3
   14678:	e38eea05 	orr	lr, lr, #20480	; 0x5000
   1467c:	e5cc1000 	strb	r1, [ip]
   14680:	e5cc3001 	strb	r3, [ip, #1]
   14684:	e5cc3002 	strb	r3, [ip, #2]
   14688:	e5cc3003 	strb	r3, [ip, #3]
   1468c:	e58c2004 	str	r2, [ip, #4]
   14690:	e58ce008 	str	lr, [ip, #8]
   14694:	e58c500c 	str	r5, [ip, #12]
   14698:	e58ce010 	str	lr, [ip, #16]
   1469c:	e58c4014 	str	r4, [ip, #20]
   146a0:	e5cc3018 	strb	r3, [ip, #24]
   146a4:	e5cc3019 	strb	r3, [ip, #25]
   146a8:	e5cc301a 	strb	r3, [ip, #26]
   146ac:	e5cc301b 	strb	r3, [ip, #27]
   146b0:	1a000005 	bne	146cc <CDMA4Channel::SetupMemCopy(void*, void const*, unsigned int, unsigned int, bool)+0xb8>
   146b4:	e1cd40d0 	ldrd	r4, [sp]
   146b8:	e59d8010 	ldr	r8, [sp, #16]
   146bc:	e5807020 	str	r7, [r0, #32]
   146c0:	e1cd60d8 	ldrd	r6, [sp, #8]
   146c4:	e28dd014 	add	sp, sp, #20
   146c8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   146cc:	e1a01004 	mov	r1, r4
   146d0:	e1a00002 	mov	r0, r2
   146d4:	e5865020 	str	r5, [r6, #32]
   146d8:	e5864024 	str	r4, [r6, #36]	; 0x24
   146dc:	ebfff0b4 	bl	109b4 <CleanAndInvalidateDataCacheRange>
   146e0:	e1a01004 	mov	r1, r4
   146e4:	e1a00005 	mov	r0, r5
   146e8:	e1cd40d0 	ldrd	r4, [sp]
   146ec:	e1cd60d8 	ldrd	r6, [sp, #8]
   146f0:	e59d8010 	ldr	r8, [sp, #16]
   146f4:	e59de014 	ldr	lr, [sp, #20]
   146f8:	e28dd018 	add	sp, sp, #24
   146fc:	eafff0ac 	b	109b4 <CleanAndInvalidateDataCacheRange>
   14700:	e3071a20 	movw	r1, #31264	; 0x7a20
   14704:	e3401001 	movt	r1, #1
   14708:	e28100d0 	add	r0, r1, #208	; 0xd0
   1470c:	e3a020a1 	mov	r2, #161	; 0xa1
   14710:	ebffd005 	bl	872c <assertion_failed>
   14714:	e3071a20 	movw	r1, #31264	; 0x7a20
   14718:	e3401001 	movt	r1, #1
   1471c:	e28100e4 	add	r0, r1, #228	; 0xe4
   14720:	e3a020a2 	mov	r2, #162	; 0xa2
   14724:	ebffd000 	bl	872c <assertion_failed>
   14728:	e3071a20 	movw	r1, #31264	; 0x7a20
   1472c:	e3401001 	movt	r1, #1
   14730:	e28100f4 	add	r0, r1, #244	; 0xf4
   14734:	e3a020a3 	mov	r2, #163	; 0xa3
   14738:	ebffcffb 	bl	872c <assertion_failed>
   1473c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14740:	e3401001 	movt	r1, #1
   14744:	e2810c01 	add	r0, r1, #256	; 0x100
   14748:	e3a020a4 	mov	r2, #164	; 0xa4
   1474c:	ebffcff6 	bl	872c <assertion_failed>
   14750:	e3071a20 	movw	r1, #31264	; 0x7a20
   14754:	e3401001 	movt	r1, #1
   14758:	e2810f47 	add	r0, r1, #284	; 0x11c
   1475c:	e3a020a6 	mov	r2, #166	; 0xa6
   14760:	ebffcff1 	bl	872c <assertion_failed>
   14764:	e3071a20 	movw	r1, #31264	; 0x7a20
   14768:	e3401001 	movt	r1, #1
   1476c:	e2810f4d 	add	r0, r1, #308	; 0x134
   14770:	e3a020a7 	mov	r2, #167	; 0xa7
   14774:	ebffcfec 	bl	872c <assertion_failed>

00014778 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)>:
   14778:	e16d41f0 	strd	r4, [sp, #-16]!
   1477c:	e2514000 	subs	r4, r1, #0
   14780:	e5dd5010 	ldrb	r5, [sp, #16]
   14784:	e58d6008 	str	r6, [sp, #8]
   14788:	e58de00c 	str	lr, [sp, #12]
   1478c:	0a000028 	beq	14834 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xbc>
   14790:	e3530000 	cmp	r3, #0
   14794:	e1a01003 	mov	r1, r3
   14798:	0a00002a 	beq	14848 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xd0>
   1479c:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   147a0:	8a00002d 	bhi	1485c <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xe4>
   147a4:	e3d224ff 	bics	r2, r2, #-16777216	; 0xff000000
   147a8:	0a000030 	beq	14870 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0xf8>
   147ac:	e590c008 	ldr	ip, [r0, #8]
   147b0:	e1a0e000 	mov	lr, r0
   147b4:	e282247e 	add	r2, r2, #2113929216	; 0x7e000000
   147b8:	e35c0000 	cmp	ip, #0
   147bc:	0a000030 	beq	14884 <CDMA4Channel::SetupIORead(void*, unsigned int, unsigned int, TDREQ)+0x10c>
   147c0:	e304300c 	movw	r3, #16396	; 0x400c
   147c4:	e3a00050 	mov	r0, #80	; 0x50
   147c8:	e58c2004 	str	r2, [ip, #4]
   147cc:	e1833485 	orr	r3, r3, r5, lsl #9
   147d0:	e3a02000 	mov	r2, #0
   147d4:	e3a05004 	mov	r5, #4
   147d8:	e59d6008 	ldr	r6, [sp, #8]
   147dc:	e58c3000 	str	r3, [ip]
   147e0:	e5cc5008 	strb	r5, [ip, #8]
   147e4:	e5cc2009 	strb	r2, [ip, #9]
   147e8:	e5cc200a 	strb	r2, [ip, #10]
   147ec:	e5cc200b 	strb	r2, [ip, #11]
   147f0:	e58c400c 	str	r4, [ip, #12]
   147f4:	e5cc2010 	strb	r2, [ip, #16]
   147f8:	e5cc0011 	strb	r0, [ip, #17]
   147fc:	e1a00004 	mov	r0, r4
   14800:	e5cc2012 	strb	r2, [ip, #18]
   14804:	e5cc2013 	strb	r2, [ip, #19]
   14808:	e58c1014 	str	r1, [ip, #20]
   1480c:	e5cc2018 	strb	r2, [ip, #24]
   14810:	e5cc2019 	strb	r2, [ip, #25]
   14814:	e5cc201a 	strb	r2, [ip, #26]
   14818:	e5cc201b 	strb	r2, [ip, #27]
   1481c:	e58e4020 	str	r4, [lr, #32]
   14820:	e58e1024 	str	r1, [lr, #36]	; 0x24
   14824:	e1cd40d0 	ldrd	r4, [sp]
   14828:	e59de00c 	ldr	lr, [sp, #12]
   1482c:	e28dd010 	add	sp, sp, #16
   14830:	eafff05f 	b	109b4 <CleanAndInvalidateDataCacheRange>
   14834:	e3071a20 	movw	r1, #31264	; 0x7a20
   14838:	e3401001 	movt	r1, #1
   1483c:	e28100d0 	add	r0, r1, #208	; 0xd0
   14840:	e3a020ca 	mov	r2, #202	; 0xca
   14844:	ebffcfb8 	bl	872c <assertion_failed>
   14848:	e3071a20 	movw	r1, #31264	; 0x7a20
   1484c:	e3401001 	movt	r1, #1
   14850:	e28100f4 	add	r0, r1, #244	; 0xf4
   14854:	e3a020cb 	mov	r2, #203	; 0xcb
   14858:	ebffcfb3 	bl	872c <assertion_failed>
   1485c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14860:	e3401001 	movt	r1, #1
   14864:	e2810f4d 	add	r0, r1, #308	; 0x134
   14868:	e3a020cc 	mov	r2, #204	; 0xcc
   1486c:	ebffcfae 	bl	872c <assertion_failed>
   14870:	e3071a20 	movw	r1, #31264	; 0x7a20
   14874:	e3401001 	movt	r1, #1
   14878:	e2810e15 	add	r0, r1, #336	; 0x150
   1487c:	e3a020cf 	mov	r2, #207	; 0xcf
   14880:	ebffcfa9 	bl	872c <assertion_failed>
   14884:	e3071a20 	movw	r1, #31264	; 0x7a20
   14888:	e3401001 	movt	r1, #1
   1488c:	e2810f47 	add	r0, r1, #284	; 0x11c
   14890:	e3a020d2 	mov	r2, #210	; 0xd2
   14894:	ebffcfa4 	bl	872c <assertion_failed>

00014898 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)>:
   14898:	e3520000 	cmp	r2, #0
   1489c:	e16d41f0 	strd	r4, [sp, #-16]!
   148a0:	e5dd5010 	ldrb	r5, [sp, #16]
   148a4:	e58d6008 	str	r6, [sp, #8]
   148a8:	e58de00c 	str	lr, [sp, #12]
   148ac:	0a000028 	beq	14954 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xbc>
   148b0:	e3530000 	cmp	r3, #0
   148b4:	e1a0c001 	mov	ip, r1
   148b8:	e1a01003 	mov	r1, r3
   148bc:	0a000029 	beq	14968 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xd0>
   148c0:	e3730107 	cmn	r3, #-1073741823	; 0xc0000001
   148c4:	8a00002c 	bhi	1497c <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xe4>
   148c8:	e3dce4ff 	bics	lr, ip, #-16777216	; 0xff000000
   148cc:	0a00002f 	beq	14990 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0xf8>
   148d0:	e590c008 	ldr	ip, [r0, #8]
   148d4:	e1a04000 	mov	r4, r0
   148d8:	e28ee47e 	add	lr, lr, #2113929216	; 0x7e000000
   148dc:	e35c0000 	cmp	ip, #0
   148e0:	0a00002f 	beq	149a4 <CDMA4Channel::SetupIOWrite(unsigned int, void const*, unsigned int, TDREQ)+0x10c>
   148e4:	e308300c 	movw	r3, #32780	; 0x800c
   148e8:	e1a00002 	mov	r0, r2
   148ec:	e58c2004 	str	r2, [ip, #4]
   148f0:	e1833485 	orr	r3, r3, r5, lsl #9
   148f4:	e3a02000 	mov	r2, #0
   148f8:	e3a05050 	mov	r5, #80	; 0x50
   148fc:	e59d6008 	ldr	r6, [sp, #8]
   14900:	e58c3000 	str	r3, [ip]
   14904:	e58ce00c 	str	lr, [ip, #12]
   14908:	e3a0e004 	mov	lr, #4
   1490c:	e5cc2008 	strb	r2, [ip, #8]
   14910:	e5cc5009 	strb	r5, [ip, #9]
   14914:	e5cc200a 	strb	r2, [ip, #10]
   14918:	e5cc200b 	strb	r2, [ip, #11]
   1491c:	e5cce010 	strb	lr, [ip, #16]
   14920:	e5cc2011 	strb	r2, [ip, #17]
   14924:	e5cc2012 	strb	r2, [ip, #18]
   14928:	e5cc2013 	strb	r2, [ip, #19]
   1492c:	e58c1014 	str	r1, [ip, #20]
   14930:	e5cc2018 	strb	r2, [ip, #24]
   14934:	e5cc2019 	strb	r2, [ip, #25]
   14938:	e5cc201a 	strb	r2, [ip, #26]
   1493c:	e5cc201b 	strb	r2, [ip, #27]
   14940:	e5842020 	str	r2, [r4, #32]
   14944:	e1cd40d0 	ldrd	r4, [sp]
   14948:	e59de00c 	ldr	lr, [sp, #12]
   1494c:	e28dd010 	add	sp, sp, #16
   14950:	eafff017 	b	109b4 <CleanAndInvalidateDataCacheRange>
   14954:	e3071a20 	movw	r1, #31264	; 0x7a20
   14958:	e3401001 	movt	r1, #1
   1495c:	e28100e4 	add	r0, r1, #228	; 0xe4
   14960:	e3a020ec 	mov	r2, #236	; 0xec
   14964:	ebffcf70 	bl	872c <assertion_failed>
   14968:	e3071a20 	movw	r1, #31264	; 0x7a20
   1496c:	e3401001 	movt	r1, #1
   14970:	e28100f4 	add	r0, r1, #244	; 0xf4
   14974:	e3a020ed 	mov	r2, #237	; 0xed
   14978:	ebffcf6b 	bl	872c <assertion_failed>
   1497c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14980:	e3401001 	movt	r1, #1
   14984:	e2810f4d 	add	r0, r1, #308	; 0x134
   14988:	e3a020ee 	mov	r2, #238	; 0xee
   1498c:	ebffcf66 	bl	872c <assertion_failed>
   14990:	e3071a20 	movw	r1, #31264	; 0x7a20
   14994:	e3401001 	movt	r1, #1
   14998:	e2810e15 	add	r0, r1, #336	; 0x150
   1499c:	e3a020f1 	mov	r2, #241	; 0xf1
   149a0:	ebffcf61 	bl	872c <assertion_failed>
   149a4:	e3071a20 	movw	r1, #31264	; 0x7a20
   149a8:	e3401001 	movt	r1, #1
   149ac:	e2810f47 	add	r0, r1, #284	; 0x11c
   149b0:	e3a020f4 	mov	r2, #244	; 0xf4
   149b4:	ebffcf5c 	bl	872c <assertion_failed>

000149b8 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)>:
   149b8:	e3510000 	cmp	r1, #0
   149bc:	e16d41f8 	strd	r4, [sp, #-24]!	; 0xffffffe8
   149c0:	e1cd60f8 	strd	r6, [sp, #8]
   149c4:	e58d8010 	str	r8, [sp, #16]
   149c8:	e58de014 	str	lr, [sp, #20]
   149cc:	e1a0e000 	mov	lr, r0
   149d0:	e1a00002 	mov	r0, r2
   149d4:	e59d5018 	ldr	r5, [sp, #24]
   149d8:	e59d401c 	ldr	r4, [sp, #28]
   149dc:	e59d2020 	ldr	r2, [sp, #32]
   149e0:	0a000032 	beq	14ab0 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xf8>
   149e4:	e3500000 	cmp	r0, #0
   149e8:	0a000035 	beq	14ac4 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x10c>
   149ec:	e3530000 	cmp	r3, #0
   149f0:	0a000038 	beq	14ad8 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x120>
   149f4:	e3530801 	cmp	r3, #65536	; 0x10000
   149f8:	2a00003b 	bcs	14aec <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x134>
   149fc:	e3550000 	cmp	r5, #0
   14a00:	0a00003e 	beq	14b00 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x148>
   14a04:	e3550901 	cmp	r5, #16384	; 0x4000
   14a08:	2a000041 	bcs	14b14 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x15c>
   14a0c:	e3540801 	cmp	r4, #65536	; 0x10000
   14a10:	2a000021 	bcs	14a9c <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0xe4>
   14a14:	e352000f 	cmp	r2, #15
   14a18:	8a000042 	bhi	14b28 <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x170>
   14a1c:	e59ec008 	ldr	ip, [lr, #8]
   14a20:	e35c0000 	cmp	ip, #0
   14a24:	0a000044 	beq	14b3c <CDMA4Channel::SetupMemCopy2D(void*, void const*, unsigned int, unsigned int, unsigned int, unsigned int)+0x184>
   14a28:	e1a02402 	lsl	r2, r2, #8
   14a2c:	e2457001 	sub	r7, r5, #1
   14a30:	e58c0004 	str	r0, [ip, #4]
   14a34:	e1837807 	orr	r7, r3, r7, lsl #16
   14a38:	e58c100c 	str	r1, [ip, #12]
   14a3c:	e1826804 	orr	r6, r2, r4, lsl #16
   14a40:	e3a04000 	mov	r4, #0
   14a44:	e3822a05 	orr	r2, r2, #20480	; 0x5000
   14a48:	e0010395 	mul	r1, r5, r3
   14a4c:	e3a0300e 	mov	r3, #14
   14a50:	e59d8010 	ldr	r8, [sp, #16]
   14a54:	e3866a05 	orr	r6, r6, #20480	; 0x5000
   14a58:	e58c2008 	str	r2, [ip, #8]
   14a5c:	e58c6010 	str	r6, [ip, #16]
   14a60:	e58c7014 	str	r7, [ip, #20]
   14a64:	e1cd60d8 	ldrd	r6, [sp, #8]
   14a68:	e5cc3000 	strb	r3, [ip]
   14a6c:	e5cc4001 	strb	r4, [ip, #1]
   14a70:	e5cc4002 	strb	r4, [ip, #2]
   14a74:	e5cc4003 	strb	r4, [ip, #3]
   14a78:	e5cc4018 	strb	r4, [ip, #24]
   14a7c:	e5cc4019 	strb	r4, [ip, #25]
   14a80:	e5cc401a 	strb	r4, [ip, #26]
   14a84:	e5cc401b 	strb	r4, [ip, #27]
   14a88:	e58e4020 	str	r4, [lr, #32]
   14a8c:	e1cd40d0 	ldrd	r4, [sp]
   14a90:	e59de014 	ldr	lr, [sp, #20]
   14a94:	e28dd018 	add	sp, sp, #24
   14a98:	eaffefc5 	b	109b4 <CleanAndInvalidateDataCacheRange>
   14a9c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14aa0:	e3401001 	movt	r1, #1
   14aa4:	e2810f72 	add	r0, r1, #456	; 0x1c8
   14aa8:	e3002115 	movw	r2, #277	; 0x115
   14aac:	ebffcf1e 	bl	872c <assertion_failed>
   14ab0:	e3071a20 	movw	r1, #31264	; 0x7a20
   14ab4:	e3401001 	movt	r1, #1
   14ab8:	e28100d0 	add	r0, r1, #208	; 0xd0
   14abc:	e300210f 	movw	r2, #271	; 0x10f
   14ac0:	ebffcf19 	bl	872c <assertion_failed>
   14ac4:	e3071a20 	movw	r1, #31264	; 0x7a20
   14ac8:	e3401001 	movt	r1, #1
   14acc:	e28100e4 	add	r0, r1, #228	; 0xe4
   14ad0:	e3a02e11 	mov	r2, #272	; 0x110
   14ad4:	ebffcf14 	bl	872c <assertion_failed>
   14ad8:	e3071a20 	movw	r1, #31264	; 0x7a20
   14adc:	e3401001 	movt	r1, #1
   14ae0:	e2810e16 	add	r0, r1, #352	; 0x160
   14ae4:	e3002111 	movw	r2, #273	; 0x111
   14ae8:	ebffcf0f 	bl	872c <assertion_failed>
   14aec:	e3071a20 	movw	r1, #31264	; 0x7a20
   14af0:	e3401001 	movt	r1, #1
   14af4:	e2810f5d 	add	r0, r1, #372	; 0x174
   14af8:	e3002112 	movw	r2, #274	; 0x112
   14afc:	ebffcf0a 	bl	872c <assertion_failed>
   14b00:	e3071a20 	movw	r1, #31264	; 0x7a20
   14b04:	e3401001 	movt	r1, #1
   14b08:	e2810f66 	add	r0, r1, #408	; 0x198
   14b0c:	e3002113 	movw	r2, #275	; 0x113
   14b10:	ebffcf05 	bl	872c <assertion_failed>
   14b14:	e3071a20 	movw	r1, #31264	; 0x7a20
   14b18:	e3401001 	movt	r1, #1
   14b1c:	e2810f6a 	add	r0, r1, #424	; 0x1a8
   14b20:	e3a02f45 	mov	r2, #276	; 0x114
   14b24:	ebffcf00 	bl	872c <assertion_failed>
   14b28:	e3071a20 	movw	r1, #31264	; 0x7a20
   14b2c:	e3401001 	movt	r1, #1
   14b30:	e2810c01 	add	r0, r1, #256	; 0x100
   14b34:	e3002116 	movw	r2, #278	; 0x116
   14b38:	ebffcefb 	bl	872c <assertion_failed>
   14b3c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14b40:	e3401001 	movt	r1, #1
   14b44:	e2810f47 	add	r0, r1, #284	; 0x11c
   14b48:	e3a02f46 	mov	r2, #280	; 0x118
   14b4c:	ebffcef6 	bl	872c <assertion_failed>

00014b50 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)>:
   14b50:	e5903000 	ldr	r3, [r0]
   14b54:	e16d41f0 	strd	r4, [sp, #-16]!
   14b58:	e58d6008 	str	r6, [sp, #8]
   14b5c:	e58de00c 	str	lr, [sp, #12]
   14b60:	e353000a 	cmp	r3, #10
   14b64:	9a00001a 	bls	14bd4 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x84>
   14b68:	e353000e 	cmp	r3, #14
   14b6c:	8a00001d 	bhi	14be8 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x98>
   14b70:	e1a04000 	mov	r4, r0
   14b74:	e590000c 	ldr	r0, [r0, #12]
   14b78:	e3500000 	cmp	r0, #0
   14b7c:	0a00001e 	beq	14bfc <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xac>
   14b80:	e1a06002 	mov	r6, r2
   14b84:	e5d42010 	ldrb	r2, [r4, #16]
   14b88:	e1a05001 	mov	r5, r1
   14b8c:	e3520000 	cmp	r2, #0
   14b90:	0a000007 	beq	14bb4 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x64>
   14b94:	e3550000 	cmp	r5, #0
   14b98:	e5845014 	str	r5, [r4, #20]
   14b9c:	0a00001b 	beq	14c10 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0xc0>
   14ba0:	e5846018 	str	r6, [r4, #24]
   14ba4:	e1cd40d0 	ldrd	r4, [sp]
   14ba8:	e59d6008 	ldr	r6, [sp, #8]
   14bac:	e28dd00c 	add	sp, sp, #12
   14bb0:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   14bb4:	e283106e 	add	r1, r3, #110	; 0x6e
   14bb8:	e3042fec 	movw	r2, #20460	; 0x4fec
   14bbc:	e3402001 	movt	r2, #1
   14bc0:	e1a03004 	mov	r3, r4
   14bc4:	ebfff2e3 	bl	11758 <CInterruptSystem::ConnectIRQ(unsigned int, void (*)(void*), void*)>
   14bc8:	e3a03001 	mov	r3, #1
   14bcc:	e5c43010 	strb	r3, [r4, #16]
   14bd0:	eaffffef 	b	14b94 <CDMA4Channel::SetCompletionRoutine(void (*)(unsigned int, bool, void*), void*)+0x44>
   14bd4:	e3071a20 	movw	r1, #31264	; 0x7a20
   14bd8:	e3401001 	movt	r1, #1
   14bdc:	e2810010 	add	r0, r1, #16
   14be0:	e3002135 	movw	r2, #309	; 0x135
   14be4:	ebffced0 	bl	872c <assertion_failed>
   14be8:	e3071a20 	movw	r1, #31264	; 0x7a20
   14bec:	e3401001 	movt	r1, #1
   14bf0:	e2810030 	add	r0, r1, #48	; 0x30
   14bf4:	e3002136 	movw	r2, #310	; 0x136
   14bf8:	ebffcecb 	bl	872c <assertion_failed>
   14bfc:	e3071a20 	movw	r1, #31264	; 0x7a20
   14c00:	e3401001 	movt	r1, #1
   14c04:	e2810f7b 	add	r0, r1, #492	; 0x1ec
   14c08:	e3002137 	movw	r2, #311	; 0x137
   14c0c:	ebffcec6 	bl	872c <assertion_failed>
   14c10:	e3071a20 	movw	r1, #31264	; 0x7a20
   14c14:	e3401001 	movt	r1, #1
   14c18:	e2810f81 	add	r0, r1, #516	; 0x204
   14c1c:	e3002142 	movw	r2, #322	; 0x142
   14c20:	ebffcec1 	bl	872c <assertion_failed>

00014c24 <CDMA4Channel::Start()>:
   14c24:	e5902000 	ldr	r2, [r0]
   14c28:	e52d4008 	str	r4, [sp, #-8]!
   14c2c:	e58de004 	str	lr, [sp, #4]
   14c30:	e352000a 	cmp	r2, #10
   14c34:	9a000030 	bls	14cfc <CDMA4Channel::Start()+0xd8>
   14c38:	e352000e 	cmp	r2, #14
   14c3c:	8a000033 	bhi	14d10 <CDMA4Channel::Start()+0xec>
   14c40:	e1a04000 	mov	r4, r0
   14c44:	e5900008 	ldr	r0, [r0, #8]
   14c48:	e3500000 	cmp	r0, #0
   14c4c:	0a000034 	beq	14d24 <CDMA4Channel::Start()+0x100>
   14c50:	e5943014 	ldr	r3, [r4, #20]
   14c54:	e3530000 	cmp	r3, #0
   14c58:	0a000008 	beq	14c80 <CDMA4Channel::Start()+0x5c>
   14c5c:	e594300c 	ldr	r3, [r4, #12]
   14c60:	e3530000 	cmp	r3, #0
   14c64:	0a00001f 	beq	14ce8 <CDMA4Channel::Start()+0xc4>
   14c68:	e5d43010 	ldrb	r3, [r4, #16]
   14c6c:	e3530000 	cmp	r3, #0
   14c70:	0a00003a 	beq	14d60 <CDMA4Channel::Start()+0x13c>
   14c74:	e5903000 	ldr	r3, [r0]
   14c78:	e3833001 	orr	r3, r3, #1
   14c7c:	e5803000 	str	r3, [r0]
   14c80:	e28238fe 	add	r3, r2, #16646144	; 0xfe0000
   14c84:	e2833070 	add	r3, r3, #112	; 0x70
   14c88:	e1a03403 	lsl	r3, r3, #8
   14c8c:	e5931000 	ldr	r1, [r3]
   14c90:	e3110004 	tst	r1, #4
   14c94:	1a000027 	bne	14d38 <CDMA4Channel::Start()+0x114>
   14c98:	e3a01a07 	mov	r1, #28672	; 0x7000
   14c9c:	e34f1e00 	movt	r1, #65024	; 0xfe00
   14ca0:	e5911fe0 	ldr	r1, [r1, #4064]	; 0xfe0
   14ca4:	e3a0c001 	mov	ip, #1
   14ca8:	e011221c 	ands	r2, r1, ip, lsl r2
   14cac:	1a000026 	bne	14d4c <CDMA4Channel::Start()+0x128>
   14cb0:	e1a022a0 	lsr	r2, r0, #5
   14cb4:	e3a01020 	mov	r1, #32
   14cb8:	e5832004 	str	r2, [r3, #4]
   14cbc:	ebffef3c 	bl	109b4 <CleanAndInvalidateDataCacheRange>
   14cc0:	e5943000 	ldr	r3, [r4]
   14cc4:	e3a02001 	mov	r2, #1
   14cc8:	e34120f1 	movt	r2, #4337	; 0x10f1
   14ccc:	e59d4000 	ldr	r4, [sp]
   14cd0:	e28dd004 	add	sp, sp, #4
   14cd4:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   14cd8:	e2833070 	add	r3, r3, #112	; 0x70
   14cdc:	e1a03403 	lsl	r3, r3, #8
   14ce0:	e5832000 	str	r2, [r3]
   14ce4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   14ce8:	e3071a20 	movw	r1, #31264	; 0x7a20
   14cec:	e3401001 	movt	r1, #1
   14cf0:	e2810f7b 	add	r0, r1, #492	; 0x1ec
   14cf4:	e300214f 	movw	r2, #335	; 0x14f
   14cf8:	ebffce8b 	bl	872c <assertion_failed>
   14cfc:	e3071a20 	movw	r1, #31264	; 0x7a20
   14d00:	e3401001 	movt	r1, #1
   14d04:	e2810010 	add	r0, r1, #16
   14d08:	e3002149 	movw	r2, #329	; 0x149
   14d0c:	ebffce86 	bl	872c <assertion_failed>
   14d10:	e3071a20 	movw	r1, #31264	; 0x7a20
   14d14:	e3401001 	movt	r1, #1
   14d18:	e2810030 	add	r0, r1, #48	; 0x30
   14d1c:	e300214a 	movw	r2, #330	; 0x14a
   14d20:	ebffce81 	bl	872c <assertion_failed>
   14d24:	e3071a20 	movw	r1, #31264	; 0x7a20
   14d28:	e3401001 	movt	r1, #1
   14d2c:	e2810f47 	add	r0, r1, #284	; 0x11c
   14d30:	e300214b 	movw	r2, #331	; 0x14b
   14d34:	ebffce7c 	bl	872c <assertion_failed>
   14d38:	e3071a20 	movw	r1, #31264	; 0x7a20
   14d3c:	e3401001 	movt	r1, #1
   14d40:	e2810e23 	add	r0, r1, #560	; 0x230
   14d44:	e3a02f55 	mov	r2, #340	; 0x154
   14d48:	ebffce77 	bl	872c <assertion_failed>
   14d4c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14d50:	e3401001 	movt	r1, #1
   14d54:	e2810f99 	add	r0, r1, #612	; 0x264
   14d58:	e3002155 	movw	r2, #341	; 0x155
   14d5c:	ebffce72 	bl	872c <assertion_failed>
   14d60:	e3071a20 	movw	r1, #31264	; 0x7a20
   14d64:	e3401001 	movt	r1, #1
   14d68:	e2810e22 	add	r0, r1, #544	; 0x220
   14d6c:	e3a02e15 	mov	r2, #336	; 0x150
   14d70:	ebffce6d 	bl	872c <assertion_failed>

00014d74 <CDMA4Channel::Wait()>:
   14d74:	e5902000 	ldr	r2, [r0]
   14d78:	e52d4008 	str	r4, [sp, #-8]!
   14d7c:	e58de004 	str	lr, [sp, #4]
   14d80:	e352000a 	cmp	r2, #10
   14d84:	9a00001b 	bls	14df8 <CDMA4Channel::Wait()+0x84>
   14d88:	e352000e 	cmp	r2, #14
   14d8c:	8a00001e 	bhi	14e0c <CDMA4Channel::Wait()+0x98>
   14d90:	e5903014 	ldr	r3, [r0, #20]
   14d94:	e1a04000 	mov	r4, r0
   14d98:	e3530000 	cmp	r3, #0
   14d9c:	028228fe 	addeq	r2, r2, #16646144	; 0xfe0000
   14da0:	02822070 	addeq	r2, r2, #112	; 0x70
   14da4:	01a02402 	lsleq	r2, r2, #8
   14da8:	1a00001c 	bne	14e20 <CDMA4Channel::Wait()+0xac>
   14dac:	e5923000 	ldr	r3, [r2]
   14db0:	e3130001 	tst	r3, #1
   14db4:	1afffffc 	bne	14dac <CDMA4Channel::Wait()+0x38>
   14db8:	e5942020 	ldr	r2, [r4, #32]
   14dbc:	e2233b01 	eor	r3, r3, #1024	; 0x400
   14dc0:	e7e00553 	ubfx	r0, r3, #10, #1
   14dc4:	e5c4001c 	strb	r0, [r4, #28]
   14dc8:	e3520000 	cmp	r2, #0
   14dcc:	1a000002 	bne	14ddc <CDMA4Channel::Wait()+0x68>
   14dd0:	e59d4000 	ldr	r4, [sp]
   14dd4:	e28dd004 	add	sp, sp, #4
   14dd8:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   14ddc:	e1a00002 	mov	r0, r2
   14de0:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   14de4:	ebffeef2 	bl	109b4 <CleanAndInvalidateDataCacheRange>
   14de8:	e5d4001c 	ldrb	r0, [r4, #28]
   14dec:	e59d4000 	ldr	r4, [sp]
   14df0:	e28dd004 	add	sp, sp, #4
   14df4:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   14df8:	e3071a20 	movw	r1, #31264	; 0x7a20
   14dfc:	e3401001 	movt	r1, #1
   14e00:	e2810010 	add	r0, r1, #16
   14e04:	e3a02f59 	mov	r2, #356	; 0x164
   14e08:	ebffce47 	bl	872c <assertion_failed>
   14e0c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14e10:	e3401001 	movt	r1, #1
   14e14:	e2810030 	add	r0, r1, #48	; 0x30
   14e18:	e3002165 	movw	r2, #357	; 0x165
   14e1c:	ebffce42 	bl	872c <assertion_failed>
   14e20:	e3071a20 	movw	r1, #31264	; 0x7a20
   14e24:	e3401001 	movt	r1, #1
   14e28:	e2810fa6 	add	r0, r1, #664	; 0x298
   14e2c:	e3002166 	movw	r2, #358	; 0x166
   14e30:	ebffce3d 	bl	872c <assertion_failed>

00014e34 <CDMA4Channel::GetStatus()>:
   14e34:	e5903000 	ldr	r3, [r0]
   14e38:	e52d4008 	str	r4, [sp, #-8]!
   14e3c:	e58de004 	str	lr, [sp, #4]
   14e40:	e353000a 	cmp	r3, #10
   14e44:	9a00000b 	bls	14e78 <CDMA4Channel::GetStatus()+0x44>
   14e48:	e353000e 	cmp	r3, #14
   14e4c:	8a00000e 	bhi	14e8c <CDMA4Channel::GetStatus()+0x58>
   14e50:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   14e54:	e2833070 	add	r3, r3, #112	; 0x70
   14e58:	e1a03403 	lsl	r3, r3, #8
   14e5c:	e5933000 	ldr	r3, [r3]
   14e60:	e3130001 	tst	r3, #1
   14e64:	1a00000d 	bne	14ea0 <CDMA4Channel::GetStatus()+0x6c>
   14e68:	e59d4000 	ldr	r4, [sp]
   14e6c:	e28dd004 	add	sp, sp, #4
   14e70:	e5d0001c 	ldrb	r0, [r0, #28]
   14e74:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   14e78:	e3071a20 	movw	r1, #31264	; 0x7a20
   14e7c:	e3401001 	movt	r1, #1
   14e80:	e2810010 	add	r0, r1, #16
   14e84:	e300217a 	movw	r2, #378	; 0x17a
   14e88:	ebffce27 	bl	872c <assertion_failed>
   14e8c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14e90:	e3401001 	movt	r1, #1
   14e94:	e2810030 	add	r0, r1, #48	; 0x30
   14e98:	e300217b 	movw	r2, #379	; 0x17b
   14e9c:	ebffce22 	bl	872c <assertion_failed>
   14ea0:	e3071a20 	movw	r1, #31264	; 0x7a20
   14ea4:	e3401001 	movt	r1, #1
   14ea8:	e2810fad 	add	r0, r1, #692	; 0x2b4
   14eac:	e3a02f5f 	mov	r2, #380	; 0x17c
   14eb0:	ebffce1d 	bl	872c <assertion_failed>

00014eb4 <CDMA4Channel::InterruptHandler()>:
   14eb4:	e52d4008 	str	r4, [sp, #-8]!
   14eb8:	e1a04000 	mov	r4, r0
   14ebc:	e5900020 	ldr	r0, [r0, #32]
   14ec0:	e58de004 	str	lr, [sp, #4]
   14ec4:	e3500000 	cmp	r0, #0
   14ec8:	1a000024 	bne	14f60 <CDMA4Channel::InterruptHandler()+0xac>
   14ecc:	e5942000 	ldr	r2, [r4]
   14ed0:	e352000a 	cmp	r2, #10
   14ed4:	9a000026 	bls	14f74 <CDMA4Channel::InterruptHandler()+0xc0>
   14ed8:	e352000e 	cmp	r2, #14
   14edc:	8a000029 	bhi	14f88 <CDMA4Channel::InterruptHandler()+0xd4>
   14ee0:	e3a01a07 	mov	r1, #28672	; 0x7000
   14ee4:	e34f1e00 	movt	r1, #65024	; 0xfe00
   14ee8:	e5910fe0 	ldr	r0, [r1, #4064]	; 0xfe0
   14eec:	e3a03001 	mov	r3, #1
   14ef0:	e1a03213 	lsl	r3, r3, r2
   14ef4:	e1130000 	tst	r3, r0
   14ef8:	0a000027 	beq	14f9c <CDMA4Channel::InterruptHandler()+0xe8>
   14efc:	e5813fe0 	str	r3, [r1, #4064]	; 0xfe0
   14f00:	e5943000 	ldr	r3, [r4]
   14f04:	e28338fe 	add	r3, r3, #16646144	; 0xfe0000
   14f08:	e2833070 	add	r3, r3, #112	; 0x70
   14f0c:	e1a03403 	lsl	r3, r3, #8
   14f10:	e5931000 	ldr	r1, [r3]
   14f14:	e3110004 	tst	r1, #4
   14f18:	0a000024 	beq	14fb0 <CDMA4Channel::InterruptHandler()+0xfc>
   14f1c:	e3110001 	tst	r1, #1
   14f20:	1a000027 	bne	14fc4 <CDMA4Channel::InterruptHandler()+0x110>
   14f24:	e594e014 	ldr	lr, [r4, #20]
   14f28:	e2211b01 	eor	r1, r1, #1024	; 0x400
   14f2c:	e3a02004 	mov	r2, #4
   14f30:	e7e01551 	ubfx	r1, r1, #10, #1
   14f34:	e5832000 	str	r2, [r3]
   14f38:	e5c4101c 	strb	r1, [r4, #28]
   14f3c:	e35e0000 	cmp	lr, #0
   14f40:	0a000024 	beq	14fd8 <CDMA4Channel::InterruptHandler()+0x124>
   14f44:	e1a0300e 	mov	r3, lr
   14f48:	e5940000 	ldr	r0, [r4]
   14f4c:	e59de004 	ldr	lr, [sp, #4]
   14f50:	e5942018 	ldr	r2, [r4, #24]
   14f54:	e59d4000 	ldr	r4, [sp]
   14f58:	e28dd008 	add	sp, sp, #8
   14f5c:	e12fff13 	bx	r3
   14f60:	e5941024 	ldr	r1, [r4, #36]	; 0x24
   14f64:	ebffee92 	bl	109b4 <CleanAndInvalidateDataCacheRange>
   14f68:	e5942000 	ldr	r2, [r4]
   14f6c:	e352000a 	cmp	r2, #10
   14f70:	8affffd8 	bhi	14ed8 <CDMA4Channel::InterruptHandler()+0x24>
   14f74:	e3071a20 	movw	r1, #31264	; 0x7a20
   14f78:	e3401001 	movt	r1, #1
   14f7c:	e2810010 	add	r0, r1, #16
   14f80:	e3a02f62 	mov	r2, #392	; 0x188
   14f84:	ebffcde8 	bl	872c <assertion_failed>
   14f88:	e3071a20 	movw	r1, #31264	; 0x7a20
   14f8c:	e3401001 	movt	r1, #1
   14f90:	e2810030 	add	r0, r1, #48	; 0x30
   14f94:	e3002189 	movw	r2, #393	; 0x189
   14f98:	ebffcde3 	bl	872c <assertion_failed>
   14f9c:	e3071a20 	movw	r1, #31264	; 0x7a20
   14fa0:	e3401001 	movt	r1, #1
   14fa4:	e2810fbb 	add	r0, r1, #748	; 0x2ec
   14fa8:	e300218f 	movw	r2, #399	; 0x18f
   14fac:	ebffcdde 	bl	872c <assertion_failed>
   14fb0:	e3071a20 	movw	r1, #31264	; 0x7a20
   14fb4:	e3401001 	movt	r1, #1
   14fb8:	e2810fc1 	add	r0, r1, #772	; 0x304
   14fbc:	e3002193 	movw	r2, #403	; 0x193
   14fc0:	ebffcdd9 	bl	872c <assertion_failed>
   14fc4:	e3071a20 	movw	r1, #31264	; 0x7a20
   14fc8:	e3401001 	movt	r1, #1
   14fcc:	e2810fc5 	add	r0, r1, #788	; 0x314
   14fd0:	e3a02f65 	mov	r2, #404	; 0x194
   14fd4:	ebffcdd4 	bl	872c <assertion_failed>
   14fd8:	e3071a20 	movw	r1, #31264	; 0x7a20
   14fdc:	e3401001 	movt	r1, #1
   14fe0:	e2810f81 	add	r0, r1, #516	; 0x204
   14fe4:	e3002199 	movw	r2, #409	; 0x199
   14fe8:	ebffcdcf 	bl	872c <assertion_failed>

00014fec <CDMA4Channel::InterruptStub(void*)>:
   14fec:	e3500000 	cmp	r0, #0
   14ff0:	0a000000 	beq	14ff8 <CDMA4Channel::InterruptStub(void*)+0xc>
   14ff4:	eaffffae 	b	14eb4 <CDMA4Channel::InterruptHandler()>
   14ff8:	e3071a20 	movw	r1, #31264	; 0x7a20
   14ffc:	e3401001 	movt	r1, #1
   15000:	e52d4008 	str	r4, [sp, #-8]!
   15004:	e2810fca 	add	r0, r1, #808	; 0x328
   15008:	e3a02e1a 	mov	r2, #416	; 0x1a0
   1500c:	e58de004 	str	lr, [sp, #4]
   15010:	ebffcdc5 	bl	872c <assertion_failed>

00015014 <CBcmMailBox::CBcmMailBox(unsigned int, bool)>:
   15014:	e5801000 	str	r1, [r0]
   15018:	e5c02004 	strb	r2, [r0, #4]
   1501c:	e12fff1e 	bx	lr

00015020 <CBcmMailBox::~CBcmMailBox()>:
   15020:	e12fff1e 	bx	lr

00015024 <CBcmMailBox::WriteRead(unsigned int)>:
   15024:	e5d03004 	ldrb	r3, [r0, #4]
   15028:	e16d41f0 	strd	r4, [sp, #-16]!
   1502c:	e1a05000 	mov	r5, r0
   15030:	e58d6008 	str	r6, [sp, #8]
   15034:	e1a06001 	mov	r6, r1
   15038:	e58de00c 	str	lr, [sp, #12]
   1503c:	e24dd008 	sub	sp, sp, #8
   15040:	e3530000 	cmp	r3, #0
   15044:	1a000004 	bne	1505c <CBcmMailBox::WriteRead(unsigned int)+0x38>
   15048:	e3093718 	movw	r3, #38680	; 0x9718
   1504c:	e3403001 	movt	r3, #1
   15050:	e5930000 	ldr	r0, [r3]
   15054:	e3500000 	cmp	r0, #0
   15058:	1a00002c 	bne	15110 <CBcmMailBox::WriteRead(unsigned int)+0xec>
   1505c:	e3a04a0b 	mov	r4, #45056	; 0xb000
   15060:	e34f4e00 	movt	r4, #65024	; 0xfe00
   15064:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   15068:	e3130101 	tst	r3, #1073741824	; 0x40000000
   1506c:	1a000005 	bne	15088 <CBcmMailBox::WriteRead(unsigned int)+0x64>
   15070:	e3a00014 	mov	r0, #20
   15074:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   15078:	ebffe616 	bl	e8d8 <CTimer::SimpleMsDelay(unsigned int)>
   1507c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   15080:	e3130101 	tst	r3, #1073741824	; 0x40000000
   15084:	0afffff9 	beq	15070 <CBcmMailBox::WriteRead(unsigned int)+0x4c>
   15088:	e3a00a0b 	mov	r0, #45056	; 0xb000
   1508c:	e34f0e00 	movt	r0, #65024	; 0xfe00
   15090:	e59038b8 	ldr	r3, [r0, #2232]	; 0x8b8
   15094:	e3530000 	cmp	r3, #0
   15098:	bafffffc 	blt	15090 <CBcmMailBox::WriteRead(unsigned int)+0x6c>
   1509c:	e316000f 	tst	r6, #15
   150a0:	1a000020 	bne	15128 <CBcmMailBox::WriteRead(unsigned int)+0x104>
   150a4:	e5953000 	ldr	r3, [r5]
   150a8:	e3a02a0b 	mov	r2, #45056	; 0xb000
   150ac:	e34f2e00 	movt	r2, #65024	; 0xfe00
   150b0:	e1866003 	orr	r6, r6, r3
   150b4:	e58068a0 	str	r6, [r0, #2208]	; 0x8a0
   150b8:	e5950000 	ldr	r0, [r5]
   150bc:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   150c0:	e3130101 	tst	r3, #1073741824	; 0x40000000
   150c4:	1afffffc 	bne	150bc <CBcmMailBox::WriteRead(unsigned int)+0x98>
   150c8:	e5923880 	ldr	r3, [r2, #2176]	; 0x880
   150cc:	e203100f 	and	r1, r3, #15
   150d0:	e1510000 	cmp	r1, r0
   150d4:	1afffff8 	bne	150bc <CBcmMailBox::WriteRead(unsigned int)+0x98>
   150d8:	e5d52004 	ldrb	r2, [r5, #4]
   150dc:	e3c3000f 	bic	r0, r3, #15
   150e0:	e3520000 	cmp	r2, #0
   150e4:	1a000004 	bne	150fc <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   150e8:	e3093718 	movw	r3, #38680	; 0x9718
   150ec:	e3403001 	movt	r3, #1
   150f0:	e5933000 	ldr	r3, [r3]
   150f4:	e3530000 	cmp	r3, #0
   150f8:	1a000006 	bne	15118 <CBcmMailBox::WriteRead(unsigned int)+0xf4>
   150fc:	e28dd008 	add	sp, sp, #8
   15100:	e1cd40d0 	ldrd	r4, [sp]
   15104:	e59d6008 	ldr	r6, [sp, #8]
   15108:	e28dd00c 	add	sp, sp, #12
   1510c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)
   15110:	ebfff0e4 	bl	114a8 <EnterCritical>
   15114:	eaffffd0 	b	1505c <CBcmMailBox::WriteRead(unsigned int)+0x38>
   15118:	e58d0004 	str	r0, [sp, #4]
   1511c:	ebfff10f 	bl	11560 <LeaveCritical>
   15120:	e59d0004 	ldr	r0, [sp, #4]
   15124:	eafffff4 	b	150fc <CBcmMailBox::WriteRead(unsigned int)+0xd8>
   15128:	e3071d54 	movw	r1, #32084	; 0x7d54
   1512c:	e3401001 	movt	r1, #1
   15130:	e3070d64 	movw	r0, #32100	; 0x7d64
   15134:	e3400001 	movt	r0, #1
   15138:	e3a02062 	mov	r2, #98	; 0x62
   1513c:	ebffcd7a 	bl	872c <assertion_failed>

00015140 <CBcmMailBox::Flush()>:
   15140:	e52d4008 	str	r4, [sp, #-8]!
   15144:	e3a04a0b 	mov	r4, #45056	; 0xb000
   15148:	e34f4e00 	movt	r4, #65024	; 0xfe00
   1514c:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   15150:	e58de004 	str	lr, [sp, #4]
   15154:	e3130101 	tst	r3, #1073741824	; 0x40000000
   15158:	1a000005 	bne	15174 <CBcmMailBox::Flush()+0x34>
   1515c:	e3a00014 	mov	r0, #20
   15160:	e5943880 	ldr	r3, [r4, #2176]	; 0x880
   15164:	ebffe5db 	bl	e8d8 <CTimer::SimpleMsDelay(unsigned int)>
   15168:	e5943898 	ldr	r3, [r4, #2200]	; 0x898
   1516c:	e3130101 	tst	r3, #1073741824	; 0x40000000
   15170:	0afffff9 	beq	1515c <CBcmMailBox::Flush()+0x1c>
   15174:	e59d4000 	ldr	r4, [sp]
   15178:	e28dd004 	add	sp, sp, #4
   1517c:	e49df004 	pop	{pc}		; (ldr pc, [sp], #4)

00015180 <CBcmMailBox::Read()>:
   15180:	e5901000 	ldr	r1, [r0]
   15184:	e3a02a0b 	mov	r2, #45056	; 0xb000
   15188:	e34f2e00 	movt	r2, #65024	; 0xfe00
   1518c:	e5923898 	ldr	r3, [r2, #2200]	; 0x898
   15190:	e3130101 	tst	r3, #1073741824	; 0x40000000
   15194:	1afffffc 	bne	1518c <CBcmMailBox::Read()+0xc>
   15198:	e5920880 	ldr	r0, [r2, #2176]	; 0x880
   1519c:	e200300f 	and	r3, r0, #15
   151a0:	e1530001 	cmp	r3, r1
   151a4:	1afffff8 	bne	1518c <CBcmMailBox::Read()+0xc>
   151a8:	e3c0000f 	bic	r0, r0, #15
   151ac:	e12fff1e 	bx	lr

000151b0 <CBcmMailBox::Write(unsigned int)>:
   151b0:	e3a02a0b 	mov	r2, #45056	; 0xb000
   151b4:	e34f2e00 	movt	r2, #65024	; 0xfe00
   151b8:	e59238b8 	ldr	r3, [r2, #2232]	; 0x8b8
   151bc:	e3530000 	cmp	r3, #0
   151c0:	bafffffc 	blt	151b8 <CBcmMailBox::Write(unsigned int)+0x8>
   151c4:	e311000f 	tst	r1, #15
   151c8:	1a000003 	bne	151dc <CBcmMailBox::Write(unsigned int)+0x2c>
   151cc:	e5903000 	ldr	r3, [r0]
   151d0:	e1811003 	orr	r1, r1, r3
   151d4:	e58218a0 	str	r1, [r2, #2208]	; 0x8a0
   151d8:	e12fff1e 	bx	lr
   151dc:	e3071d54 	movw	r1, #32084	; 0x7d54
   151e0:	e3401001 	movt	r1, #1
   151e4:	e52d4008 	str	r4, [sp, #-8]!
   151e8:	e3070d64 	movw	r0, #32100	; 0x7d64
   151ec:	e3400001 	movt	r0, #1
   151f0:	e58de004 	str	lr, [sp, #4]
   151f4:	e3a02062 	mov	r2, #98	; 0x62
   151f8:	ebffcd4b 	bl	872c <assertion_failed>

000151fc <_GLOBAL__sub_I__ZN11CBcmMailBox10s_SpinLockE>:
   151fc:	e3093718 	movw	r3, #38680	; 0x9718
   15200:	e3403001 	movt	r3, #1
   15204:	e3a02000 	mov	r2, #0
   15208:	e5832000 	str	r2, [r3]
   1520c:	e12fff1e 	bx	lr

00015210 <__aeabi_ldivmod>:
   15210:	b97b      	cbnz	r3, 15232 <__aeabi_ldivmod+0x22>
   15212:	b972      	cbnz	r2, 15232 <__aeabi_ldivmod+0x22>
   15214:	2900      	cmp	r1, #0
   15216:	bfbe      	ittt	lt
   15218:	2000      	movlt	r0, #0
   1521a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   1521e:	e006      	blt.n	1522e <__aeabi_ldivmod+0x1e>
   15220:	bf08      	it	eq
   15222:	2800      	cmpeq	r0, #0
   15224:	bf1c      	itt	ne
   15226:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   1522a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1522e:	f000 b8e5 	b.w	153fc <__aeabi_idiv0>
   15232:	f1ad 0c08 	sub.w	ip, sp, #8
   15236:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   1523a:	2900      	cmp	r1, #0
   1523c:	db09      	blt.n	15252 <__aeabi_ldivmod+0x42>
   1523e:	2b00      	cmp	r3, #0
   15240:	db1a      	blt.n	15278 <__aeabi_ldivmod+0x68>
   15242:	f000 f84d 	bl	152e0 <__udivmoddi4>
   15246:	f8dd e004 	ldr.w	lr, [sp, #4]
   1524a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1524e:	b004      	add	sp, #16
   15250:	4770      	bx	lr
   15252:	4240      	negs	r0, r0
   15254:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15258:	2b00      	cmp	r3, #0
   1525a:	db1b      	blt.n	15294 <__aeabi_ldivmod+0x84>
   1525c:	f000 f840 	bl	152e0 <__udivmoddi4>
   15260:	f8dd e004 	ldr.w	lr, [sp, #4]
   15264:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   15268:	b004      	add	sp, #16
   1526a:	4240      	negs	r0, r0
   1526c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15270:	4252      	negs	r2, r2
   15272:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   15276:	4770      	bx	lr
   15278:	4252      	negs	r2, r2
   1527a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1527e:	f000 f82f 	bl	152e0 <__udivmoddi4>
   15282:	f8dd e004 	ldr.w	lr, [sp, #4]
   15286:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1528a:	b004      	add	sp, #16
   1528c:	4240      	negs	r0, r0
   1528e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   15292:	4770      	bx	lr
   15294:	4252      	negs	r2, r2
   15296:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1529a:	f000 f821 	bl	152e0 <__udivmoddi4>
   1529e:	f8dd e004 	ldr.w	lr, [sp, #4]
   152a2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   152a6:	b004      	add	sp, #16
   152a8:	4252      	negs	r2, r2
   152aa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   152ae:	4770      	bx	lr

000152b0 <__aeabi_uldivmod>:
   152b0:	b953      	cbnz	r3, 152c8 <__aeabi_uldivmod+0x18>
   152b2:	b94a      	cbnz	r2, 152c8 <__aeabi_uldivmod+0x18>
   152b4:	2900      	cmp	r1, #0
   152b6:	bf08      	it	eq
   152b8:	2800      	cmpeq	r0, #0
   152ba:	bf1c      	itt	ne
   152bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   152c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   152c4:	f000 b89a 	b.w	153fc <__aeabi_idiv0>
   152c8:	f1ad 0c08 	sub.w	ip, sp, #8
   152cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   152d0:	f000 f806 	bl	152e0 <__udivmoddi4>
   152d4:	f8dd e004 	ldr.w	lr, [sp, #4]
   152d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   152dc:	b004      	add	sp, #16
   152de:	4770      	bx	lr

000152e0 <__udivmoddi4>:
   152e0:	4299      	cmp	r1, r3
   152e2:	bf08      	it	eq
   152e4:	4290      	cmpeq	r0, r2
   152e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152ea:	4604      	mov	r4, r0
   152ec:	bf38      	it	cc
   152ee:	2000      	movcc	r0, #0
   152f0:	460d      	mov	r5, r1
   152f2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   152f6:	bf38      	it	cc
   152f8:	4601      	movcc	r1, r0
   152fa:	d36b      	bcc.n	153d4 <__udivmoddi4+0xf4>
   152fc:	4690      	mov	r8, r2
   152fe:	4699      	mov	r9, r3
   15300:	fab3 f283 	clz	r2, r3
   15304:	2b00      	cmp	r3, #0
   15306:	d070      	beq.n	153ea <__udivmoddi4+0x10a>
   15308:	fab5 f385 	clz	r3, r5
   1530c:	2d00      	cmp	r5, #0
   1530e:	d068      	beq.n	153e2 <__udivmoddi4+0x102>
   15310:	1ad2      	subs	r2, r2, r3
   15312:	f1a2 0e20 	sub.w	lr, r2, #32
   15316:	fa09 fb02 	lsl.w	fp, r9, r2
   1531a:	fa08 f30e 	lsl.w	r3, r8, lr
   1531e:	f1c2 0720 	rsb	r7, r2, #32
   15322:	ea4b 0b03 	orr.w	fp, fp, r3
   15326:	fa28 f307 	lsr.w	r3, r8, r7
   1532a:	ea4b 0b03 	orr.w	fp, fp, r3
   1532e:	fa08 fa02 	lsl.w	sl, r8, r2
   15332:	455d      	cmp	r5, fp
   15334:	bf08      	it	eq
   15336:	4554      	cmpeq	r4, sl
   15338:	bf3c      	itt	cc
   1533a:	2000      	movcc	r0, #0
   1533c:	4601      	movcc	r1, r0
   1533e:	d30a      	bcc.n	15356 <__udivmoddi4+0x76>
   15340:	2001      	movs	r0, #1
   15342:	ebb4 040a 	subs.w	r4, r4, sl
   15346:	fa00 f10e 	lsl.w	r1, r0, lr
   1534a:	fa20 f307 	lsr.w	r3, r0, r7
   1534e:	eb65 050b 	sbc.w	r5, r5, fp
   15352:	4319      	orrs	r1, r3
   15354:	4090      	lsls	r0, r2
   15356:	2a00      	cmp	r2, #0
   15358:	d03c      	beq.n	153d4 <__udivmoddi4+0xf4>
   1535a:	ea4f 085a 	mov.w	r8, sl, lsr #1
   1535e:	ea4f 095b 	mov.w	r9, fp, lsr #1
   15362:	ea48 78cb 	orr.w	r8, r8, fp, lsl #31
   15366:	4616      	mov	r6, r2
   15368:	e00b      	b.n	15382 <__udivmoddi4+0xa2>
   1536a:	ebb4 0308 	subs.w	r3, r4, r8
   1536e:	eb65 0a09 	sbc.w	sl, r5, r9
   15372:	18db      	adds	r3, r3, r3
   15374:	eb4a 0a0a 	adc.w	sl, sl, sl
   15378:	1c5c      	adds	r4, r3, #1
   1537a:	f14a 0500 	adc.w	r5, sl, #0
   1537e:	3e01      	subs	r6, #1
   15380:	d007      	beq.n	15392 <__udivmoddi4+0xb2>
   15382:	454d      	cmp	r5, r9
   15384:	bf08      	it	eq
   15386:	4544      	cmpeq	r4, r8
   15388:	d2ef      	bcs.n	1536a <__udivmoddi4+0x8a>
   1538a:	1924      	adds	r4, r4, r4
   1538c:	416d      	adcs	r5, r5
   1538e:	3e01      	subs	r6, #1
   15390:	d1f7      	bne.n	15382 <__udivmoddi4+0xa2>
   15392:	fa05 f707 	lsl.w	r7, r5, r7
   15396:	fa24 f302 	lsr.w	r3, r4, r2
   1539a:	433b      	orrs	r3, r7
   1539c:	fa25 fe0e 	lsr.w	lr, r5, lr
   153a0:	1900      	adds	r0, r0, r4
   153a2:	fa25 f802 	lsr.w	r8, r5, r2
   153a6:	ea43 040e 	orr.w	r4, r3, lr
   153aa:	f1a2 0720 	sub.w	r7, r2, #32
   153ae:	f1c2 0620 	rsb	r6, r2, #32
   153b2:	fa08 f302 	lsl.w	r3, r8, r2
   153b6:	fa04 f707 	lsl.w	r7, r4, r7
   153ba:	fa04 f202 	lsl.w	r2, r4, r2
   153be:	ea43 0307 	orr.w	r3, r3, r7
   153c2:	fa24 f606 	lsr.w	r6, r4, r6
   153c6:	eb45 0101 	adc.w	r1, r5, r1
   153ca:	4333      	orrs	r3, r6
   153cc:	1a80      	subs	r0, r0, r2
   153ce:	4645      	mov	r5, r8
   153d0:	eb61 0103 	sbc.w	r1, r1, r3
   153d4:	f1bc 0f00 	cmp.w	ip, #0
   153d8:	d001      	beq.n	153de <__udivmoddi4+0xfe>
   153da:	e9cc 4500 	strd	r4, r5, [ip]
   153de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153e2:	fab4 f384 	clz	r3, r4
   153e6:	3320      	adds	r3, #32
   153e8:	e792      	b.n	15310 <__udivmoddi4+0x30>
   153ea:	fab8 f288 	clz	r2, r8
   153ee:	fab5 f385 	clz	r3, r5
   153f2:	3220      	adds	r2, #32
   153f4:	2d00      	cmp	r5, #0
   153f6:	d18b      	bne.n	15310 <__udivmoddi4+0x30>
   153f8:	e7f3      	b.n	153e2 <__udivmoddi4+0x102>
   153fa:	bf00      	nop

000153fc <__aeabi_idiv0>:
   153fc:	4770      	bx	lr
   153fe:	bf00      	nop
